[
    {
        "filePath": "packages/backend/src/controller/security.ts",
        "content": "import { IError, IMiddleWare } from '../../src/handler/middleware';\nimport {\n    getClientPublicKeyService,\n    getKeyPairService,\n} from '../../src/services/security';\n\n//\nimport messages from '../../src/utils/messages';\n\n//\nexport const getKeyPairsController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = {\n            userId: req.body.userId,\n            clientId: req.cookies.clientId,\n            browserId: req.cookies.browserId,\n        };\n\n        const result = await getKeyPairService(data);\n\n        res.cookie('clientId', result.clientId, {\n            httpOnly: true,\n            secure: true,\n            sameSite: 'strict',\n            maxAge: +process.env.KEY_ROTATION_INTERVAL!,\n        });\n        res.status(200).json({\n            message: messages.responses.success,\n            publicKey: result.publicKey,\n            privateKey: result.privateKey,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const getClientPublicKeyController: IMiddleWare = async (\n    req,\n    res,\n    next\n) => {\n    try {\n        const data = req.body;\n        const result = await getClientPublicKeyService(data);\n\n        res.status(200).json({\n            message: messages.responses.success,\n            publicKey: result,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n"
    },
    {
        "filePath": "packages/backend/src/controller/utils.ts",
        "content": "import { IError, IMiddleWare } from '../../src/handler/middleware';\nimport messages from '../../src/utils/messages';\n\nexport const uploadFileController: IMiddleWare = async (req, res, next) => {\n    try {\n        res.status(200).json({\n            message: messages.responses.success,\n            data: `${process.env.ASSET_URL}${req.file?.filename}`,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n"
    },
    {
        "filePath": "packages/backend/src/handler/db.ts.ts",
        "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport mysql, { Pool, PoolOptions } from 'mysql2/promise';\n\nexport class MYSQLConnection {\n    private static pool: Pool;\n    private static logspool: Pool;\n    private static keyspool: Pool;\n    private constructor() {}\n\n    static configurePool(): Pool {\n        if (!MYSQLConnection.pool) {\n            const poolOptions: PoolOptions = {\n                connectionLimit: 150,\n                host: process.env.DB_HOST,\n                port: parseInt(process.env.DATABASE_PORT!),\n                user: process.env.DB_USER,\n                password: process.env.DB_PASSWORD,\n                database: process.env.DATABASE_NAME,\n                debug: false,\n                multipleStatements: false,\n                charset: 'utf8mb4',\n            };\n            MYSQLConnection.pool = mysql.createPool(poolOptions);\n\n            console.log('MySQL pool connection configured.');\n        }\n\n        return MYSQLConnection.pool;\n    }\n\n    static configureLogsPool(): Pool {\n        if (!MYSQLConnection.logspool) {\n            const poolOptions: PoolOptions = {\n                connectionLimit: 150,\n                host: process.env.DB_HOST,\n                port: parseInt(process.env.DATABASE_PORT!),\n                user: process.env.DB_USER,\n                password: process.env.DB_PASSWORD,\n                database: process.env.LOG_DATABASE_NAME,\n                debug: false,\n                multipleStatements: false,\n                charset: 'utf8mb4',\n            };\n            MYSQLConnection.logspool = mysql.createPool(poolOptions);\n\n            console.log('MySQL Logs pool connection configured.');\n        }\n\n        return MYSQLConnection.logspool;\n    }\n\n    static configureKeysPool(): Pool {\n        if (!MYSQLConnection.keyspool) {\n            const poolOptions: PoolOptions = {\n                connectionLimit: 150,\n                host: process.env.DB_HOST,\n                port: parseInt(process.env.DATABASE_PORT!),\n                user: process.env.DB_USER,\n                password: process.env.DB_PASSWORD,\n                database: process.env.KEY_DATABASE_NAME,\n                debug: false,\n                multipleStatements: false,\n                charset: 'utf8mb4',\n            };\n            MYSQLConnection.keyspool = mysql.createPool(poolOptions);\n\n            console.log('MySQL Logs pool connection configured.');\n        }\n\n        return MYSQLConnection.keyspool;\n    }\n\n    static closePool() {\n        if (MYSQLConnection.pool) {\n            MYSQLConnection.pool.end();\n            console.log('MySQL pool connection closed.');\n        }\n        if (MYSQLConnection.logspool) {\n            MYSQLConnection.logspool.end();\n            console.log('MySQL pool connection closed.');\n        }\n        if (MYSQLConnection.keyspool) {\n            MYSQLConnection.keyspool.end();\n            console.log('MySQL pool connection closed.');\n        }\n    }\n}\n\nexport const executeQuery: IQuery = async (\n    query: string,\n    values?: any\n): Promise<any> => {\n    const pool = MYSQLConnection.configurePool();\n    const [results] = await pool.query(query, values);\n    return results;\n};\n\nexport const executeLogsQuery: IQuery = async (\n    query: string,\n    values?: any\n): Promise<any> => {\n    const pool = MYSQLConnection.configureLogsPool();\n    const [results] = await pool.query(query, values);\n    return results;\n};\n\nexport const executeKeysQuery: IQuery = async (\n    query: string,\n    values?: any\n): Promise<any> => {\n    const pool = MYSQLConnection.configureKeysPool();\n    const [results] = await pool.query(query, values);\n    return results;\n};\n\nexport type IQuery = (query: string, values?: any) => Promise<any>;\n"
    },
    {
        "filePath": "packages/backend/src/handler/error.ts",
        "content": "import { logErrorToFile } from '../../src/handler/logger';\nimport { IErrorHandler } from '../../src/handler/middleware';\n\n//\nimport messages from '../../src/utils/messages';\n\n//\nexport const createError = (code: number, message: string) => {\n    const error = new Error(message);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (error as any).code = code;\n    return error;\n};\n\nexport const errorHandler: IErrorHandler = (error, _req, res, _next) => {\n    if (!Object.values(messages.responses).includes(`${error.message}`))\n        logErrorToFile(error);\n\n    const statusCode =\n        typeof error.code === 'string' ? parseInt(error.code, 10) : error.code;\n    const validStatusCode = isNaN(statusCode) ? 500 : statusCode;\n    const validateMessage =\n        typeof error.code === 'string' ? 'Something went wrong' : error.message;\n\n    res.status(validStatusCode).send({\n        message: validateMessage,\n    });\n};\n"
    },
    {
        "filePath": "packages/backend/src/handler/logger.ts",
        "content": "import fs from 'fs';\nimport path from 'path';\nimport { IError, IMiddleWare } from '../../src/handler/middleware';\n\n// Function to get the current date in YYYY-MM-DD format\nconst getDateString = () => {\n    return new Date().toISOString().split('T')[0];\n};\n\n// Error log file with date\nconst getErrorLogFilePath = () =>\n    path.join(\n        __dirname,\n        `${process.env.MAIN_PATH}/logs`,\n        `error-${getDateString()}.log`\n    );\n\nexport const logErrorToFile = (error: IError) => {\n    const logFilePath = getErrorLogFilePath();\n    const logMessage = `[${new Date().toISOString()}] ${error.stack || error.message}\\n`;\n    if (!fs.existsSync(path.dirname(logFilePath))) {\n        fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n    }\n    fs.appendFileSync(logFilePath, logMessage, 'utf8');\n};\n\n// Access log file with date\nconst getAccessLogFilePath = () =>\n    path.join(\n        __dirname,\n        `${process.env.MAIN_PATH}/logs`,\n        `access-${getDateString()}.log`\n    );\n\nexport const logAccess: IMiddleWare = (req, res, next) => {\n    const logFilePath = getAccessLogFilePath();\n    const logMessage = `[${new Date().toISOString()}] ${req.method} ${req.url} ${req.ip} params: ${JSON.stringify(req.params || {})}, body: ${JSON.stringify(req.body || {})}\\n`;\n    if (!fs.existsSync(path.dirname(logFilePath))) {\n        fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n    }\n    fs.appendFileSync(logFilePath, logMessage, 'utf8');\n    next();\n};\n\n// Mail log file with date\nconst getMailLogFilePath = () =>\n    path.join(\n        __dirname,\n        `${process.env.MAIN_PATH}/logs`,\n        `mail-${getDateString()}.log`\n    );\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const logMail = (data: Record<string, any>) => {\n    const logFilePath = getMailLogFilePath();\n    const logMessage = `[${new Date().toISOString()}] Config: ${JSON.stringify(data.config)}, Error: ${JSON.stringify(data.error)}, Result: ${JSON.stringify(data.data || {})}\\n`;\n    if (!fs.existsSync(path.dirname(logFilePath))) {\n        fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n    }\n    fs.appendFileSync(logFilePath, logMessage, 'utf8');\n};\n"
    },
    {
        "filePath": "packages/backend/src/handler/middleware.ts",
        "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Request, Response } from 'express';\nimport type { ObjectSchema } from 'yup';\n\nexport type IErrorHandler = (\n    error: IError,\n    req: Request,\n    res: Response,\n    next: IErrorCallback\n) => void;\n\nexport type IErrorCallback = (args?: Record<string, any>) => void;\n\nexport interface IError {\n    stack: string;\n    code: number;\n    message: string | boolean | Record<string, string>;\n}\n\nexport type IMiddleWare = (\n    req: Request,\n    res: Response,\n    next: IErrorCallback,\n    optional?: boolean\n) => void;\n\nexport type IValidator = (validation: ObjectSchema<any>) => IMiddleWare;\n\nexport type IService<T> = (data: Record<string, any>) => Promise<T>;\n"
    },
    {
        "filePath": "packages/backend/src/handler/tokenVerification.ts",
        "content": "import { Response } from 'express';\n\n//\nimport { IMiddleWare } from '../../src/handler/middleware';\n// import { getAuth } from '../../src/libraries/firebase';\nimport { generateToken, verifyToken } from '../../src/libraries/tokenGenerator';\nimport { createError } from '../../src/handler/error';\nimport { getUserByIDandSecretKeyRepo } from '../../src/repository/user';\n\n//\nimport messages from '../utils/messages';\n\n//\nconst clearCookies = (res: Response) => {\n    res.cookie('refreshToken', '', {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict',\n    });\n    res.cookie('accessToken', '', {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict',\n    });\n};\n\nexport const tokenChecker: IMiddleWare = async (\n    req,\n    res,\n    next,\n    optional = false\n) => {\n    try {\n        req.body.userId = req.cookies.browserId;\n\n        const refreshToken = req.cookies.refreshToken;\n        const accessToken = req.cookies.accessToken;\n\n        if (!optional && !refreshToken && !accessToken) {\n            clearCookies(res);\n            return next(createError(401, messages.responses.unauthorized));\n        }\n\n        let result;\n        try {\n            result = await verifyToken(accessToken);\n        } catch {\n            if (refreshToken) {\n                result = await verifyToken(refreshToken);\n\n                const payload = JSON.parse(atob(accessToken.split('.')?.[1]));\n\n                const now = Date.now();\n\n                if (\n                    now - payload.lastUsed <=\n                    +process.env.REFRESH_TOKEN_EXPIRES_IN!\n                ) {\n                    const newAccessTokenToken = await generateToken(\n                        { ...result, lastUsed: now },\n                        true\n                    );\n                    res.cookie('accessToken', newAccessTokenToken, {\n                        httpOnly: true,\n                        secure: true,\n                        sameSite: 'strict',\n                        maxAge: +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n                    });\n                } else {\n                    clearCookies(res);\n                    return next(\n                        createError(401, messages.responses.unauthorized)\n                    );\n                }\n            }\n        }\n\n        const {\n            iat: _,\n            exp: __,\n            lastUsed: ___,\n            ...data\n        } = result as Record<string, string>;\n\n        if (data.secretKey) {\n            const isUserAvailable = await getUserByIDandSecretKeyRepo(\n                data.userId,\n                data.secretKey\n            );\n\n            if (!isUserAvailable) {\n                clearCookies(res);\n                return next(createError(401, messages.responses.unauthorized));\n            }\n        }\n\n        req.body = {\n            ...req.body,\n            ...data,\n        };\n\n        next();\n    } catch {\n        if (optional) return next();\n        else {\n            clearCookies(res);\n            return next(createError(401, messages.responses.unauthorized));\n        }\n    }\n};\n\n//\nexport const headerTokenChecker: IMiddleWare = async (req, _, next) => {\n    try {\n        const token = req.headers.authorization?.split(' ')?.[1];\n        if (!token) throw createError(401, messages.responses.unauthorized);\n\n        const result = await verifyToken(token);\n\n        req.body = {\n            ...result,\n            ...req.body,\n        };\n        next();\n    } catch {\n        return next(createError(401, messages.responses.unauthorized));\n    }\n};\n\n// export const providerTokenChecker: IMiddleWare = async (req, _, next) => {\n//     const requestToken = req.headers.authorization?.split(' ')?.[1];\n\n//     if (!requestToken) throw createError(400, messages.responses.tokenNotFound);\n\n//     await getAuth()\n//         .verifyIdToken(requestToken)\n//         .then((decodedToken) => {\n//             const providerId = decodedToken.uid;\n//             const name = decodedToken.name;\n//             const email = decodedToken.email;\n\n//             req.body = {\n//                 ...{\n//                     providerId,\n//                     name,\n//                     email,\n//                 },\n//                 ...req.body,\n//             };\n\n//             next();\n//         });\n// };\n"
    },
    {
        "filePath": "packages/backend/src/handler/validator.ts",
        "content": "import { IError, IValidator } from './middleware';\n\nexport const validator: IValidator = (validation) => {\n    return async (req, res, next) => {\n        try {\n            await validation.validate(req.body);\n\n            next();\n        } catch (e) {\n            res.status(400).json({ message: (e as IError).message });\n        }\n    };\n};\n"
    },
    {
        "filePath": "packages/backend/src/index.ts",
        "content": "import express from 'express';\nimport { rateLimit } from 'express-rate-limit';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport swaggerUI from 'swagger-ui-express';\n\ndotenv.config();\n\n//\nimport { errorHandler } from '../src/handler/error';\nimport { logAccess } from '../src/handler/logger';\nimport { swaggerSpec } from '../src/swagger';\nimport userRoutes from '../src/routes/user';\nimport securityRoutes from '../src/routes/security';\nimport utilRoutes from '../src/routes/utils';\nimport {\n    clientHandler,\n    decryptPayload,\n    inputValidationMiddleware,\n} from '../src/handler/security';\n\n//\nconst app = express();\nconst port = process.env.PORT;\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    limit: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes).\n    standardHeaders: 'draft-8', // draft-6: `RateLimit-*` headers; draft-7 & draft-8: combined `RateLimit` header\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers.\n});\n\nif (process.env.MODE !== 'development') {\n    app.use(limiter);\n}\nif (process.env.MODE === 'development') {\n    app.use(\n        cors({\n            origin: process.env.CORS_ORIGIN?.split(',')?.map((url) =>\n                url.trim()\n            ),\n            credentials: true,\n        })\n    );\n}\napp.use(bodyParser.json({ limit: '5MB' }));\napp.use(bodyParser.urlencoded({ limit: '5MB', extended: true }));\napp.use(cookieParser());\napp.use(express.json());\napp.disable('x-powered-by');\napp.set('trust proxy', 1);\napp.use(clientHandler);\n\napp.use('/files', express.static('../assets/files'));\n\napp.get('/', (_, res) => {\n    res.send('API running successfully!');\n});\napp.use('/api-docs', swaggerUI.serve, swaggerUI.setup(swaggerSpec));\n\napp.use(decryptPayload);\napp.use(logAccess);\napp.use(inputValidationMiddleware);\n\napp.use('/v1/user', userRoutes);\napp.use('/v1/security', securityRoutes);\napp.use('/v1/utils', utilRoutes);\n\napp.use(errorHandler);\n\nif (process.env.NODE_ENV !== 'test')\n    app.listen(port, () => {\n        console.log(`Server running on ${port}`);\n    });\n\nexport default app;\n"
    },
    {
        "filePath": "packages/backend/src/libraries/fileSystem.ts",
        "content": "import fs from 'fs';\nimport path from 'path';\n\nexport const readFileData = (_filePath: string): Promise<string> => {\n    const filePath = path.join(__dirname, _filePath);\n    return new Promise((resolve, reject) =>\n        fs.readFile(filePath, 'utf8', (metaError, data) => {\n            if (metaError) reject(metaError);\n            resolve(data);\n        })\n    );\n};\n"
    },
    {
        "filePath": "packages/backend/src/libraries/fileUpload.ts",
        "content": "import multer from 'multer';\nimport path from 'path';\n\n//\nexport const fileUpload = multer({\n    storage: multer.diskStorage({\n        destination: function (_, __, cb) {\n            cb(\n                null,\n                path.join(\n                    __dirname,\n                    process.env.MODE === 'development'\n                        ? '../../../assets/files'\n                        : '../assets/files'\n                )\n            );\n        },\n        filename: function (_, file, cb) {\n            cb(null, Date.now() + '-' + file.originalname);\n        },\n    }),\n    fileFilter: async (req, file, cb) => {\n        req.headers['content-type'] = 'application/json';\n        const filetypes = /jpg|jpeg|png|gif/;\n        const extname = filetypes.test(\n            path.extname(file.originalname).toLowerCase()\n        );\n        const mimetype = filetypes.test(file.mimetype);\n\n        if (mimetype && extname) {\n            return cb(null, true);\n        } else {\n            cb(new Error('Unsupported file'));\n        }\n    },\n}).single('file');\n"
    },
    {
        "filePath": "packages/backend/src/libraries/firebase.ts",
        "content": "import admin from 'firebase-admin';\nimport { getAuth } from 'firebase-admin/auth';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst serviceAccount = require(process.env.SERVICE_KEY_PATH!);\n\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n});\n\nexport { getAuth };\n"
    },
    {
        "filePath": "packages/backend/src/libraries/mail.ts",
        "content": "import nodemailer from 'nodemailer';\n\nconst configOptions = {\n    host: process.env.MAIL_HOST,\n    secure: process.env.MAIL_SECURE === 'true',\n    port: process.env.MAIL_PORT ? Number(process.env.MAIL_PORT!) : 587,\n    auth: {\n        user: process.env.MAIL_ADDRESS,\n        pass: process.env.MAIL_PWD,\n    },\n};\n\nexport const transporter = nodemailer.createTransport(configOptions);\n\nconst createTestTransporter = async () => {\n    const testAccount = await nodemailer.createTestAccount();\n\n    const configOptions = {\n        host: testAccount.smtp.host,\n        secure: testAccount.smtp.secure,\n        port: testAccount.smtp.port,\n        auth: {\n            user: testAccount.user,\n            pass: testAccount.pass,\n        },\n    };\n\n    return nodemailer.createTransport(configOptions);\n};\n\nexport const testTransporter = createTestTransporter();\n"
    },
    {
        "filePath": "packages/backend/src/libraries/otp.ts",
        "content": "// import { SNSClient, PublishCommand } from '@aws-sdk/client-sns';\n\nexport const sendOTP = async (PhoneNumber: string, otp: string) => {\n    // const params = {\n    //     Message: `Your OTP code is: ${otp}`,\n    //     PhoneNumber,\n    //     MessageAttributes: {\n    //         'AWS.SNS.SMS.SenderID': {\n    //             DataType: 'String',\n    //             StringValue: 'String',\n    //         },\n    //     },\n    // };\n\n    // const sns = new SNSClient({\n    //     region: process.env.AWS_REGION!,\n    //     credentials: {\n    //         accessKeyId: process.env.AWS_ACCESS_KEY!,\n    //         secretAccessKey: process.env.AWS_SECRET_KEY!,\n    //     },\n    // });\n\n    // const command = new PublishCommand(params);\n\n    // const message = await sns.send(command);\n\n    // return message;\n    return {};\n};\n"
    },
    {
        "filePath": "packages/backend/src/libraries/passwordGenerator.ts",
        "content": "import bcryptjs from 'bcryptjs';\n\nexport const generatePasswordHash: IGeneratePasswordHash = (password) => {\n    return new Promise((resolve, rejected) => {\n        bcryptjs.genSalt(10, (error, salt) => {\n            if (error) rejected(error);\n            bcryptjs.hash(password, salt, (passwordError, hash) => {\n                if (passwordError) rejected(passwordError);\n                resolve(hash);\n            });\n        });\n    });\n};\n\nexport const verifyPassword: IVerifyPassword = (\n    requestPassword,\n    dbPassword\n) => {\n    return new Promise((resolve) => {\n        bcryptjs.compare(requestPassword, dbPassword, (error, isMatch) => {\n            if (error) resolve(false);\n            resolve(isMatch);\n        });\n    });\n};\n\nexport type IGeneratePasswordHash = (password: string) => Promise<string>;\n\nexport type IVerifyPassword = (\n    password: string,\n    requestPassword: string\n) => Promise<boolean>;\n"
    },
    {
        "filePath": "packages/backend/src/libraries/renderer.ts",
        "content": "import ejs from 'ejs';\n\nexport const renderHTML = (\n    template: string,\n    data: Record<string, string | number>\n) => ejs.render(template, data);\n"
    },
    {
        "filePath": "packages/backend/src/libraries/tokenGenerator.ts",
        "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport jwt from 'jsonwebtoken';\n\n//\nexport const verifyToken: IVerifyToken = (token: string) => {\n    return new Promise((resolve, reject) => {\n        jwt.verify(\n            token,\n            process.env.SECRET_KEY!,\n            async (err, payload: any) => {\n                if (err) reject(err);\n                resolve(payload);\n            }\n        );\n    });\n};\n\nexport const generateTokenByRefreshToken: IGenerateRefreshToken = (token) => {\n    return new Promise((resolve) => {\n        verifyToken(token).then((result) => {\n            const token = generateToken({\n                ...result,\n            });\n            resolve(token);\n        });\n    });\n};\n\nexport const generateToken: IGenerateToken = (data, verification = false) => {\n    const { exp: _, iat: __, ...payload } = data;\n    const token = jwt.sign(payload, process.env.SECRET_KEY!, {\n        expiresIn: verification\n            ? +process.env.EXPIRES_IN!\n            : +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n    });\n    return token;\n};\n\nexport type IVerifyToken = (token: string) => Promise<Record<string, any>>;\n\nexport type IGenerateToken = (\n    data: Record<string, any>,\n    verification?: boolean\n) => string;\n\nexport type IGenerateRefreshToken = (token: string) => Promise<string>;\n"
    },
    {
        "filePath": "packages/backend/src/repository/security.ts",
        "content": "import { executeKeysQuery } from '../../src/handler/db.ts';\n\n//\nexport const addKeyPairRepo = async ({\n    clientId,\n    userId,\n    publicKey,\n    privateKey,\n    createdAt,\n}: Record<string, string>) => {\n    const query = `INSERT INTO keyPair (clientId, userId, publicKey, privateKey, createdAt) VALUES (?, ?, ?, ?, ?)`;\n    const queryResponse = await executeKeysQuery(query, [\n        clientId,\n        userId,\n        publicKey,\n        privateKey,\n        createdAt,\n    ]);\n\n    return queryResponse.insertId;\n};\n\nexport const getKeysRepo = async (clientId: string) => {\n    const query = `SELECT * FROM keyPair WHERE clientId = ?`;\n    const queryResponse = await executeKeysQuery(query, [clientId]);\n\n    return queryResponse[0];\n};\n\nexport const getKeysByUserIdRepo = async (userId: string) => {\n    const query = `SELECT * FROM keyPair WHERE userId = ?`;\n    const queryResponse = await executeKeysQuery(query, [userId]);\n\n    return queryResponse[0];\n};\n\nexport const updateClientUserId = async (clientId: string, userId: string) => {\n    const query = `UPDATE keyPair SET userId=? WHERE clientId=?`;\n\n    const queryResponse = await executeKeysQuery(query, [userId, clientId]);\n\n    return queryResponse.affectedRows;\n};\n"
    },
    {
        "filePath": "packages/backend/src/routes/security.ts",
        "content": "import express from 'express';\n\n//\nimport { tokenChecker } from '../../src/handler/tokenVerification';\nimport {\n    getClientPublicKeyController,\n    getKeyPairsController,\n} from '../../src/controller/security';\n\n//\nconst router = express.Router();\n\nrouter.route('/keyPair').get((req, res, next) => {\n    const optional = true;\n    tokenChecker(req, res, next, optional);\n}, getKeyPairsController);\n\nrouter.route('/client-publicKey').get(getClientPublicKeyController);\n\nexport default router;\n"
    },
    {
        "filePath": "packages/backend/src/routes/utils.ts",
        "content": "import express from 'express';\n\n//\nimport { fileUpload } from '../../src/libraries/fileUpload';\nimport { decryptPayload, filePathScanner } from '../../src/handler/security';\nimport { uploadFileController } from '../../src/controller/utils';\nimport { tokenChecker } from '../../src/handler/tokenVerification';\n\n//\nconst router = express.Router();\n\n//\nrouter\n    .route('/file-upload')\n    .post(\n        fileUpload,\n        decryptPayload,\n        tokenChecker,\n        filePathScanner,\n        uploadFileController\n    );\n\nexport default router;\n"
    },
    {
        "filePath": "packages/backend/src/services/security.ts",
        "content": "import { generateSecretKey } from '../../src/utils';\nimport { IService } from '../../src/handler/middleware';\nimport {\n    addKeyPairRepo,\n    getKeysByUserIdRepo,\n    getKeysRepo,\n} from '../../src/repository/security';\nimport { createError } from '../../src/handler/error';\n\n//\nimport messages from '../../src/utils/messages';\n\n//\nexport const getKeyPairService: IService<any> = async (data) => {\n    let clientId = data.browserId;\n    const userId = data.userId || null;\n\n    if (clientId && !userId) {\n        if (!(global as any).userKeys[clientId]) {\n            const keyPair = await getKeysRepo(clientId);\n            if (keyPair)\n                (global as any).userKeys[clientId] = {\n                    publicKey: Uint8Array.from(\n                        Buffer.from(keyPair.publicKey, 'base64')\n                    ),\n                    privateKey: Uint8Array.from(\n                        Buffer.from(keyPair.privateKey, 'base64')\n                    ),\n                    createdAt: +keyPair.createdAt,\n                };\n        }\n    } else if (userId) {\n        (global as any).userKeys[clientId] = null;\n        const keyPair = await getKeysByUserIdRepo(userId);\n        if (keyPair) {\n            clientId = keyPair.clientId;\n            (global as any).userKeys[clientId] = {\n                publicKey: Uint8Array.from(\n                    Buffer.from(keyPair.publicKey, 'base64')\n                ),\n                privateKey: Uint8Array.from(\n                    Buffer.from(keyPair.privateKey, 'base64')\n                ),\n                createdAt: +keyPair.createdAt,\n            };\n        }\n    }\n\n    if ((global as any).userKeys[clientId]) {\n        const keyPair = (global as any).userKeys[clientId];\n\n        const publicKeyString = btoa(\n            String.fromCharCode(...new Uint8Array(keyPair.publicKey))\n        );\n        const privateKeyString = btoa(\n            String.fromCharCode(...new Uint8Array(keyPair.privateKey))\n        );\n\n        return {\n            clientId,\n            publicKey: publicKeyString,\n            privateKey: privateKeyString,\n        };\n    }\n\n    const keyPair = await crypto.subtle.generateKey(\n        {\n            name: 'RSA-OAEP',\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: 'SHA-256',\n        },\n        true,\n        ['encrypt', 'decrypt']\n    );\n\n    const publicKey = await crypto.subtle.exportKey('spki', keyPair.publicKey);\n    const privateKey = await crypto.subtle.exportKey(\n        'pkcs8',\n        keyPair.privateKey\n    );\n\n    clientId = data.userId ? `CLNT-${generateSecretKey()}` : data.browserId;\n\n    const createdAt = Date.now();\n\n    const privateKeyString = btoa(\n        String.fromCharCode(...new Uint8Array(privateKey))\n    );\n    const publicKeyString = btoa(\n        String.fromCharCode(...new Uint8Array(publicKey))\n    );\n    await addKeyPairRepo({\n        clientId,\n        userId,\n        publicKey: publicKeyString,\n        privateKey: privateKeyString,\n        createdAt: createdAt.toString(),\n    });\n\n    (global as any).userKeys[clientId] = { publicKey, privateKey, createdAt };\n\n    return {\n        clientId,\n        publicKey: publicKeyString,\n        privateKey: privateKeyString,\n    };\n};\n\nexport const getClientPublicKeyService: IService<string> = async (data) => {\n    const result = await getKeysRepo(data.clientId);\n\n    if (!result) throw createError(404, messages.responses.notFound);\n\n    return result.publicKey;\n};\n\n// Utils\nexport const getPrivateKey = async (clientId: string) => {\n    if (!(global as any).userKeys[clientId]?.privateKey) {\n        const { publicKey, privateKey, createdAt } =\n            await getKeysRepo(clientId);\n        (global as any).userKeys[clientId] = {\n            publicKey: Uint8Array.from(Buffer.from(publicKey, 'base64')),\n            privateKey: Uint8Array.from(Buffer.from(privateKey, 'base64')),\n            createdAt: +createdAt,\n        };\n    }\n\n    const privateKey = (global as any).userKeys[clientId]?.privateKey;\n\n    if (!privateKey) return;\n\n    const privateKeyObject = await crypto.subtle.importKey(\n        'pkcs8',\n        privateKey,\n        { name: 'RSA-OAEP', hash: 'SHA-256' },\n        false,\n        ['decrypt']\n    );\n\n    return privateKeyObject;\n};\n"
    },
    {
        "filePath": "packages/backend/src/swagger.ts",
        "content": "import swaggerJSDoc from 'swagger-jsdoc';\n\nconst swaggerDefinition = {\n    openapi: '3.0.0',\n    info: {\n        title: process.env.APP_NAME!,\n        version: '1.0.0',\n    },\n};\n\nconst options = {\n    swaggerDefinition,\n    apis: ['src/routes/*.ts', 'src/routes/*.js'],\n};\n\nexport const swaggerSpec = swaggerJSDoc(options);\n"
    },
    {
        "filePath": "packages/backend/src/utils/index.ts",
        "content": "export const generateId = () => {\n    return Array.from({ length: 32 }, () =>\n        Math.random().toString(36).charAt(2)\n    ).join('');\n};\n\nexport const generateSecretKey = () => {\n    return Math.random().toString(36).substring(2, 12);\n};\n"
    },
    {
        "filePath": "packages/backend/src/utils/mail.ts",
        "content": "import { logMail } from '../../src/handler/logger';\nimport { readFileData } from '../../src/libraries/fileSystem';\nimport { testTransporter, transporter } from '../../src/libraries/mail';\nimport { renderHTML } from '../../src/libraries/renderer';\n\nexport const sendMail: ISendMail = async (templatePath, data, config) => {\n    const mailConfigurations = {\n        from: process.env.APP_NAME,\n        ...config,\n    };\n    const template = await readFileData(templatePath);\n    mailConfigurations.html = renderHTML(template, {\n        ...data,\n        year: new Date().getFullYear(),\n        companyName: process.env.APP_NAME!,\n    });\n\n    const _transporter =\n        process.env.MODE === 'development' && testTransporter\n            ? await testTransporter\n            : transporter;\n\n    return new Promise((resolve) => {\n        _transporter.sendMail(mailConfigurations, (error, data) => {\n            logMail({ config, error, data });\n\n            if (error) throw error;\n            resolve(data);\n        });\n    });\n};\n\nexport type ISendMail = (\n    template: string,\n    data: Record<string, string | number>,\n    config: {\n        form?: string;\n        to?: string | string[];\n        bcc?: string | string[];\n        subject: string;\n        html?: string;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n"
    },
    {
        "filePath": "packages/backend/src/utils/messages.ts",
        "content": "export default {\n    responses: {\n        failedToCreateUser: 'User creation failed. Please try again later',\n        userCreated: 'User has been successfully created',\n        userNotFound: 'User not found',\n        userEmailAlreadyExist: 'An account with this email already exists',\n        userPhoneAlreadyExist:\n            'An account with this phone number already exists',\n        userUpdateFailed: 'Failed to update user details. Please try again',\n        userUpdated: 'User details updated successfully',\n        noPasswordAuth: 'Password authentication is not supported',\n        invalidCred: 'Invalid credentials. Please check and try again',\n        unverifiedUser: 'Your account has not been verified',\n        tokenNotFound: 'Authentication token is missing',\n        tokenExpired: 'Your session has expired. Please log in again',\n        unauthorized: 'You do not have permission to perform this action',\n        verified: 'Your account has been successfully verified',\n        passwordChanged: 'Password updated successfully',\n        passwordDoesNotMatch: 'Passwords do not match. Please try again',\n        passwordChangeFailed: 'Failed to update password. Please try again',\n        previousPasswordError:\n            'New password cannot be the same as the old password',\n        success: 'Operation completed successfully',\n        failed: 'Operation failed. Please try again',\n        expired: 'The requested resource has expired',\n        notFound: 'The requested resource was not found',\n        mailFailed: 'Failed to send email. Please try again',\n        mailSent: 'Email has been sent successfully!',\n        otpSent: 'OTP has been sent successfully!',\n        otpFailed: 'Failed to send OTP. Please try again',\n        otpVerificationFailed: 'OTP verification failed. Please try again',\n        keyExpired: 'KEY_EXPIRED',\n        invalidRequest: 'The request is invalid',\n        accountSuspended: (time: number) =>\n            `Your account has been suspended due to multiple invalid login attempts. Access will be restored in ${time} minutes.`,\n\n        harmfulContent: `Input contains potentially harmful content`,\n        harmfulFile: 'Harmful file detected',\n        fileNotFound: 'File not found',\n    },\n};\n"
    },
    {
        "filePath": "packages/backend/src/validations/user.ts",
        "content": "import * as yup from 'yup';\n\nexport const emailValidation = yup.object().shape({\n    email: yup\n        .string()\n        .email('Email must be valid')\n        .required('Email is required'),\n});\n\nexport const phoneValidation = yup.object().shape({\n    phoneNumber: yup.string().required('Phone number is required'),\n});\n\nexport const passwordValidation = yup.object().shape({\n    password: yup.string().required('Password is required'),\n});\n\nexport const requestVerificationValidation = yup\n    .object()\n    .shape({\n        email: yup.string().email('Email must be valid'),\n        phoneNumber: yup.string(),\n    })\n    .test(\n        'either-email-or-phoneNumber',\n        'Either email or phoneNumber is required',\n        (value) => {\n            const { email, phoneNumber } = value || {};\n            return !!email || !!phoneNumber;\n        }\n    );\n\nexport const updatePasswordValidation = yup\n    .object()\n    .shape({\n        currentPassword: yup.string().required('Current password is required'),\n    })\n    .concat(passwordValidation);\n\nexport const createUserValidation = yup\n    .object()\n    .shape({\n        name: yup.string().required('Name is required'),\n        password: yup.string(),\n        providerId: yup.string(),\n        profileURL: yup.string(),\n    })\n    .concat(emailValidation)\n    // .concat(phoneValidation)\n    .test(\n        'either-password-or-providerId',\n        'Either password or providerId is required',\n        (value) => {\n            const { password, providerId } = value || {};\n            return !!password || !!providerId;\n        }\n    );\n\nexport const updateUserValidation = yup.object().shape({\n    name: yup.string(),\n    profileURL: yup.string(),\n});\n\nexport const loginValidation = yup\n    .object()\n    .shape({\n        password: yup.string().required('Password is required'),\n    })\n    .concat(emailValidation);\n\nexport const phoneVerificationValidation = yup\n    .object()\n    .shape({\n        otp: yup.string().required('OTP is required'),\n    })\n    .concat(phoneValidation);\n\nexport const verificationRequestValidation =\n    emailValidation.concat(phoneValidation);\n\nexport const userIdValidation = yup.object().shape({\n    userId: yup.string().required('User ID is required'),\n});\n"
    },
    {
        "filePath": "packages/backend/tests/data.ts",
        "content": "export const user = {\n    name: 'TestUser',\n    newName: 'TestUserUpdate',\n    email: 'TestUser@mail.com',\n    password: 'Dev@123456',\n    newPassword: 'Dev@1234567',\n};\n"
    },
    {
        "filePath": "packages/backend/tests/setup.ts",
        "content": "import nodemailer from 'nodemailer';\nimport nodemailerMock from 'nodemailer-mock';\n\njest.mock('nodemailer', () => ({\n    ...jest.requireActual('nodemailer'),\n    createTransport: jest.fn(),\n}));\n\n(nodemailer.createTransport as jest.Mock).mockReturnValue(\n    nodemailerMock.createTransport()\n);\n"
    },
    {
        "filePath": "packages/backend/tests/utils.ts",
        "content": "import nodemailerMock from 'nodemailer-mock';\nimport Mail from 'nodemailer/lib/mailer';\n\nexport const waitForEmail = (interval = 1000): Promise<Mail.Options> => {\n    return new Promise((resolve) => {\n        const checkMail = () => {\n            const sentEmails = nodemailerMock.mock.getSentMail();\n            const mail = sentEmails[0];\n            if (mail) {\n                nodemailerMock.mock.reset();\n                resolve(mail);\n            } else {\n                setTimeout(checkMail, interval);\n            }\n        };\n\n        checkMail();\n    });\n};\n\nexport const encrypt = async (\n    data: Record<string, string>,\n    storedPublicKey: string\n) => {\n    if (storedPublicKey) {\n        const binaryString = atob(storedPublicKey);\n        const binaryData = Uint8Array.from(binaryString, (char) =>\n            char.charCodeAt(0)\n        );\n        const publicKey = await crypto.subtle.importKey(\n            'spki',\n            binaryData,\n            { name: 'RSA-OAEP', hash: 'SHA-256' },\n            false,\n            ['encrypt']\n        );\n\n        const symmetricKey = await crypto.subtle.generateKey(\n            { name: 'AES-GCM', length: 256 },\n            true,\n            ['encrypt', 'decrypt']\n        );\n\n        const symmetricKeyRaw = await crypto.subtle.exportKey(\n            'raw',\n            symmetricKey\n        );\n\n        const encryptedSymmetricKey = await crypto.subtle.encrypt(\n            { name: 'RSA-OAEP' },\n            publicKey,\n            symmetricKeyRaw\n        );\n\n        const encoder = new TextEncoder();\n        const encodedData = encoder.encode(JSON.stringify(data));\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const encryptedData = await crypto.subtle.encrypt(\n            { name: 'AES-GCM', iv },\n            symmetricKey,\n            encodedData\n        );\n\n        const encryptedSymmetricKeyBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedSymmetricKey))\n        );\n        const encryptedDataBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedData))\n        );\n        const ivBase64 = btoa(String.fromCharCode(...iv));\n\n        return {\n            encryptedSymmetricKey: encryptedSymmetricKeyBase64,\n            encryptedData: encryptedDataBase64,\n            iv: ivBase64,\n        };\n    }\n    return data;\n};\n"
    },
    {
        "filePath": "packages/frontend-react/plugins/vite-svg-plugin.ts",
        "content": "import { Plugin } from 'vite';\nimport { readFileSync, readdirSync, statSync } from 'fs';\nimport { resolve, basename, join } from 'path';\n\nconst getAllSvgFiles = (dir: string): Record<string, string> => {\n    const svgMap: Record<string, string> = {};\n\n    function readDirectory(directory: string) {\n        readdirSync(directory).forEach((file) => {\n            const filePath = resolve(directory, file);\n            const stat = statSync(filePath);\n\n            if (stat.isDirectory()) {\n                // Recursively read subdirectory\n                readDirectory(filePath);\n            } else if (file.endsWith('.svg')) {\n                // Add SVG file to the map\n                const svgContent = readFileSync(filePath, 'utf-8');\n                const fileName = join(\n                    basename(directory),\n                    basename(file)\n                ).replace(/\\\\/g, '/');\n                svgMap[fileName] = svgContent;\n            }\n        });\n    }\n\n    readDirectory(dir);\n    return svgMap;\n};\n\nexport const svgIconsPlugin = (svgDir: string): Plugin => {\n    const svgMap = getAllSvgFiles(svgDir);\n\n    return {\n        name: 'vite-plugin-svg-icons',\n        resolveId(id) {\n            if (id === 'virtual:svg-icons') {\n                return id;\n            }\n        },\n        load(id) {\n            if (id === 'virtual:svg-icons') {\n                return `\n\t\t\t\t\texport function getSvgIcon(name) {\n\t\t\t\t\t\treturn ${JSON.stringify(svgMap)}[name];\n\t\t\t\t\t}\n\t\t\t\t`;\n            }\n        },\n    };\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/App.tsx",
        "content": "import { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\n//\nimport { ErrorBoundaryProvider } from 'src/providers/errorBoundary';\nimport { UserProvider } from 'src/providers/userContext';\nimport { ToastProvider } from 'src/providers/toast';\nimport RouteMain from 'src/app/router';\n\n//\nfunction App() {\n    useEffect(() => {\n        document.getElementsByTagName('title')[0]!.innerText =\n            import.meta.env.VITE_APP_NAME;\n\n        document.documentElement.style.setProperty(\n            '--scale-factor',\n            window.devicePixelRatio.toString()\n        );\n        if (window.devicePixelRatio >= 1 && window.innerWidth > 768) {\n            const scale = 1 / window.devicePixelRatio;\n            document.body.style.zoom = `${scale}`;\n        }\n    }, []);\n\n    return (\n        <BrowserRouter>\n            <ErrorBoundaryProvider>\n                <ToastProvider>\n                    <UserProvider>\n                        <RouteMain />\n                    </UserProvider>\n                </ToastProvider>\n            </ErrorBoundaryProvider>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/avatar.tsx",
        "content": "export const Avatar = ({\n    name,\n    image,\n    onClick,\n    className = 'p-2 w-10 h-10',\n}: {\n    name: string;\n    image?: string;\n    onClick?: () => void;\n    className?: string;\n}) => {\n    return (\n        <div\n            data-testid=\"avatar\"\n            className={`app-shadow rounded-full dark:bg-transparent bg-gray-100 flex items-center justify-center text-xl overflow-hidden ${className} ${image ? '!p-0' : ''}`}\n            onClick={onClick}\n        >\n            {image ? (\n                <img\n                    src={image}\n                    className=\"w-full h-full object-cover rounded-full\"\n                />\n            ) : (\n                <>\n                    {name\n                        .split(' ')\n                        .map((n) => n[0].toUpperCase())\n                        .slice(0, 2)\n                        .join('')}\n                </>\n            )}\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/cookies.tsx",
        "content": "import { useEffect, useState } from 'react';\n\n//\nexport const Cookies = () => {\n    const [accepted, setAccept] = useState(false);\n\n    const acceptCookies = () => {\n        localStorage.setItem('cookiesAccepted', 'true');\n        setAccept(true);\n    };\n\n    useEffect(() => {\n        if (localStorage.getItem('cookiesAccepted') === 'true') setAccept(true);\n    }, [localStorage.getItem('cookiesAccepted')]);\n\n    return accepted ? (\n        <></>\n    ) : (\n        <div className=\"fixed bottom-4 left-4 right-4 md:left-auto md:right-4 bg-gray-800 text-white p-4 rounded-lg shadow-lg flex items-center justify-between\">\n            <p className=\"text-sm\">\n                We use cookies to enhance your experience. By using our app, you\n                agree to our cookie usage.\n            </p>\n            <button\n                onClick={acceptCookies}\n                className=\"ml-4 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded\"\n            >\n                Accept\n            </button>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/copy.tsx",
        "content": "import { ReactNode, useState } from 'react';\nimport SvgIcon from './svg';\nimport copy from 'copy-to-clipboard';\n\nexport const Copy = ({\n    content,\n    children,\n}: {\n    content: string;\n    children: ReactNode;\n}) => {\n    const [state, setState] = useState(false);\n\n    const contentCopy = () => {\n        copy(content);\n        setState(true);\n        setTimeout(() => {\n            setState(false);\n        }, 3000);\n    };\n\n    return (\n        <div className=\"flex items-center\">\n            {children}\n            <span onClick={contentCopy}>\n                {state ? (\n                    <SvgIcon\n                        path=\"/icons/svg/check.svg\"\n                        className=\"w-5 h-5 text-green-500\"\n                    />\n                ) : (\n                    <SvgIcon\n                        path=\"/icons/svg/copy.svg\"\n                        className=\"w-5 h-5 text-gray-500\"\n                    />\n                )}\n            </span>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/cropper.tsx",
        "content": "// import Cropper from 'cropperjs';\n// import { useEffect, useRef, useState } from 'react';\n// import SvgIcon from './svg';\n\nexport const CropperView = ({\n    image,\n    // close,\n    // callback,\n}: {\n    image: string;\n    close: () => void;\n    callback: (image: Blob) => void;\n}) => {\n    return <>{image}</>;\n    // const [cropper, setCropper] = useState<Cropper>();\n    // const imageRef = useRef<HTMLImageElement>(null); // Use a ref for the image element\n\n    // const cropImage = () => {\n    //     if (!cropper) return;\n    //     cropper.getCroppedCanvas().toBlob((blob) => {\n    //         if (blob) callback(blob); // Ensure blob is not null\n    //     });\n    // };\n\n    // useEffect(() => {\n    //     if (!imageRef.current) return;\n\n    //     const _cropper = new Cropper(imageRef.current, {\n    //         aspectRatio: 1,\n    //         viewMode: 1,\n    //         autoCropArea: 0.8,\n    //         dragMode: 'move',\n    //         cropBoxMovable: false,\n    //         cropBoxResizable: false,\n    //         zoomable: true,\n    //         center: true,\n    //         background: false,\n    //         modal: true,\n    //         minCropBoxHeight: 200,\n    //         minCropBoxWidth: 200,\n    //     });\n\n    //     setCropper(_cropper);\n    //     _cropper.replace(image);\n\n    //     // Cleanup on unmount\n    //     return () => {\n    //         _cropper.destroy();\n    //     };\n    // }, [image]); // Dependency array includes image\n\n    // return (\n    //     <div className=\"p-2 flex flex-col gap-5\">\n    //         <img\n    //             ref={imageRef}\n    //             id=\"cropperContainer\"\n    //             className=\"w-[250px] h-[200px] object-contain\"\n    //             src={image} // Set initial image source\n    //             alt=\"Cropper Image\"\n    //         />\n    //         <div className=\"flex flex-row gap-2 items-center w-full justify-between\">\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Zoom in\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.zoom(0.1)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/zoom-in.svg\" className=\"w-5 h-5\" />\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Zoom out\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.zoom(-0.1)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/zoom-out.svg\" className=\"w-5 h-5\" />\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Rotate left\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.rotate(-45)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/rotate.svg\" className=\"w-5 h-5\" />\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Rotate right\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.rotate(45)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/rotate.svg\" className=\"w-5 h-5 -scale-x-100\" />\n    //             </button>\n    //         </div>\n    //         <div className=\"flex justify-center gap-2 items-center\">\n    //             <button\n    //                 type=\"button\"\n    //                 className=\"flex gap-2 h-fit whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-1 px-3 rounded-lg\"\n    //                 onClick={cropImage}\n    //             >\n    //                 Save\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 className=\"flex gap-2 h-fit whitespace-nowrap bg-red-400 items-center border-red-600 border !text-white p-1 px-3 rounded-lg\"\n    //                 onClick={close}\n    //             >\n    //                 Cancel\n    //             </button>\n    //         </div>\n    //     </div>\n    // );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/dialog.tsx",
        "content": "import { ReactNode } from 'react';\nimport SvgIcon from './svg';\n\n//\nexport const DialogView = ({\n    open,\n    close,\n    children,\n    contentClass,\n    hideClose,\n}: {\n    children: ReactNode;\n    open: boolean;\n    close: () => void;\n    contentClass?: string;\n    hideClose?: boolean;\n}) => {\n    return (\n        <div\n            data-testid=\"DIALOG_BACKGROUND\"\n            className={`fixed top-0 left-1/2 -translate-x-1/2 no-scrollbar flex items-center justify-center overflow-hidden duration-500 bg-black bg-opacity-50 ${\n                open\n                    ? '!w-screen !h-screen opacity-100 z-40 backdrop-blur-sm'\n                    : '!w-0 !h-0 !opacity-0 -z-0'\n            }`}\n            onClick={close}\n        >\n            <div\n                className=\"no-scrollbar rounded-md max-h-[calc(100vh-50px)]\"\n                onClick={(e) => e.stopPropagation()}\n            >\n                <div\n                    className={`w-full max-sm:w-[90dvw] h-auto rounded-2xl relative bg-white dark:bg-black border ${contentClass}`}\n                >\n                    {!hideClose && (\n                        <button\n                            className=\"text-gray-400 bg-white dark:bg-black app-button border !rounded-full !p-0 text-sm !w-8 !h-8 flex justify-center items-center absolute -top-3 -right-3\"\n                            onContextMenu={() => {\n                                return false;\n                            }}\n                            onClick={close}\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/close.svg\"\n                                className=\"w-5 h-5\"\n                            ></SvgIcon>\n                        </button>\n                    )}\n                    <div className=\"overflow-hidden overflow-y-auto\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/form/checkBox.tsx",
        "content": "import { IFormField } from './form.types';\n\n//\nexport const CheckBox = ({\n    label,\n    name,\n    helperText,\n    value,\n    error,\n    disabled,\n    size,\n    required,\n    layoutClass,\n    options,\n    className,\n    customField,\n    onChange,\n}: Pick<\n    IFormField,\n    | 'label'\n    | 'helperText'\n    | 'value'\n    | 'error'\n    | 'disabled'\n    | 'size'\n    | 'required'\n    | 'layoutClass'\n    | 'options'\n    | 'className'\n    | 'customField'\n> &\n    Required<Pick<IFormField, 'name' | 'onChange'>>) => {\n    const handleInput = (option: string) => {\n        const _value = option;\n        onChange({\n            name,\n            value: _value === value ? undefined : _value,\n        });\n    };\n\n    return (\n        <div className={`w-full ${className}`}>\n            <label\n                htmlFor={name}\n                className=\"block mb-1 text-sm text-gray-600 dark:text-white\"\n            >\n                {label}\n                {label && required && (\n                    <span\n                        v-show=\"\"\n                        className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\"\n                    >\n                        *\n                    </span>\n                )}\n            </label>\n            <div className={`flex flex-wrap gap-3 mt-2 ${layoutClass}`}>\n                {options?.map((option, index) => (\n                    <div\n                        v-for=\"(option, index) in options\"\n                        key={option.id}\n                        className=\"flex flex-row items-center cursor-pointer w-fit\"\n                        onClick={() => handleInput(option.label)}\n                    >\n                        <input\n                            type=\"checkbox\"\n                            name={name}\n                            data-testid={name}\n                            checked={value?.includes(option.label)}\n                            className={`text-left mr-2 ${size}`}\n                            disabled={disabled}\n                        />\n                        <span\n                            className=\"text-sm\"\n                            dangerouslySetInnerHTML={{ __html: option.label }}\n                        />\n                        {customField && index === options.length - 1 && (\n                            <input\n                                v-if=\"\"\n                                type=\"text\"\n                                className=\"outline-none border-b-[1px] border-b-gray-600 w-full\"\n                                disabled={\n                                    disabled || !value?.includes(option.label)\n                                }\n                                onChange={(e) => {\n                                    if (value?.includes(option.label))\n                                        handleInput(\n                                            `${e.target.value} ${option.label}`\n                                        );\n                                }}\n                            />\n                        )}\n                    </div>\n                ))}\n            </div>\n            <p\n                data-testid={`${name}-error`}\n                className={`mt-1 text-xs italic min-h-4 ${error ? 'text-red-500' : 'text-gray-400'}`}\n            >\n                {error || helperText}\n            </p>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/form/form.types.ts",
        "content": "import { ReactNode, KeyboardEvent, ComponentType } from 'react';\n\nexport interface IFormField {\n    name?: string;\n    label?: string;\n    value?: ILargeRecord;\n    error?: string;\n    validations?: {\n        type: 'regex' | 'function';\n        message?: string;\n        validate:\n            | string\n            | ((\n                  values: ILargeRecord,\n                  name: string\n              ) => Promise<string> | string);\n    }[];\n    required?: boolean;\n    requiredLabel?: string;\n    type?:\n        | 'label'\n        | 'text'\n        | 'textarea'\n        | 'number'\n        | 'date'\n        | 'time'\n        | 'datetime-local'\n        | 'file'\n        | 'tag'\n        | 'password'\n        | 'autocomplete'\n        | 'select'\n        | 'otp'\n        | 'calendar'\n        | 'checkbox'\n        | 'chip'\n        | 'multiTextField'\n        | 'toggle'\n        | 'radio'\n        | 'custom';\n    placeHolder?: string;\n    helperText?: string;\n    rows?: number;\n    alignClass?: string;\n    className?: string;\n    layoutClass?: string;\n    imageSize?: string;\n    size?: string;\n    disabled?: boolean;\n    multiple?: boolean;\n    min?: string;\n    max?: string;\n    accept?: string;\n    format?: string;\n    options?: { id: string; label: string }[];\n    buttonText?: string;\n    buttonSize?: string;\n    ref?: string;\n    initialFieldCount?: number;\n    remove?: (index: number) => void;\n    customField?: boolean;\n    fileSize?: number;\n    cropper?: boolean;\n    length?: number;\n    noError?: boolean;\n    disableFilter?: boolean;\n    maxLength?: number;\n\n    //\n    startIcon?: ReactNode;\n    endIcon?: ReactNode;\n    element?: ComponentType<{ onFieldChange: (field: IFieldChange) => void }>;\n    icon?: ReactNode;\n    onChange?: (field: IFieldChange) => void;\n    onKeyPress?: (e: KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport type IFieldChange = {\n    name: string;\n    value: ILargeRecord;\n    ignoreValidation?: boolean;\n    ref?: string;\n    id?: boolean;\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/form/radioButton.tsx",
        "content": "import { IFormField } from './form.types';\n\n//\nexport const RadioButton = ({\n    label,\n    name,\n    helperText,\n    value = '',\n    error,\n    disabled,\n    size,\n    required,\n    layoutClass,\n    options,\n    className,\n    onChange,\n}: Pick<\n    IFormField,\n    | 'label'\n    | 'helperText'\n    | 'value'\n    | 'error'\n    | 'disabled'\n    | 'size'\n    | 'required'\n    | 'layoutClass'\n    | 'options'\n    | 'className'\n> &\n    Required<Pick<IFormField, 'name' | 'onChange'>>) => {\n    const handleInput = (option: string) => {\n        const _value = option;\n        onChange({\n            name,\n            value: _value === value ? undefined : _value,\n        });\n    };\n\n    return (\n        <div className={`w-full ${className}`}>\n            <label\n                htmlFor={name}\n                className=\"block mb-1 text-sm text-gray-600 dark:text-white\"\n            >\n                {label}\n                {label && required && (\n                    <span\n                        v-show=\"\"\n                        className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\"\n                    >\n                        *\n                    </span>\n                )}\n            </label>\n            <div className={`flex flex-wrap gap-3 mt-2 ${layoutClass}`}>\n                {options?.map((option) => (\n                    <div\n                        v-for=\"(option, index) in options\"\n                        key={option.id}\n                        className=\"flex flex-row items-center cursor-pointer w-fit\"\n                        onClick={() => handleInput(option.label)}\n                    >\n                        <input\n                            type=\"radio\"\n                            name={name}\n                            data-testid={name}\n                            checked={value?.includes(option.label)}\n                            className={`text-left mr-2 ${size}`}\n                            disabled={disabled}\n                        />\n                        <span\n                            className=\"text-sm\"\n                            dangerouslySetInnerHTML={{ __html: option.label }}\n                        />\n                    </div>\n                ))}\n            </div>\n            <p\n                data-testid={`${name}-error`}\n                className={`mt-1 text-xs italic min-h-4 ${error ? 'text-red-500' : 'text-gray-400'}`}\n            >\n                {error || helperText}\n            </p>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/loading.tsx",
        "content": "import { Logo } from './logo';\n\nexport const Loading = () => {\n    return (\n        <div className=\"fixed top-0 left-0 app-width h-screen flex items-center justify-center bg-white dark:bg-black\">\n            <Logo />\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/logo.tsx",
        "content": "import SvgIcon from './svg';\n\nexport const Logo = ({ className = 'w-16 h-16' }) => {\n    return <SvgIcon path=\"/icons/svg/logo.svg\" className={className} />;\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/maintenance.tsx",
        "content": "//\nexport default () => {\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center h-screen app-width\">\n            <img\n                src=\"/images/maintenance.png\"\n                className=\"w-full max-w-[300px]\"\n            />\n            <h1 data-testid=\"INIT\" className=\"text-3xl font-bold text-center\">\n                Scheduled Maintenance Notice\n            </h1>\n            <p className=\"text-xl font-bold text-center\">\n                We're performing essential maintenance to improve your\n                experience\n            </p>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/page.tsx",
        "content": "import { useNavigate } from 'react-router-dom';\n\n//\nexport const CommonPage = ({ content }: { content: string }) => {\n    const navigate = useNavigate();\n\n    const goToHome = () => {\n        navigate(import.meta.env.BASE_URL);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center h-screen app-width\">\n            <h1 data-testid=\"INIT\" className=\"text-3xl font-bold\">\n                {content}\n            </h1>\n            <button className=\"app-button app-shadow\" onClick={goToHome}>\n                Home\n            </button>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/svg.tsx",
        "content": "import { useEffect, useState } from 'react';\nimport { getSvgIcon } from 'virtual:svg-icons';\n\n//\nconst SvgIcon = ({ path, className }: { path: string; className: string }) => {\n    const [icon, setIcon] = useState('');\n\n    useEffect(() => {\n        setIcon(getSvgIcon(path.split('/').slice(-2).join('/')));\n    }, [path]);\n\n    return (\n        <svg\n            className={className}\n            dangerouslySetInnerHTML={{ __html: icon }}\n        ></svg>\n    );\n};\n\nexport default SvgIcon;\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/thumbnail.tsx",
        "content": "import { useState } from 'react';\nimport SvgIcon from './svg';\n\nexport const Thumbnail = ({\n    url,\n    className = 'w-16 h-16',\n}: {\n    url: string;\n    className?: string;\n}) => {\n    const [imageError, setImageError] = useState(false);\n\n    return imageError ? (\n        <SvgIcon path=\"/icons/svg/file.svg\" className={className} />\n    ) : (\n        <img\n            src={url}\n            className={className}\n            onError={() => {\n                setImageError(true);\n            }}\n        />\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/components/toast.tsx",
        "content": "import SvgIcon from './svg';\n\n//\nconst Toast = ({\n    type,\n    message,\n    close,\n}: {\n    type: 'info' | 'error' | 'warning' | 'success';\n    message: string;\n    close: () => void;\n}) => (\n    <div\n        data-testid=\"TOAST\"\n        className={`flex items-center max-w-[400px] w-full p-2 mb-4 rounded-lg shadow-2xl ${\n            type === 'success'\n                ? 'bg-green-100'\n                : type === 'error'\n                  ? 'bg-red-100'\n                  : type === 'warning'\n                    ? ' bg-orange-100'\n                    : ' bg-blue-100'\n        }`}\n        role=\"alert\"\n    >\n        {\n            {\n                info: (\n                    <div className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200\">\n                        <SvgIcon\n                            path=\"/icons/svg/info.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n                error: (\n                    <div className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200\">\n                        <SvgIcon\n                            path=\"/icons/svg/error.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n                warning: (\n                    <div\n                        v-if=\"toast.type === 'warning'\"\n                        className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-orange-500 bg-orange-100 rounded-lg dark:bg-orange-700 dark:text-orange-200\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/warning.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n                success: (\n                    <div\n                        v-if=\"toast.type === 'success'\"\n                        className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/check_circle.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n            }[type]\n        }\n        <div\n            className={`mx-3 text-sm font-normal ${\n                type === 'success'\n                    ? 'text-green-500'\n                    : type === 'error'\n                      ? 'text-red-500'\n                      : type === 'warning'\n                        ? ' text-orange-500'\n                        : ' text-blue-500'\n            }`}\n        >\n            {message}\n        </div>\n        <button\n            className=\"ms-auto -mx-1.5 -my-1.5 text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 f p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8\"\n            data-dismiss-target=\"#toast-success\"\n            aria-label=\"Close\"\n            onContextMenu={() => {\n                return false;\n            }}\n            onClick={close}\n        >\n            <SvgIcon path=\"/icons/svg/close.svg\" className=\"h-6 w-6\"></SvgIcon>\n        </button>\n    </div>\n);\n\nexport default Toast;\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/authentication/forgotPassword.tsx",
        "content": "import { useNavigate } from 'react-router-dom';\nimport { emailRegex } from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport { requestResetPassword } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\n\n//\nconst form = {\n    email: {\n        label: 'Email',\n        placeHolder: 'Enter your email',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your email',\n        validations: [\n            {\n                type: 'regex',\n                validate: emailRegex,\n                message: 'Invalid email',\n            },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const navigate = useNavigate();\n\n    const call = async (payload: ILargeRecord) => {\n        const res = await requestResetPassword(payload);\n        return !res.error;\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Forgot Password</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Request reset password link\"\n                    layoutClass=\"gap-1\"\n                />\n                <div className=\"w-full border-t border-gray-600\"></div>\n                <div\n                    onClick={() => navigate(routes.signIn)}\n                    className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                >\n                    Back to login\n                </div>\n            </div>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/authentication/resetPassword.tsx",
        "content": "import { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\n//\nimport { passwordRegex } from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport { changePassword } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\n\n//\nconst form = {\n    password: {\n        label: 'New Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n        validations: [\n            {\n                type: 'regex',\n                validate: passwordRegex,\n                message:\n                    'Password must contain at least one uppercase letter, one lower case, one number, one symbol(@$!%*?&#), and be at least 8 characters long',\n            },\n        ],\n    },\n    confirmPassword: {\n        label: 'Re-Enter New Password',\n        placeHolder: 'Re-enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter confirmation password',\n        validations: [\n            {\n                type: 'function',\n                validate: (values, name) => {\n                    return values.password === values[name]\n                        ? ''\n                        : 'Password does not match';\n                },\n            },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const [searchParams] = useSearchParams();\n    const navigate = useNavigate();\n\n    //\n    const call = async (payload: ILargeRecord) => {\n        const res = await changePassword(\n            payload,\n            searchParams.get('token') as string\n        );\n        if (!res.error) navigate(routes.signIn);\n        return !res.error;\n    };\n\n    //\n    useEffect(() => {\n        const token = searchParams.get('token') as string;\n        if (!token) navigate(routes.root);\n    }, [searchParams.get('token')]);\n\n    //\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Reset Password</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Change Password\"\n                    layoutClass=\"gap-1\"\n                />\n            </div>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/authentication/signIn.tsx",
        "content": "import { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { emailRegex } from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport { login } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport { UserContext } from 'src/providers/context';\n\n//\nconst form = {\n    email: {\n        label: 'Email',\n        placeHolder: 'Enter your email',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your email',\n        validations: [\n            {\n                type: 'regex',\n                validate: emailRegex,\n                message: 'Invalid email',\n            },\n        ],\n    },\n    password: {\n        label: 'Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const navigate = useNavigate();\n    const user = useContext(UserContext);\n\n    //\n    const call = async (payload: ILargeRecord) => {\n        const res = await login(payload);\n        if (!res.error) {\n            user.updateUser();\n            navigate(routes.root);\n        }\n        return !res.error;\n    };\n\n    return (\n        <div className=\"flex flex-col items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Sign In</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Sign In\"\n                    layoutClass=\"gap-1\"\n                />\n                <div className=\"w-full border-t border-gray-600\"></div>\n                <div className=\"flex flex-row justify-between\">\n                    <a\n                        onClick={() => navigate(routes.signUp)}\n                        className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                    >\n                        Create new account\n                    </a>\n                    <a\n                        onClick={() => navigate(routes.forgotPassword)}\n                        className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                    >\n                        Forgot password?\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/authentication/signUp.tsx",
        "content": "import { useNavigate } from 'react-router-dom';\nimport {\n    emailRegex,\n    fullNameRegex,\n    passwordRegex,\n} from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport {\n    register,\n    requestVerification,\n} from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\n\n//\nconst form = {\n    name: {\n        label: 'Name',\n        placeHolder: 'Enter your name',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your name',\n        validations: [\n            {\n                type: 'regex',\n                validate: fullNameRegex,\n                message: 'Invalid name',\n            },\n        ],\n    },\n    email: {\n        label: 'Email',\n        placeHolder: 'Enter your email',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your email',\n        validations: [\n            {\n                type: 'regex',\n                validate: emailRegex,\n                message: 'Invalid email',\n            },\n        ],\n    },\n    password: {\n        label: 'Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n        validations: [\n            {\n                type: 'regex',\n                validate: passwordRegex,\n                message:\n                    'Password must contain at least one uppercase letter, one lower case, one number, one symbol(@$!%*?&#), and be at least 8 characters long',\n            },\n        ],\n    },\n    confirmPassword: {\n        label: 'Confirm Password',\n        placeHolder: 'Re-enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter confirmation password',\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const navigate = useNavigate();\n\n    const call = async (payload: ILargeRecord) => {\n        const res = await register(payload);\n        if (!res.error) await requestVerification({ email: payload.email });\n        return !res.error;\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Sign Up</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Sign Up\"\n                    layoutClass=\"gap-1\"\n                />\n                <div className=\"w-full border-t border-gray-600\"></div>\n                <div\n                    onClick={() => navigate(routes.signIn)}\n                    className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                >\n                    Already have an account?\n                </div>\n            </div>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/authentication/verification.tsx",
        "content": "import { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { verifyEmailAccount } from 'services/repository/authentication';\nimport SvgIcon from 'src/app/components/svg';\n\n//\nexport default () => {\n    const [response, setResponse] = useState<{\n        error: boolean;\n        message: string;\n    }>();\n    const [searchParams] = useSearchParams();\n    const navigate = useNavigate();\n\n    //\n    useEffect(() => {\n        const token = searchParams.get('token') as string;\n        if (!token) {\n            navigate(routes.root);\n        } else\n            verifyEmailAccount(token).then((res) => {\n                setResponse(res);\n            });\n    }, [searchParams.get('token')]);\n\n    //\n    const goToHome = () => {\n        navigate(routes.root);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <h1\n                data-testid=\"MESSAGE\"\n                className={`text-3xl font-bold flex gap-2 items-center justify-center ${response?.error ? 'text-red-500' : 'text-green-500'}`}\n            >\n                <SvgIcon\n                    path=\"/icons/svg/error.svg\"\n                    className=\"h-8 w-8\"\n                ></SvgIcon>\n                {response?.message}\n            </h1>\n            <button className=\"app-button\" onClick={goToHome}>\n                Home\n            </button>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/components/changePassword.tsx",
        "content": "//\nimport { passwordRegex } from 'services/constants/regex';\nimport { updatePassword } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport SvgIcon from 'src/app/components/svg';\n\n//\nconst form = {\n    currentPassword: {\n        label: 'Current Password',\n        placeHolder: 'Enter your current password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your current password',\n    },\n    password: {\n        label: 'New Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n        validations: [\n            {\n                type: 'regex',\n                validate: passwordRegex,\n                message:\n                    'Password must contain at least one uppercase letter, one lower case, one number, one symbol(@$!%*?&#), and be at least 8 characters long',\n            },\n        ],\n    },\n    confirmPassword: {\n        label: 'Re-Enter New Password',\n        placeHolder: 'Re-enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter confirmation password',\n        validations: [\n            {\n                type: 'function',\n                validate: (values, name) => {\n                    return values.password === values[name]\n                        ? ''\n                        : 'Password does not match';\n                },\n            },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport const ChangePassword = () => {\n    const call = async (payload: ILargeRecord) => {\n        const res = await updatePassword(payload);\n        return !res.error;\n    };\n\n    return (\n        <>\n            <p\n                className=\"text-lg font-bold flex items-center gap-2 border-b pb-4\"\n                data-testid=\"CHANGE_PASSWORD_PAGE\"\n            >\n                <SvgIcon path=\"/icons/svg/lock.svg\" className=\"w-5 h-5\" />{' '}\n                Change Password\n            </p>\n            <p className=\"text-md text-gray-400\">Update your password</p>\n            <FormBuilder\n                form={form}\n                call={call}\n                buttonText=\"Update\"\n                layoutClass={`gap-1 sm:gap-2 max-w-screen-sm mt-6`}\n                buttonClass={`app-button app-shadow !text-[16px] !px-6`}\n            />\n        </>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/components/profile.tsx",
        "content": "import { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { UserContext } from 'src/providers/context';\nimport { Avatar } from 'src/app/components/avatar';\nimport { logout } from 'services/repository/authentication';\n\n//\nexport const Profile = () => {\n    const user = useContext(UserContext);\n    const [open, setOpen] = useState(false);\n    const navigate = useNavigate();\n    const menuRef = useRef<HTMLDivElement>(null);\n\n    const handleOpen = () => setOpen((prev) => !prev);\n\n    const _logout = async () => {\n        await logout();\n        user?.updateUser?.();\n    };\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (\n                open &&\n                menuRef.current &&\n                event.target &&\n                !menuRef.current?.contains(event.target as Node)\n            )\n                setOpen(false);\n        };\n\n        if (open) document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [open]);\n\n    return (\n        <div className=\"relative cursor-pointer\">\n            <Avatar name={user!.name!} onClick={handleOpen} />\n            {open && (\n                <div\n                    ref={menuRef}\n                    className=\"app-menu app-shadow border-transparent mt-2 w-44\"\n                    role=\"menu\"\n                >\n                    <div\n                        className=\"app-menu-item\"\n                        role=\"menuitem\"\n                        data-testid=\"profile\"\n                        onClick={() => {\n                            handleOpen();\n                            navigate(routes.settings, {\n                                state: {\n                                    menu: 'profile_tab',\n                                },\n                            });\n                        }}\n                    >\n                        Profile\n                    </div>\n                    <div\n                        className=\"app-menu-item\"\n                        role=\"menuitem\"\n                        data-testid=\"change-password\"\n                        onClick={() => {\n                            handleOpen();\n                            navigate(routes.settings, {\n                                state: {\n                                    menu: 'change_password_tab',\n                                },\n                            });\n                        }}\n                    >\n                        Change password\n                    </div>\n                    <div\n                        className=\"app-menu-item\"\n                        role=\"menuitem\"\n                        data-testid=\"settings\"\n                        onClick={() => {\n                            handleOpen();\n                            navigate(routes.settings, {\n                                state: {\n                                    menu: 'setting_tab',\n                                },\n                            });\n                        }}\n                    >\n                        Settings\n                    </div>\n                    <div\n                        className=\"app-menu-item !text-red-500\"\n                        role=\"menuitem\"\n                        data-testid=\"logout\"\n                        onClick={() => {\n                            handleOpen();\n                            _logout();\n                        }}\n                    >\n                        Logout\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/components/setting.tsx",
        "content": "//\nimport SvgIcon from 'src/app/components/svg';\n\n//\nexport const Setting = () => {\n    return (\n        <>\n            <p\n                className=\"text-lg font-bold flex items-center gap-2 border-b pb-4\"\n                data-testid=\"APP_SETTING_PAGE\"\n            >\n                <SvgIcon path=\"/icons/svg/setting.svg\" className=\"w-5 h-5\" />{' '}\n                Settings\n            </p>\n            <p className=\"text-lg font-bold text-center py-10\">App Settings</p>\n        </>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/components/userInfo.tsx",
        "content": "import { useContext, useMemo } from 'react';\n\n//\nimport { fullNameRegex } from 'services/constants/regex';\nimport { updateUser } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport SvgIcon from 'src/app/components/svg';\nimport { UserContext } from 'src/providers/context';\n\n//\nexport const UserInfo = () => {\n    const user = useContext(UserContext);\n\n    const form = useMemo(\n        () =>\n            ({\n                name: {\n                    label: 'Name',\n                    placeHolder: 'Enter your name',\n                    type: 'text',\n                    required: true,\n                    value: user?.name || '',\n                    requiredLabel: 'Please enter your name',\n                    validations: [\n                        {\n                            type: 'regex',\n                            validate: fullNameRegex,\n                            message: 'Invalid name',\n                        },\n                    ],\n                },\n                email: {\n                    label: 'Email',\n                    placeHolder: 'Enter your email',\n                    type: 'text',\n                    required: true,\n                    value: user?.email || '',\n                    requiredLabel: 'Please enter your email',\n                    disabled: true,\n                },\n            }) as Record<string, IFormField>,\n        [JSON.stringify(user)]\n    );\n\n    const call = async (_payload: ILargeRecord) => {\n        const res = await updateUser({\n            name: _payload.name,\n            profileURL: _payload.profileURL,\n        });\n        if (!res.error) user?.updateUser?.();\n        return !res.error;\n    };\n\n    return (\n        <>\n            <p\n                className=\"text-lg font-bold flex items-center gap-2 border-b pb-4\"\n                data-testid=\"USERINFO_PAGE\"\n            >\n                <SvgIcon path=\"/icons/svg/user.svg\" className=\"w-5 h-5\" />{' '}\n                Profile\n            </p>\n            <p className=\"text-md text-gray-400\">\n                Update your personal information and profile settings.\n            </p>\n            <FormBuilder\n                form={form}\n                call={call}\n                buttonText=\"Update\"\n                layoutClass={`gap-1 sm:gap-2 max-w-screen-sm mt-6`}\n                buttonClass={`app-button app-shadow !text-[16px] !px-6`}\n            />\n        </>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/demos/codeBlock.tsx",
        "content": "// ./demos/codeBlock.tsx\nimport { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nexport const CodeBlock = ({ code }: { code: string }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [isCopied, setIsCopied] = useState(false);\n\n    // Truncate code to first 5 lines for collapsed view\n    const truncatedCode = code.split('\\n').slice(0, 5).join('\\n');\n    const displayCode = isExpanded ? code : truncatedCode;\n\n    const handleCopy = () => {\n        navigator.clipboard.writeText(code).then(() => {\n            setIsCopied(true);\n            setTimeout(() => setIsCopied(false), 2000); // Reset after 2 seconds\n        });\n    };\n\n    const handleToggle = () => {\n        setIsExpanded(!isExpanded);\n    };\n\n    return (\n        <div className=\"w-full rounded-xl p-3 bg-neutral-800 max-w-screen-md mx-auto no-scrollbar relative\">\n            <button\n                onClick={handleCopy}\n                className=\"absolute top-3 right-3 px-2 py-1 text-sm text-white bg-neutral-700 hover:bg-neutral-600 rounded-md transition\"\n                title={isCopied ? 'Copied!' : 'Copy to clipboard'}\n            >\n                {isCopied ? 'Copied!' : 'Copy'}\n            </button>\n\n            <SyntaxHighlighter\n                language=\"tsx\"\n                style={darcula}\n                customStyle={{\n                    margin: 0,\n                    padding: '1rem',\n                    background: 'transparent',\n                    maxHeight: isExpanded ? 'none' : '200px',\n                    overflowY: 'hidden',\n                }}\n            >\n                {displayCode}\n            </SyntaxHighlighter>\n\n            {code.split('\\n').length > 5 && (\n                <button\n                    onClick={handleToggle}\n                    className=\"mt-2 text-sm text-neutral-300 hover:text-white underline\"\n                >\n                    {isExpanded ? 'Collapse' : 'Expand'}\n                </button>\n            )}\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/demos/filterTableDemo.tsx",
        "content": "import { useState } from 'react';\n\n//\nimport { tableData } from 'services/constants/demo';\nimport { Table, ITable } from 'src/app/components/table';\nimport { Filter } from 'src/app/components/filter';\nimport { IFormField } from 'src/app/components/form/form.types';\n\n//\nconst columns: ITable['columns'] = [\n    {\n        field: '',\n        header: 'S.No.',\n        cell: (params) => params.row.index,\n    },\n    {\n        field: 'name',\n        header: 'Full Name',\n    },\n    {\n        field: 'email',\n        header: 'Email',\n    },\n    {\n        field: 'role',\n        header: 'Role',\n    },\n    {\n        field: 'status',\n        header: 'Status',\n        cell: (params) => (\n            <span\n                className={`px-2 py-1 text-white text-sm rounded app-shadow ${\n                    params.row.status === 'Active'\n                        ? 'bg-green-500'\n                        : 'bg-red-500'\n                }`}\n            >\n                {params.row.status}\n            </span>\n        ),\n    },\n    {\n        field: '',\n        header: 'Actions',\n        cell: () => (\n            <div className=\"flex gap-2\">\n                <button className=\"app-button app-shadow\">Edit</button>\n                <button className=\"app-button app-shadow\">Delete</button>\n            </div>\n        ),\n    },\n];\n\nconst filterForm = {\n    text: {\n        label: 'Search Name',\n        type: 'text',\n        placeHolder: 'Enter name',\n        required: false,\n    },\n    select: {\n        label: 'Role',\n        type: 'select',\n        placeHolder: 'Select role',\n        required: false,\n        options: [\n            { id: '', label: 'All' },\n            { id: 'Admin', label: 'Admin' },\n            { id: 'User', label: 'User' },\n            { id: 'Moderator', label: 'Moderator' },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport const FilterTableDemo = () => {\n    const [filteredData, setFilteredData] = useState(tableData);\n\n    const mockApiCall = async (filterString?: string) => {\n        let updatedData = tableData;\n        const params = new URLSearchParams(filterString);\n\n        const nameFilter = params.get('text')?.toLowerCase();\n        const roleFilter = params.get('select');\n\n        if (nameFilter) {\n            updatedData = updatedData.filter((item) =>\n                item.name.toLowerCase().includes(nameFilter)\n            );\n        }\n\n        if (roleFilter) {\n            updatedData = updatedData.filter(\n                (item) => item.role === roleFilter\n            );\n        }\n\n        return Promise.resolve(updatedData);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-6\">\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Filters\n            </h2>\n            <Filter\n                form={filterForm}\n                call={mockApiCall}\n                setData={setFilteredData}\n            />\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Filtered Table\n            </h2>\n            <Table columns={columns} data={filteredData} />\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/demos/tableDemo.tsx",
        "content": "import { tableData } from 'services/constants/demo';\nimport { ITable, Table } from 'src/app/components/table';\n\n//\nconst columns: ITable['columns'] = [\n    {\n        field: '',\n        header: 'S.No.',\n        cell: (params) => params.row.index,\n    },\n    {\n        field: 'name',\n        header: 'Full Name',\n    },\n    {\n        field: 'email',\n        header: 'Email',\n    },\n    {\n        field: 'role',\n        header: 'Role',\n    },\n    {\n        field: 'status',\n        header: 'Status',\n        cell: (params) => (\n            <span\n                className={`px-2 py-1 text-white text-sm rounded app-shadow ${\n                    params.row.status === 'Active'\n                        ? 'bg-green-500'\n                        : 'bg-red-500'\n                }`}\n            >\n                {params.row.status}\n            </span>\n        ),\n    },\n    {\n        field: 'actions',\n        header: 'Actions',\n        cell: () => (\n            <div className=\"flex gap-2\">\n                <button className=\"app-button app-shadow\">Edit</button>\n                <button className=\"app-button app-shadow\">Delete</button>\n            </div>\n        ),\n    },\n];\n\nexport const TableDemo = () => {\n    return (\n        <div className=\"flex flex-col gap-6\">\n            <Table columns={columns} data={tableData} />\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Without Data\n            </h2>\n            <Table columns={columns} data={[]} />\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/layout.tsx",
        "content": "import { useContext, useEffect } from 'react';\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { generateKey } from 'services/repository/utils';\nimport { UserContext } from 'src/providers/context';\nimport { Logo } from '../components/logo';\nimport { Profile } from './components/profile';\nimport { Cookies } from '../components/cookies';\n\n//\nexport default () => {\n    const user = useContext(UserContext);\n    const navigate = useNavigate();\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return (\n        <div className=\"h-screen w-full flex flex-col gap-3\">\n            <div className=\"flex gap-2 px-5 py-4 w-full justify-between items-center\">\n                <button\n                    className=\"text-xl font-bold flex gap-1 items-center\"\n                    onClick={() => navigate(routes.root)}\n                >\n                    <Logo className=\"w-8 h-8\" /> {import.meta.env.VITE_APP_NAME}\n                </button>\n                {user?.signedIn ? (\n                    <div className=\"flex gap-2 items-center\">\n                        <button\n                            className=\"app-button border-transparent app-shadow\"\n                            onClick={() => navigate(routes.app)}\n                        >\n                            App\n                        </button>\n                        <Profile />\n                    </div>\n                ) : (\n                    <div className=\"flex gap-2\">\n                        <button\n                            className=\"app-button\"\n                            onClick={() => navigate(routes.signIn)}\n                        >\n                            Sign In\n                        </button>\n                        <button\n                            className=\"app-button app-shadow\"\n                            onClick={() => navigate(routes.signUp)}\n                        >\n                            Sign Up\n                        </button>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex flex-col gap-3 px-3 min-w-full app-width\">\n                <Outlet />\n            </div>\n            <div className=\"min-h-24 flex-1 w-full\" />\n            <div className=\"py-10 border-t border-black/10 dark:border-white/10 px-5\">\n                <div className=\"flex flex-col sm:flex-row gap-5 justify-between max-w-screen-xl mx-auto\">\n                    <div className=\"flex flex-col gap-5\">\n                        <p className=\"text-xl font-bold flex gap-1 items-center\">\n                            <Logo className=\"w-8 h-8\" />\n                            {import.meta.env.VITE_APP_NAME}\n                        </p>\n                        <p className=\"text-black/50 dark:text-white/50\">\n                            © {new Date().getFullYear()}{' '}\n                            {import.meta.env.VITE_APP_NAME}. All rights\n                            reserved.\n                        </p>\n                    </div>\n                    <div className=\"flex gap-5\">\n                        {[\n                            {\n                                title: 'Privacy policy',\n                                link: routes.privacyPolicy,\n                            },\n                            {\n                                title: 'Terms and condition',\n                                link: routes.termsAndConditions,\n                            },\n                        ].map((content) => (\n                            <button\n                                key={generateKey()}\n                                className=\"text-black/50 dark:text-white/50\"\n                                onClick={() => navigate(content.link)}\n                            >\n                                {content.title}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Cookies />\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/privacyPolicy.tsx",
        "content": "export default () => {\n    return (\n        <div className=\"max-w-3xl mx-auto p-6 mt-10 w-full\">\n            <h1 className=\"text-3xl font-bold mb-4\">Privacy Policy</h1>\n            <p className=\"mb-4\">\n                Your privacy is important to us. This policy explains how we\n                handle your data.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">1. Data Collection</h2>\n            <p className=\"mb-4\">\n                We collect transaction details and user account information to\n                improve our services.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">2. Data Usage</h2>\n            <p className=\"mb-4\">\n                Your data is used solely for the purpose of expense tracking and\n                analytics within the app.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">3. Data Sharing</h2>\n            <p className=\"mb-4\">\n                We do not sell or share your personal data with third parties,\n                except as required by law.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">4. Security</h2>\n            <p className=\"mb-4\">\n                We implement security measures to protect your data, but we\n                cannot guarantee absolute security.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">5. Changes to Policy</h2>\n            <p className=\"mb-4\">\n                We may update this Privacy Policy. Continued use of the app\n                indicates acceptance of the new policy.\n            </p>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/settings.tsx",
        "content": "import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n//\nimport SvgIcon from 'src/app/components/svg';\nimport { UserInfo } from './components/userInfo';\nimport { ChangePassword } from './components/changePassword';\nimport { Setting } from './components/setting';\n\n//\nconst navigation = [\n    { label: 'Profile', key: 'profile_tab', icon: '/icons/svg/user.svg' },\n    {\n        label: 'Change password',\n        key: 'change_password_tab',\n        icon: '/icons/svg/lock.svg',\n    },\n    { label: 'Settings', key: 'setting_tab', icon: '/icons/svg/setting.svg' },\n];\n\nexport default () => {\n    const [tab, setTab] = useState('profile_tab');\n    const { state } = useLocation();\n\n    useEffect(() => {\n        if (state?.menu) setTab(state.menu);\n    }, [state?.menu]);\n\n    return (\n        <>\n            <div\n                className=\"max-w-screen-lg w-full self-center m-auto app-height\"\n                data-testid=\"PROFILE_PAGE\"\n            >\n                <p className=\"text-2xl font-bold\">Settings</p>\n                <p className=\"text-gray-500 my-2  mb-5\">\n                    Manage your account settings and preferences.\n                </p>\n                <div className=\"flex max-sm:flex-col gap-2 w-full mx-auto\">\n                    <div className=\"flex sm:flex-col gap-3 sticky top-24 w-fit max-sm:self-center sm:min-w-[270px] sm:h-[80dvh] overflow-hidden light:bg-white border app-container app-inner-shadow !p-0 sm:!pt-5\">\n                        {navigation.map((_tab) => (\n                            <div\n                                key={_tab.label}\n                                data-testid={_tab.key}\n                                className={`cursor-pointer text-lg capitalize max-sm:!p-3 max-sm:!px-6 flex items-center gap-2 app-button !justify-start !rounded-none !w-full`}\n                                onClick={() => {\n                                    setTab(_tab.key);\n                                }}\n                            >\n                                <SvgIcon path={_tab.icon} className=\"w-4 h-4\" />\n                                {_tab.key === tab && (\n                                    <span className=\"h-1 sm:w-1 max-sm:rounded-t-lg sm:rounded-r-lg bg-current w-6 sm:h-8 absolute max-sm:-mb-9 -ml-1 sm:-ml-4\"></span>\n                                )}\n                                <p className=\"max-sm:hidden text-[16px]\">\n                                    {_tab.label}\n                                </p>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"flex flex-col gap-4 px-2 py-8 sm:p-8 w-full light:bg-white rounded-lg border app-container app-shadow\">\n                        {\n                            {\n                                profile_tab: <UserInfo />,\n                                change_password_tab: <ChangePassword />,\n                                setting_tab: <Setting />,\n                            }[tab.toLowerCase()]\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/pages/termsAndCondition.tsx",
        "content": "export default () => {\n    return (\n        <div className=\"max-w-3xl mx-auto p-6 mt-10 w-full\">\n            <h1 className=\"text-3xl font-bold mb-4\">Terms & Conditions</h1>\n            <p className=\"mb-4\">\n                By using this application, you agree to the following terms.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">1. Usage Policy</h2>\n            <p className=\"mb-4\">\n                You must be at least 13 years old to use this app. Misuse of the\n                app is strictly prohibited.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">\n                2. User Responsibility\n            </h2>\n            <p className=\"mb-4\">\n                You are responsible for any activity conducted through your\n                account.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">3. Liability</h2>\n            <p className=\"mb-4\">\n                We are not liable for any loss of data or damages arising from\n                the use of this app.\n            </p>\n        </div>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/app/router.tsx",
        "content": "import { lazy, ReactNode, useContext } from 'react';\nimport { Navigate, useRoutes } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { UserContext } from 'src/providers/context';\nimport { CommonPage } from 'src/app/components/page';\nimport { Loading } from 'src/app/components/loading';\n\n//\nconst Private = ({\n    protect,\n    children,\n}: {\n    children: ReactNode;\n    protect?: boolean;\n}) => {\n    const user = useContext(UserContext);\n\n    if (user?.loading) return <Loading />;\n\n    if (\n        (Boolean(user?.signedIn) && protect) ||\n        (Boolean(!user?.signedIn) && !protect)\n    ) {\n        return <>{children}</>;\n    }\n\n    return <Navigate to={import.meta.env.BASE_URL} />;\n};\n\n//\nconst Layout = lazy(() => import('src/app/pages/layout'));\nconst MainPage = lazy(() => import('src/app/pages/main'));\nconst SignInPage = lazy(() => import('src/app/pages/authentication/signIn'));\nconst SignUpPage = lazy(() => import('src/app/pages/authentication/signUp'));\nconst ForgotPasswordPage = lazy(\n    () => import('src/app/pages/authentication/forgotPassword')\n);\nconst ResetPasswordPage = lazy(\n    () => import('src/app/pages/authentication/resetPassword')\n);\nconst VerificationPage = lazy(\n    () => import('src/app/pages/authentication/verification')\n);\nconst AppPage = lazy(() => import('src/app/pages/app'));\nconst SettingsPage = lazy(() => import('src/app/pages/settings'));\nconst PrivacyPolicy = lazy(() => import('src/app/pages/privacyPolicy'));\nconst TermsAndConditions = lazy(\n    () => import('src/app/pages/termsAndCondition')\n);\nconst Maintenance = lazy(() => import('src/app/components/maintenance'));\n\nconst Router = () =>\n    useRoutes([\n        {\n            path: routes.root,\n            element: <Layout />,\n            children: [\n                {\n                    path: routes.root,\n                    element: <MainPage />,\n                },\n                {\n                    path: routes.signIn,\n                    element: (\n                        <Private>\n                            <SignInPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.signUp,\n                    element: (\n                        <Private>\n                            <SignUpPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.forgotPassword,\n                    element: (\n                        <Private>\n                            <ForgotPasswordPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.resetPassword,\n                    element: (\n                        <Private>\n                            <ResetPasswordPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.verify,\n                    element: (\n                        <Private>\n                            <VerificationPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.app,\n                    element: <AppPage />,\n                },\n                {\n                    path: routes.settings,\n                    element: (\n                        <Private protect>\n                            <SettingsPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.privacyPolicy,\n                    element: <PrivacyPolicy />,\n                },\n                {\n                    path: routes.termsAndConditions,\n                    element: <TermsAndConditions />,\n                },\n                {\n                    path: routes.maintenance,\n                    element: <Maintenance />,\n                },\n                {\n                    path: '*',\n                    element: <CommonPage content=\"404 Page Not Found\" />,\n                },\n            ],\n        },\n    ]);\n\nexport default Router;\n"
    },
    {
        "filePath": "packages/frontend-react/src/main.tsx",
        "content": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport 'src/app/assets/index.css';\nimport App from 'src/app/App';\n\n//\ncreateRoot(document.getElementById('root')!).render(\n    <StrictMode>\n        <App />\n    </StrictMode>\n);\n"
    },
    {
        "filePath": "packages/frontend-react/src/providers/context.tsx",
        "content": "import { createContext } from 'react';\n\n//\nexport const UserContext = createContext<\n    (ILargeRecord & { updateUser: () => void; loading: boolean }) | undefined\n>(undefined);\n"
    },
    {
        "filePath": "packages/frontend-react/src/providers/errorBoundary.tsx",
        "content": "import { ReactNode } from 'react';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\n\nexport const ErrorBoundaryProvider = (props: { children: ReactNode }) => (\n    <ErrorBoundary FallbackComponent={ErrorHandler} {...props} />\n);\n\nconst ErrorHandler = ({ error, resetErrorBoundary }: FallbackProps) => (\n    <div className=\"flex items-center justify-center h-screen app-width\">\n        <div className=\"flex flex-col items-center gap-3\">\n            <p className=\"text-2xl font-bold\">{error.name}</p>\n            <p className=\"text-lg\">{error.message}</p>\n            <button className=\"app-button\" onClick={resetErrorBoundary}>\n                Try again\n            </button>\n        </div>\n    </div>\n);\n"
    },
    {
        "filePath": "packages/frontend-react/src/providers/toast.tsx",
        "content": "import { ReactNode, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\n\n//\nimport Toast from 'src/app/components/toast';\n\n//\nexport const ToastProvider = ({ children }: { children: ReactNode }) => {\n    useEffect(() => {\n        window.showToast = showToast;\n    }, []);\n\n    return (\n        <div>\n            <div\n                id=\"handle-toast\"\n                className=\"fixed top-2 right-2 z-50 flex flex-col gap-2\"\n            />\n            {children}\n        </div>\n    );\n};\n\nexport const showToast = (props: IToast) => {\n    const handelClose = () =>\n        createRoot(document.getElementById('handle-toast')!).render(<></>);\n    createRoot(document.getElementById('handle-toast')!).render(\n        <Toast {...props} close={handelClose} />\n    );\n    setTimeout(() => {\n        handelClose();\n    }, 5000);\n};\n\nexport interface IToast {\n    message: string;\n    type: 'info' | 'error' | 'warning' | 'success';\n}\n"
    },
    {
        "filePath": "packages/frontend-react/src/providers/userContext.tsx",
        "content": "import { ReactNode, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { getUserDetail } from 'services/repository/authentication';\nimport { UserContext } from './context';\n\n//\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n    const [loading, setLoading] = useState(true);\n    const [user, setUser] = useState<ILargeRecord | undefined>();\n    const [update, setUpdate] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        getUserDetail().then((data) => {\n            setUser({ ...data, signedIn: !!data.userId });\n            window.signedIn = !!data.userId;\n            setLoading(false);\n        });\n    }, [update]);\n\n    useEffect(() => {\n        window.logout = () => {\n            setUser({ signedIn: false });\n            window.signedIn = false;\n            navigate(routes.root);\n        };\n    }, []);\n\n    const updateUser = () => {\n        setUpdate((prev) => !prev);\n    };\n\n    return (\n        <UserContext.Provider value={{ ...user, loading, updateUser }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n"
    },
    {
        "filePath": "packages/frontend-react/src/sw.ts",
        "content": "const CACHE_NAME = `${import.meta.env.VITE_APP_NAME}`\n    .replaceAll(\"\\\\'\", '')\n    .replaceAll(' ', '_');\n\nself.addEventListener('install', (event) => {\n    console.info('Service Worker installing');\n    event.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (event) => {\n    console.info('Service Worker activating');\n    event.waitUntil(\n        caches.keys().then(function (cacheNames) {\n            return Promise.all(\n                cacheNames.map(function (cacheName) {\n                    if (cacheName !== CACHE_NAME) {\n                        return caches.delete(cacheName);\n                    }\n                })\n            );\n        })\n    );\n    event.waitUntil(self.clients.claim());\n});\n\nself.addEventListener('fetch', (event) => {\n    if (\n        // !event.request.url.match(new RegExp(import.meta.env.VITE_CDN_DOMAIN)) &&\n        event.request.url.match(/\\.(jpe?g|png|gif|webp|svg|otf|json|svg|mp4)$/i)\n    ) {\n        event.respondWith(handleOtherRequests(event.request));\n    } else {\n        return;\n    }\n});\n\nasync function handleOtherRequests(request: Request) {\n    const cache = await caches.open(CACHE_NAME);\n\n    const cachedResponse = await cache.match(request);\n    if (cachedResponse) {\n        if (import.meta.env.MODE !== 'production')\n            console.info('[CHECK]: Serving_From_Cache', request.url);\n        return cachedResponse;\n    }\n\n    if (import.meta.env.MODE !== 'production')\n        console.info('[CHECK]: Cache_Miss! Fetching_From_Network', request.url);\n    const networkResponse = await fetch(request);\n\n    if (networkResponse.status === 200)\n        cache.put(request, networkResponse.clone());\n\n    return networkResponse;\n}\n"
    },
    {
        "filePath": "packages/frontend-react/src/vite-env.d.ts",
        "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv extends Readonly<Record<string, string>> {\n    readonly VITE_APP_NAME: string;\n    readonly VITE_ENCRYPTION: string;\n    readonly VITE_SOCKET_ENCRYPTION: string;\n    readonly VITE_IP: string;\n    readonly VITE_API_PORT: string;\n    readonly VITE_SOCKET_PORT: string;\n    readonly VITE_CDN_DOMAIN: string;\n}\n\ninterface ImportMeta {\n    readonly env: ImportMetaEnv;\n}\n\n//\ndeclare module 'virtual:svg-icons';\n\ndeclare type ILargeRecord = any;\ndeclare type ITimer = any;\n\n//\ninterface Window {\n    skipWaiting: () => void;\n    clients: {\n        claim: () => void;\n        matchAll: (arg0: { type: string }) => Promise<any>;\n        openWindow: (arg0: string) => any;\n    };\n    encryptionKey: string;\n    signedIn: boolean;\n    logout: () => void;\n    showToast: (toast: {\n        type: 'info' | 'error' | 'warning' | 'success';\n        message: string;\n    }) => void;\n}\n\ninterface Event {\n    target: EventTarget;\n    waitUntil: (args: any) => void;\n    respondWith: (args: any) => void;\n    request: any;\n}\n"
    },
    {
        "filePath": "packages/services/constants/demo.ts",
        "content": "export const tableData = [\n    {\n        name: 'Alice Johnson',\n        email: 'alice@example.com',\n        role: 'Admin',\n        status: 'Active',\n    },\n    {\n        name: 'Bob Smith',\n        email: 'bob@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Charlie Brown',\n        email: 'charlie@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'David Williams',\n        email: 'david@example.com',\n        role: 'User',\n        status: 'Active',\n    },\n    {\n        name: 'Emma Davis',\n        email: 'emma@example.com',\n        role: 'Admin',\n        status: 'Inactive',\n    },\n    {\n        name: 'Frank Miller',\n        email: 'frank@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Grace Lee',\n        email: 'grace@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Henry Wilson',\n        email: 'henry@example.com',\n        role: 'Admin',\n        status: 'Active',\n    },\n    {\n        name: 'Isla Martinez',\n        email: 'isla@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Jack Taylor',\n        email: 'jack@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Kate Brown',\n        email: 'kate@example.com',\n        role: 'User',\n        status: 'Active',\n    },\n    {\n        name: 'Leo Thomas',\n        email: 'leo@example.com',\n        role: 'Admin',\n        status: 'Inactive',\n    },\n    {\n        name: 'Mia Scott',\n        email: 'mia@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Noah Allen',\n        email: 'noah@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Olivia Harris',\n        email: 'olivia@example.com',\n        role: 'Admin',\n        status: 'Active',\n    },\n    {\n        name: 'Paul Young',\n        email: 'paul@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Quinn Adams',\n        email: 'quinn@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Rachel White',\n        email: 'rachel@example.com',\n        role: 'Admin',\n        status: 'Inactive',\n    },\n    {\n        name: 'Samuel King',\n        email: 'samuel@example.com',\n        role: 'User',\n        status: 'Active',\n    },\n    {\n        name: 'Tina Brooks',\n        email: 'tina@example.com',\n        role: 'Moderator',\n        status: 'Inactive',\n    },\n];\n"
    },
    {
        "filePath": "packages/services/constants/index.ts",
        "content": "export const baseURL = `${import.meta.env.VITE_ENCRYPTION}://${import.meta.env.VITE_IP}:${import.meta.env.VITE_API_PORT}`;\n\nexport const getTagValues = (v: string) => {\n    return [\n        ...new Set(\n            `${v || ''}`\n                .split(/( |;|,)/g)\n                .filter((t) => !!t.replaceAll(/(\\s|;|,)/g, '').trim())\n        ),\n    ];\n};\n"
    },
    {
        "filePath": "packages/services/constants/regex.ts",
        "content": "export const emailRegex = '^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$';\nexport const passwordRegex =\n    '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&#])[A-Za-z\\\\d@$!%*?&#]{8,}$';\nexport const fullNameRegex = '^(?=.{2,30}$)[a-zA-Z]+(?:[\\\\s-][a-zA-Z]+)*$';\nexport const phoneNumberRegex =\n    '^\\\\+?[1-9]\\\\d{0,2}[-.\\\\s]?\\\\(?\\\\d{1,4}\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}$';\nexport const phoneNumberRegexWithCountryCode =\n    '^\\\\+[1-9]\\\\d{0,2}[-.\\\\s]?\\\\(?\\\\d{1,4}\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}$';\n"
    },
    {
        "filePath": "packages/services/constants/routes.ts",
        "content": "const baseURL = import.meta.env.BASE_URL;\n\nexport const routes = {\n    root: baseURL,\n    signIn: `${baseURL}sign-in`,\n    signUp: `${baseURL}sign-up`,\n    forgotPassword: `${baseURL}forgot-password`,\n    resetPassword: `${baseURL}reset-password`,\n    verify: `${baseURL}verify`,\n    app: `${baseURL}app`,\n    settings: `${baseURL}settings`,\n    privacyPolicy: `${baseURL}privacy-policy`,\n    termsAndConditions: `${baseURL}terms-and-condition`,\n    maintenance: `${baseURL}maintenance`,\n    404: `${baseURL}404`,\n};\n\nexport const links = {\n    github: 'https://github.com/SivaPrakasam7',\n    linkedIn: 'https://linkedin.com/in/siva-prakasam',\n    mail: 'mailto:prakasams22@gmail.com',\n    contact: 'https://wa.me/+916382657699',\n};\n"
    },
    {
        "filePath": "packages/services/libraries/api.ts",
        "content": "import * as Axios from 'axios';\nimport { baseURL } from '../constants';\nimport { encrypt } from '../repository/utils';\n\nconst client = Axios.default.create({\n    baseURL,\n    withCredentials: true,\n});\n\nexport const updatePublicKey = async () => {\n    await Request({\n        method: 'get',\n        url: `v1/security/keyPair`,\n    }).then((data) => {\n        if (data.publicKey) {\n            localStorage.setItem('publicKey', data.publicKey);\n            localStorage.setItem('privateKey', data.privateKey);\n        }\n        return data;\n    });\n};\n\nexport const Request = async (\n    options: Axios.AxiosRequestConfig,\n    data?: object,\n    headers?: Axios.RawAxiosRequestHeaders\n): Promise<ILargeRecord & { error: boolean }> => {\n    let reTriggered = false;\n    const _call = async () => {\n        const encryptedData =\n            headers?.['Content-Type'] === 'multipart/form-data'\n                ? data\n                : await encrypt(data);\n\n        const response = await client({\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                ...headers,\n            },\n            data: encryptedData,\n        })\n            .then((res) => res.data)\n            .catch((e) => {\n                if (e.code === 'ERR_NETWORK') {\n                    return { error: true, message: 'No internet connection' };\n                }\n\n                if (e.response?.status === 429) {\n                    window.showToast({\n                        type: 'error',\n                        message: e.response?.data,\n                    });\n                    return { error: true, message: e.response?.data };\n                }\n\n                if (e.response?.data?.message === 'KEY_EXPIRED')\n                    return { error: true, message: e.response?.data?.message };\n\n                if (\n                    e.config?.baseURL == baseURL &&\n                    e.response?.status === 401 &&\n                    window.signedIn\n                ) {\n                    window.logout();\n                    return {\n                        error: true,\n                        message: 'Token expired please login',\n                    };\n                }\n\n                return {\n                    error: true,\n                    message: e.response?.data?.message || 'Not found',\n                    code: e.response?.status,\n                };\n            });\n\n        if (response.message === 'KEY_EXPIRED' && !reTriggered) {\n            reTriggered = true;\n            await updatePublicKey();\n            return await _call();\n        }\n\n        return response;\n    };\n\n    return await _call();\n};\n"
    },
    {
        "filePath": "packages/services/repository/authentication.ts",
        "content": "import { Request } from '../libraries/api';\n\n//\nexport const login = (payload: { email: string; password: string }) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/login`,\n        },\n        payload\n    ).then(async (res) => {\n        if (res.error) {\n            window.showToast({\n                type: 'error',\n                message: res.message,\n            });\n        }\n        return res;\n    });\n\nexport const register = (payload: {\n    name: string;\n    email: string;\n    password: string;\n}) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/create`,\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const requestResetPassword = (payload: { email: string }) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/request-reset-password`,\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const changePassword = (payload: { password: string }, token: string) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/change-password`,\n        },\n        payload,\n        {\n            Authorization: `Bearer ${token}`,\n        }\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const requestVerification = (payload: {\n    email?: string;\n    phoneNumber?: string;\n}) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/request-verification`,\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const verifyEmailAccount = (token: string) =>\n    Request(\n        { method: 'get', url: `v1/user/verify-email` },\n        {},\n        {\n            Authorization: `Bearer ${token}`,\n        }\n    );\n\nexport const getUserDetail = () =>\n    Request({ method: 'get', url: `v1/user/profile` }).then((res) =>\n        res.error ? res : res?.data?.user\n    );\n\nexport const updateUser = (payload: Record<string, string>) =>\n    Request(\n        {\n            method: 'put',\n            url: 'v1/user/update',\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const updatePassword = (payload: Record<string, string>) =>\n    Request(\n        {\n            method: 'put',\n            url: 'v1/user/update-password',\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const logout = (all = false) =>\n    Request({ method: 'post', url: `v1/user/logout` }, { all }).then((res) => {\n        window.logout();\n        return res.error ? res : res?.data?.user;\n    });\n"
    },
    {
        "filePath": "packages/services/repository/utils.ts",
        "content": "export const encrypt = async (data: ILargeRecord) => {\n    const publicKeyBase64 = localStorage.getItem('publicKey');\n    if (publicKeyBase64) {\n        const binaryString = atob(publicKeyBase64);\n        const binaryData = Uint8Array.from(binaryString, (char) =>\n            char.charCodeAt(0)\n        );\n        const publicKey = await window.crypto.subtle.importKey(\n            'spki',\n            binaryData,\n            { name: 'RSA-OAEP', hash: 'SHA-256' },\n            false,\n            ['encrypt']\n        );\n\n        const symmetricKey = await window.crypto.subtle.generateKey(\n            { name: 'AES-GCM', length: 256 },\n            true,\n            ['encrypt', 'decrypt']\n        );\n\n        const symmetricKeyRaw = await window.crypto.subtle.exportKey(\n            'raw',\n            symmetricKey\n        );\n\n        const encryptedSymmetricKey = await window.crypto.subtle.encrypt(\n            { name: 'RSA-OAEP' },\n            publicKey,\n            symmetricKeyRaw\n        );\n\n        const encoder = new TextEncoder();\n        const encodedData = encoder.encode(JSON.stringify(data));\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const encryptedData = await window.crypto.subtle.encrypt(\n            { name: 'AES-GCM', iv },\n            symmetricKey,\n            encodedData\n        );\n\n        const encryptedSymmetricKeyBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedSymmetricKey))\n        );\n        const encryptedDataBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedData))\n        );\n        const ivBase64 = btoa(String.fromCharCode(...iv));\n\n        return {\n            encryptedSymmetricKey: encryptedSymmetricKeyBase64,\n            encryptedData: encryptedDataBase64,\n            iv: ivBase64,\n        };\n    }\n    return data;\n};\n\nexport const calculateFileChecksum = (file: File) => {\n    const fileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        fileReader.onload = async (event) => {\n            try {\n                const fileArrayBuffer = event.target!.result as ArrayBuffer;\n\n                const hashBuffer = await crypto.subtle.digest(\n                    'SHA-256',\n                    fileArrayBuffer\n                );\n\n                const hashArray = Array.from(new Uint8Array(hashBuffer));\n                const hashHex = hashArray\n                    .map((byte) => byte.toString(16).padStart(2, '0'))\n                    .join('');\n\n                resolve(hashHex);\n            } catch (error) {\n                reject('Error calculating checksum: ' + error);\n            }\n        };\n\n        fileReader.readAsArrayBuffer(file);\n    });\n};\n\nexport const byteFormat = (bytes: number, decimals: number) => {\n    if (!+bytes) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n};\n\nexport const formatAcceptTypes = (accept: string): string => {\n    const mimeMap: { [key: string]: string } = {\n        'image/jpeg': 'JPEG',\n        'image/png': 'PNG',\n        'image/gif': 'GIF',\n        'application/pdf': 'PDF',\n    };\n    return accept\n        .split(',')\n        .map(\n            (mime) => mimeMap[mime] || mime.split('/')[1]?.toUpperCase() || mime\n        )\n        .join(', ');\n};\n\nexport const generateKey = () => {\n    return Math.random().toString(36).substring(2, 12);\n};\n"
    },
    {
        "filePath": "packages/services/type.d.ts",
        "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv extends Readonly<Record<string, string>> {\n    readonly VITE_APP_NAME: string;\n    readonly VITE_ENCRYPTION: string;\n    readonly VITE_SOCKET_ENCRYPTION: string;\n    readonly VITE_IP: string;\n    readonly VITE_API_PORT: string;\n    readonly VITE_SOCKET_PORT: string;\n    readonly VITE_CDN_DOMAIN: string;\n}\n\ninterface ImportMeta {\n    readonly env: ImportMetaEnv;\n}\n\ndeclare type ILargeRecord = any;\n\ninterface Window {\n    skipWaiting: () => void;\n    clients: {\n        claim: () => void;\n        matchAll: (arg0: { type: string }) => Promise<any>;\n        openWindow: (arg0: string) => any;\n    };\n    encryptionKey: string;\n    signedIn: boolean;\n    logout: () => void;\n    showToast: (toast: {\n        type: 'info' | 'error' | 'warning' | 'success';\n        message: string;\n    }) => void;\n}\n\ninterface Event {\n    waitUntil: (args: any) => void;\n    respondWith: (args: any) => void;\n    request: any;\n}\n"
    }
]
