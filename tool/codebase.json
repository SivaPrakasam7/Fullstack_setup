[
  {
    "filePath": "packages/backend/migrations/001_authentication.sql",
    "content": "use `fullstack`;\n\n-- Users\nCREATE TABLE\n    `users` (\n        `id` INT (11) AUTO_INCREMENT,\n        `userId` CHAR(40) NOT NULL, -- Store generated userId \n        `email` VARCHAR(100) NOT NULL UNIQUE, -- Email address its optional \n        `phoneNumber` VARCHAR(40), -- Phone number \n        `name` VARCHAR(250), -- Name of user\n        `profileURL` VARCHAR(255), -- Store profile image URL\n        `bannerURL` VARCHAR(255), -- Store user banner background image\n        `passwordHash` VARCHAR(255), -- Store password hash\n        `providerId` VARCHAR(255), -- For google authentication\n        `status` enum ('active', 'inactive') NOT NULL DEFAULT 'active', -- User status\n        `secretKey` VARCHAR(100) NOT NULL, -- Attach secret to token, It is used for handle logout from all devices\n        `resetPasswordKey` VARCHAR(100) DEFAULT NULL,\n        `failedAttempts` INT (11) NOT NULL DEFAULT 0,\n        `isSuspended` INT (11) NOT NULL DEFAULT 0,\n        `suspendedAt` TIMESTAMP,\n        `isDeleted` INT (11) NOT NULL DEFAULT 0,\n        `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        `updatedAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        PRIMARY KEY (`id`),\n        UNIQUE (`email`),\n        UNIQUE (`userId`)\n    );\n\nCREATE INDEX idx_userId ON `users` (`userId`);\n\nCREATE INDEX idx_email ON `users` (`email`);\n\n-- Verifications\nCREATE TABLE\n    `verifications` (\n        `id` INT (11) AUTO_INCREMENT,\n        `source` VARCHAR(255) NOT NULL UNIQUE, -- The actual source (email)\n        `verified` INT (11) NOT NULL DEFAULT 0,\n        `code` CHAR(6),\n        `isDeleted` INT (11) NOT NULL DEFAULT 0,\n        `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        `updatedAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        PRIMARY KEY (`id`)\n    );\n\nCREATE INDEX idx_source ON `verifications` (`source`);"
  },
  {
    "filePath": "packages/backend/migrations/002_security.sql",
    "content": "use `fullstack_keys`;\n\nCREATE TABLE\n    `keyPair` (\n        `id` INT (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n        `clientId` CHAR(40) UNIQUE,\n        `userId` CHAR(40),\n        `publicKey` TEXT NOT NULL,\n        `privateKey` TEXT NOT NULL,\n        `createdAt` VARCHAR(100) NOT NULL\n    );"
  },
  {
    "filePath": "packages/backend/migrations/procedures.sql",
    "content": "USE `fullstack`;\n\n-- 1. GetUserByIDandSecretKey\nDROP PROCEDURE IF EXISTS GetUserByIDandSecretKey;\nCREATE PROCEDURE GetUserByIDandSecretKey(\n    IN p_userId VARCHAR(255),\n    IN p_secretKey VARCHAR(255)\n)\nBEGIN\n    SELECT * FROM users \n    WHERE userId = p_userId \n    AND secretKey = p_secretKey \n    AND isDeleted = 0\n    LIMIT 1;\nEND;\n\n-- 2. CreateUser\nDROP PROCEDURE IF EXISTS CreateUser;\nCREATE PROCEDURE CreateUser(\n    IN p_userId VARCHAR(255),\n    IN p_name VARCHAR(255),\n    IN p_email VARCHAR(255),\n    IN p_phoneNumber VARCHAR(255),\n    IN p_profileURL VARCHAR(255),\n    IN p_passwordHash VARCHAR(255),\n    IN p_providerId VARCHAR(255),\n    IN p_secretKey VARCHAR(255),\n    OUT p_insertId BIGINT\n)\nBEGIN\n    INSERT INTO users (userId, name, email, phoneNumber, profileURL, passwordHash, providerId, secretKey)\n    VALUES (p_userId, p_name, p_email, p_phoneNumber, p_profileURL, p_passwordHash, p_providerId, p_secretKey);\n    SET p_insertId = LAST_INSERT_ID();\n    SELECT p_insertId AS insertId; -- Return the OUT parameter directly\nEND;\n\n-- 3. UpdateEmailVerification\nDROP PROCEDURE IF EXISTS UpdateEmailVerification;\nCREATE PROCEDURE UpdateEmailVerification(\n    IN p_email VARCHAR(255),\n    OUT p_affectedRows INT\n)\nBEGIN\n    INSERT INTO verifications (source) \n    VALUES (p_email);\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 4. UpdateVerificationOTP\nDROP PROCEDURE IF EXISTS UpdateVerificationOTP;\nCREATE PROCEDURE UpdateVerificationOTP(\n    IN p_phoneNumber VARCHAR(255),\n    IN p_otp VARCHAR(10),\n    OUT p_affectedRows INT\n)\nBEGIN\n    INSERT INTO verifications (source, code) \n    VALUES (p_phoneNumber, p_otp)\n    ON DUPLICATE KEY UPDATE code = p_otp;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 5. UpdateVerification\nDROP PROCEDURE IF EXISTS UpdateVerification;\nCREATE PROCEDURE UpdateVerification(\n    IN p_source VARCHAR(255),\n    IN p_type ENUM('email', 'phone'),\n    IN p_otp VARCHAR(10),\n    OUT p_affectedRows INT\n)\nBEGIN\n    IF p_type = 'email' THEN\n        UPDATE verifications \n        SET verified = 1 \n        WHERE source = p_source;\n    ELSEIF p_type = 'phone' THEN\n        UPDATE verifications \n        SET verified = 1, code = ''\n        WHERE source = p_source \n        AND code = p_otp;\n    END IF;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 6. GetUserBySource\nDROP PROCEDURE IF EXISTS GetUserBySource;\nCREATE PROCEDURE GetUserBySource(\n    IN p_email VARCHAR(255),\n    IN p_phoneNumber VARCHAR(255)\n)\nBEGIN\n    IF p_email IS NOT NULL THEN\n        SELECT * FROM users \n        WHERE email = p_email \n        AND status = 'active' \n        AND isDeleted = 0\n        LIMIT 1;\n    ELSE\n        SELECT * FROM users \n        WHERE phoneNumber = p_phoneNumber \n        AND status = 'active' \n        AND isDeleted = 0\n        LIMIT 1;\n    END IF;\nEND;\n\n-- 7. CheckUserVerified\nDROP PROCEDURE IF EXISTS CheckUserVerified;\nCREATE PROCEDURE CheckUserVerified(\n    IN p_source VARCHAR(255),\n    OUT p_count INT\n)\nBEGIN\n    SELECT COUNT(*) INTO p_count \n    FROM verifications \n    WHERE source = p_source \n    AND verified = 1 \n    AND isDeleted = 0;\n    SELECT p_count AS count; -- Return the OUT parameter\nEND;\n\n-- 8. GetUserById\nDROP PROCEDURE IF EXISTS GetUserById;\nCREATE PROCEDURE GetUserById(\n    IN p_userId VARCHAR(255)\n)\nBEGIN\n    SELECT userId, name, email, phoneNumber, profileURL \n    FROM users \n    WHERE userId = p_userId \n    AND status = 'active' \n    AND isDeleted = 0\n    LIMIT 1;\nEND;\n\n-- 9. GetLocalUserById\nDROP PROCEDURE IF EXISTS GetLocalUserById;\nCREATE PROCEDURE GetLocalUserById(\n    IN p_userId VARCHAR(255)\n)\nBEGIN\n    SELECT * \n    FROM users \n    WHERE userId = p_userId \n    AND status = 'active' \n    AND isDeleted = 0\n    LIMIT 1;\nEND;\n\n-- 10. UpdateResetPasswordKey\nDROP PROCEDURE IF EXISTS UpdateResetPasswordKey;\nCREATE PROCEDURE UpdateResetPasswordKey(\n    IN p_resetPasswordKey VARCHAR(255),\n    IN p_userId VARCHAR(255),\n    OUT p_affectedRows INT\n)\nBEGIN\n    UPDATE users \n    SET resetPasswordKey = p_resetPasswordKey \n    WHERE userId = p_userId \n    AND isDeleted = 0;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 11. UpdatePasswordByKey\nDROP PROCEDURE IF EXISTS UpdatePasswordByKey;\nCREATE PROCEDURE UpdatePasswordByKey(\n    IN p_passwordHash VARCHAR(255),\n    IN p_userId VARCHAR(255),\n    IN p_secretKey VARCHAR(255),\n    IN p_resetPasswordKey VARCHAR(255),\n    OUT p_affectedRows INT\n)\nBEGIN\n    UPDATE users \n    SET passwordHash = p_passwordHash,\n        secretKey = p_secretKey,\n        resetPasswordKey = ''\n    WHERE userId = p_userId \n    AND resetPasswordKey = p_resetPasswordKey \n    AND isDeleted = 0;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 12. UpdatePassword\nDROP PROCEDURE IF EXISTS UpdatePassword;\nCREATE PROCEDURE UpdatePassword(\n    IN p_passwordHash VARCHAR(255),\n    IN p_userId VARCHAR(255),\n    OUT p_affectedRows INT\n)\nBEGIN\n    UPDATE users \n    SET passwordHash = p_passwordHash \n    WHERE userId = p_userId \n    AND isDeleted = 0;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 13. IncreaseFailedAttempt\nDROP PROCEDURE IF EXISTS IncreaseFailedAttempt;\nCREATE PROCEDURE IncreaseFailedAttempt(\n    IN p_userId VARCHAR(255),\n    OUT p_affectedRows INT\n)\nBEGIN\n    UPDATE users \n    SET failedAttempts = failedAttempts + 1,\n        isSuspended = CASE WHEN failedAttempts >= 3 THEN 1 ELSE 0 END,\n        suspendedAt = CASE WHEN failedAttempts >= 3 THEN CURRENT_TIMESTAMP ELSE NULL END\n    WHERE userId = p_userId \n    AND isDeleted = 0;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;\n\n-- 14. UpdateSecretKey\nDROP PROCEDURE IF EXISTS UpdateSecretKey;\nCREATE PROCEDURE UpdateSecretKey(\n    IN p_secretKey VARCHAR(255),\n    IN p_userId VARCHAR(255),\n    OUT p_affectedRows INT\n)\nBEGIN\n    UPDATE users \n    SET secretKey = p_secretKey \n    WHERE userId = p_userId \n    AND isDeleted = 0;\n    SET p_affectedRows = ROW_COUNT();\n    SELECT p_affectedRows AS affectedRows; -- Return the OUT parameter\nEND;"
  },
  {
    "filePath": "packages/backend/src/controller/security.ts",
    "content": "import { IError, IMiddleWare } from '../../src/handler/middleware';\nimport {\n    getClientPublicKeyService,\n    getKeyPairService,\n} from '../../src/services/security';\n\n//\nimport messages from '../../src/utils/messages';\n\n//\nexport const getKeyPairsController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = {\n            userId: req.body.userId,\n            clientId: req.cookies.clientId,\n            browserId: req.cookies.browserId,\n        };\n\n        const result = await getKeyPairService(data);\n\n        res.cookie('clientId', result.clientId, {\n            httpOnly: true,\n            secure: true,\n            sameSite: 'strict',\n            maxAge: +process.env.KEY_ROTATION_INTERVAL!,\n        });\n        res.status(200).json({\n            message: messages.responses.success,\n            publicKey: result.publicKey,\n            privateKey: result.privateKey,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const getClientPublicKeyController: IMiddleWare = async (\n    req,\n    res,\n    next\n) => {\n    try {\n        const data = req.body;\n        const result = await getClientPublicKeyService(data);\n\n        res.status(200).json({\n            message: messages.responses.success,\n            publicKey: result,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n"
  },
  {
    "filePath": "packages/backend/src/controller/user.ts",
    "content": "import type { IError, IMiddleWare } from '../../src/handler/middleware';\nimport {\n    changePasswordService,\n    createUserService,\n    forgotPasswordService,\n    getUserService,\n    loginService,\n    logoutService,\n    requestVerificationService,\n    updatePasswordService,\n    updateUserService,\n    verificationEmailService,\n    verificationPhoneService,\n} from '../../src/services/user';\n\n//\nimport messages from '../utils/messages';\n\n//\nexport const createUserController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await createUserService(data);\n\n        // res.cookie('refreshToken', result.refreshToken, {\n        //     httpOnly: true,\n        //     secure: process.env.MODE === 'production',\n        //     sameSite: 'strict',\n        //     maxAge: +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n        // });\n        // res.cookie('accessToken', result.accessToken, {\n        //     httpOnly: true,\n        //     secure: process.env.MODE === 'production',\n        //     sameSite: 'strict',\n        //     maxAge: +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n        // });\n\n        res.status(200).json({\n            message: result,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const loginController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await loginService(data);\n\n        res.cookie('refreshToken', result.refreshToken, {\n            httpOnly: true,\n            secure: process.env.MODE === 'production',\n            sameSite: 'strict',\n            maxAge: +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n        });\n        res.cookie('accessToken', result.accessToken, {\n            httpOnly: true,\n            secure: process.env.MODE === 'production',\n            sameSite: 'strict',\n            maxAge: +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n        });\n\n        res.status(200).json({\n            message: messages.responses.success,\n            data: result,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const userController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const user = await getUserService(data);\n\n        res.status(200).json({\n            message: messages.responses.success,\n            data: { user },\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const requestVerifyController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await requestVerificationService(data);\n        res.status(200).json({\n            message: result,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const verifyEmailController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await verificationEmailService(data);\n\n        res.status(200).json({ message: result });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const verifyPhoneController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await verificationPhoneService(data);\n\n        res.status(200).json({ message: result });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const forgotPasswordController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await forgotPasswordService(data);\n\n        res.status(200).json({ message: result });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const changePasswordController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await changePasswordService(data);\n\n        res.status(200).json({ message: result });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const updatePasswordController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await updatePasswordService(data);\n\n        res.status(200).json({ message: result });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const logoutController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n\n        if (data.all) await logoutService(data);\n\n        res.cookie('refreshToken', '', {\n            httpOnly: true,\n            secure: process.env.MODE === 'production',\n            sameSite: 'strict',\n        });\n        res.cookie('accessToken', '', {\n            httpOnly: true,\n            secure: process.env.MODE === 'production',\n            sameSite: 'strict',\n        });\n\n        res.status(200).json({ message: messages.responses.success });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n\nexport const updateUserController: IMiddleWare = async (req, res, next) => {\n    try {\n        const data = req.body;\n        const result = await updateUserService(data);\n\n        res.status(200).json({\n            message: result,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n"
  },
  {
    "filePath": "packages/backend/src/controller/utils.ts",
    "content": "import { IError, IMiddleWare } from '../../src/handler/middleware';\nimport messages from '../../src/utils/messages';\n\nexport const uploadFileController: IMiddleWare = async (req, res, next) => {\n    try {\n        res.status(200).json({\n            message: messages.responses.success,\n            data: `${process.env.ASSET_URL}${req.file?.filename}`,\n        });\n    } catch (e) {\n        next(e as IError);\n    }\n};\n"
  },
  {
    "filePath": "packages/backend/src/handler/db.ts.ts",
    "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport mysql, { Pool, PoolOptions } from 'mysql2/promise';\n\nexport class MYSQLConnection {\n    private static pool: Pool;\n    private static logspool: Pool;\n    private static keyspool: Pool;\n    private constructor() {}\n\n    static configurePool(): Pool {\n        if (!MYSQLConnection.pool) {\n            const poolOptions: PoolOptions = {\n                connectionLimit: 150,\n                host: process.env.DB_HOST,\n                port: parseInt(process.env.DATABASE_PORT!),\n                user: process.env.DB_USER,\n                password: process.env.DB_PASSWORD,\n                database: process.env.DATABASE_NAME,\n                debug: false,\n                multipleStatements: false,\n                charset: 'utf8mb4',\n            };\n            MYSQLConnection.pool = mysql.createPool(poolOptions);\n\n            console.log('MySQL pool connection configured.');\n        }\n\n        return MYSQLConnection.pool;\n    }\n\n    static configureLogsPool(): Pool {\n        if (!MYSQLConnection.logspool) {\n            const poolOptions: PoolOptions = {\n                connectionLimit: 150,\n                host: process.env.DB_HOST,\n                port: parseInt(process.env.DATABASE_PORT!),\n                user: process.env.DB_USER,\n                password: process.env.DB_PASSWORD,\n                database: process.env.LOG_DATABASE_NAME,\n                debug: false,\n                multipleStatements: false,\n                charset: 'utf8mb4',\n            };\n            MYSQLConnection.logspool = mysql.createPool(poolOptions);\n\n            console.log('MySQL Logs pool connection configured.');\n        }\n\n        return MYSQLConnection.logspool;\n    }\n\n    static configureKeysPool(): Pool {\n        if (!MYSQLConnection.keyspool) {\n            const poolOptions: PoolOptions = {\n                connectionLimit: 150,\n                host: process.env.DB_HOST,\n                port: parseInt(process.env.DATABASE_PORT!),\n                user: process.env.DB_USER,\n                password: process.env.DB_PASSWORD,\n                database: process.env.KEY_DATABASE_NAME,\n                debug: false,\n                multipleStatements: false,\n                charset: 'utf8mb4',\n            };\n            MYSQLConnection.keyspool = mysql.createPool(poolOptions);\n\n            console.log('MySQL Logs pool connection configured.');\n        }\n\n        return MYSQLConnection.keyspool;\n    }\n\n    static closePool() {\n        if (MYSQLConnection.pool) {\n            MYSQLConnection.pool.end();\n            console.log('MySQL pool connection closed.');\n        }\n        if (MYSQLConnection.logspool) {\n            MYSQLConnection.logspool.end();\n            console.log('MySQL pool connection closed.');\n        }\n        if (MYSQLConnection.keyspool) {\n            MYSQLConnection.keyspool.end();\n            console.log('MySQL pool connection closed.');\n        }\n    }\n}\n\nexport const executeQuery: IQuery = async (\n    query: string,\n    values?: any\n): Promise<any> => {\n    const pool = MYSQLConnection.configurePool();\n    const [results] = await pool.query(query, values);\n    return results;\n};\n\nexport const executeLogsQuery: IQuery = async (\n    query: string,\n    values?: any\n): Promise<any> => {\n    const pool = MYSQLConnection.configureLogsPool();\n    const [results] = await pool.query(query, values);\n    return results;\n};\n\nexport const executeKeysQuery: IQuery = async (\n    query: string,\n    values?: any\n): Promise<any> => {\n    const pool = MYSQLConnection.configureKeysPool();\n    const [results] = await pool.query(query, values);\n    return results;\n};\n\nexport type IQuery = (query: string, values?: any) => Promise<any>;\n"
  },
  {
    "filePath": "packages/backend/src/handler/error.ts",
    "content": "import { logErrorToFile } from '../../src/handler/logger';\nimport { IErrorHandler } from '../../src/handler/middleware';\n\n//\nimport messages from '../../src/utils/messages';\n\n//\nexport const createError = (code: number, message: string) => {\n    const error = new Error(message);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (error as any).code = code;\n    return error;\n};\n\nexport const errorHandler: IErrorHandler = (error, _req, res, _next) => {\n    if (!Object.values(messages.responses).includes(`${error.message}`))\n        logErrorToFile(error);\n\n    const statusCode =\n        typeof error.code === 'string' ? parseInt(error.code, 10) : error.code;\n    const validStatusCode = isNaN(statusCode) ? 500 : statusCode;\n    const validateMessage =\n        typeof error.code === 'string' ? 'Something went wrong' : error.message;\n\n    res.status(validStatusCode).send({\n        message: validateMessage,\n    });\n};\n"
  },
  {
    "filePath": "packages/backend/src/handler/logger.ts",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport { IError, IMiddleWare } from '../../src/handler/middleware';\n\n// Function to get the current date in YYYY-MM-DD format\nconst getDateString = () => {\n    return new Date().toISOString().split('T')[0];\n};\n\n// Error log file with date\nconst getErrorLogFilePath = () =>\n    path.join(\n        __dirname,\n        `${process.env.MAIN_PATH}/logs`,\n        `error-${getDateString()}.log`\n    );\n\nexport const logErrorToFile = (error: IError) => {\n    const logFilePath = getErrorLogFilePath();\n    const logMessage = `[${new Date().toISOString()}] ${error.stack || error.message}\\n`;\n    if (!fs.existsSync(path.dirname(logFilePath))) {\n        fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n    }\n    fs.appendFileSync(logFilePath, logMessage, 'utf8');\n};\n\n// Access log file with date\nconst getAccessLogFilePath = () =>\n    path.join(\n        __dirname,\n        `${process.env.MAIN_PATH}/logs`,\n        `access-${getDateString()}.log`\n    );\n\nexport const logAccess: IMiddleWare = (req, res, next) => {\n    const logFilePath = getAccessLogFilePath();\n    const logMessage = `[${new Date().toISOString()}] ${req.method} ${req.url} ${req.ip} params: ${JSON.stringify(req.params || {})}, body: ${JSON.stringify(req.body || {})}\\n`;\n    if (!fs.existsSync(path.dirname(logFilePath))) {\n        fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n    }\n    fs.appendFileSync(logFilePath, logMessage, 'utf8');\n    next();\n};\n\n// Mail log file with date\nconst getMailLogFilePath = () =>\n    path.join(\n        __dirname,\n        `${process.env.MAIN_PATH}/logs`,\n        `mail-${getDateString()}.log`\n    );\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const logMail = (data: Record<string, any>) => {\n    const logFilePath = getMailLogFilePath();\n    const logMessage = `[${new Date().toISOString()}] Config: ${JSON.stringify(data.config)}, Error: ${JSON.stringify(data.error)}, Result: ${JSON.stringify(data.data || {})}\\n`;\n    if (!fs.existsSync(path.dirname(logFilePath))) {\n        fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n    }\n    fs.appendFileSync(logFilePath, logMessage, 'utf8');\n};\n"
  },
  {
    "filePath": "packages/backend/src/handler/middleware.ts",
    "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Request, Response } from 'express';\nimport type { ObjectSchema } from 'yup';\n\nexport type IErrorHandler = (\n    error: IError,\n    req: Request,\n    res: Response,\n    next: IErrorCallback\n) => void;\n\nexport type IErrorCallback = (args?: Record<string, any>) => void;\n\nexport interface IError {\n    stack: string;\n    code: number;\n    message: string | boolean | Record<string, string>;\n}\n\nexport type IMiddleWare = (\n    req: Request,\n    res: Response,\n    next: IErrorCallback,\n    optional?: boolean\n) => void;\n\nexport type IValidator = (validation: ObjectSchema<any>) => IMiddleWare;\n\nexport type IService<T> = (data: Record<string, any>) => Promise<T>;\n"
  },
  {
    "filePath": "packages/backend/src/handler/security.ts",
    "content": "import fs from 'fs';\n\n//\nimport { generateId } from '../../src/utils';\nimport { createError } from './error';\nimport { IMiddleWare } from './middleware';\nimport { getKeysRepo } from '../../src/repository/security';\n\n//\nimport messages from '../utils/messages';\n\n//\n(global as any).userKeys = {};\n\nexport const clientHandler: IMiddleWare = async (req, res, next) => {\n    if (req.cookies.browserId) return next();\n\n    const browserId = `BRWS-${generateId()}`;\n\n    res.cookie('browserId', browserId, {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict',\n        maxAge: +process.env.KEY_ROTATION_INTERVAL!,\n    });\n\n    next();\n};\n\nexport const inputValidationMiddleware: IMiddleWare = (req, res, next) => {\n    if (!['logger', 'error-logger'].includes(req.url)) {\n        const keysToValidate = ['body', 'params', 'query'];\n\n        for (const key of keysToValidate) {\n            if (req[key as keyof typeof req]) {\n                for (const [param, value] of Object.entries(\n                    req[key as keyof typeof req]\n                )) {\n                    if (\n                        typeof value === 'string' &&\n                        !['password', 'newPassword', 'prompt'].includes(param)\n                    ) {\n                        const maliciousPattern =\n                            /(<script.*?>.*?<\\/script>|<.*?on\\w+=\".*?\"|(?:\\bSELECT\\b|\\bDROP\\b|\\bINSERT\\b|\\bDELETE\\b|\\bUPDATE\\b).*?|\\bUNION\\b.*?\\bSELECT\\b|;--|<|>|\\{|\\}|[\\\\\"']|\\\\x[0-9A-Fa-f]{2,}|\\.\\.|\\/\\*|\\*\\/)/gi;\n\n                        if (maliciousPattern.test(value)) {\n                            return next(\n                                createError(\n                                    400,\n                                    messages.responses.harmfulContent\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n    next();\n};\n\nexport const filePathScanner: IMiddleWare = async (req, res, next) => {\n    const filePath = req.file?.path;\n\n    if (!filePath)\n        return next(createError(404, messages.responses.fileNotFound));\n\n    fs.readFile(filePath, async (err, fileBuffer) => {\n        const arrayBuffer = fileBuffer.buffer.slice(\n            fileBuffer.byteOffset,\n            fileBuffer.byteOffset + fileBuffer.byteLength\n        );\n\n        const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\n\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hashHex = hashArray\n            .map((byte) => byte.toString(16).padStart(2, '0'))\n            .join('');\n        if (req.body.checkSum !== hashHex)\n            return next(createError(400, messages.responses.harmfulFile));\n\n        next();\n    });\n};\n\nexport const getPrivateKey = async (clientId: string) => {\n    if (!(global as any).userKeys[clientId]) {\n        const { publicKey, privateKey, createdAt } =\n            await getKeysRepo(clientId);\n        (global as any).userKeys[clientId] = {\n            publicKey: Uint8Array.from(Buffer.from(publicKey, 'base64')),\n            privateKey: Uint8Array.from(Buffer.from(privateKey, 'base64')),\n            createdAt: +createdAt,\n        };\n    }\n\n    const privateKey = (global as any).userKeys[clientId]?.privateKey;\n\n    if (!privateKey) return;\n\n    const privateKeyObject = await crypto.subtle.importKey(\n        'pkcs8',\n        privateKey,\n        { name: 'RSA-OAEP', hash: 'SHA-256' },\n        false,\n        ['decrypt']\n    );\n\n    return privateKeyObject;\n};\n\nexport const decryptPayload: IMiddleWare = async (req, _, next) => {\n    try {\n        if (\n            req.method === 'GET' ||\n            req.headers['content-type']?.includes('multipart/form-data')\n        )\n            return next();\n\n        const clientId = req.cookies.clientId;\n        const privateKey = await getPrivateKey(clientId);\n\n        if (\n            !clientId ||\n            !privateKey ||\n            Date.now() - (global as any).userKeys[clientId]?.createdAt >\n                +process.env.KEY_ROTATION_INTERVAL!\n        ) {\n            return next(createError(403, messages.responses.keyExpired));\n        }\n\n        const { encryptedSymmetricKey, encryptedData, iv } = req.body;\n\n        if (!encryptedSymmetricKey || !encryptedData || !iv)\n            return next(createError(403, messages.responses.keyExpired));\n\n        const symmetricKeyRaw = await crypto.subtle.decrypt(\n            { name: 'RSA-OAEP' },\n            privateKey,\n            Uint8Array.from(Buffer.from(encryptedSymmetricKey, 'base64'))\n        );\n\n        const symmetricKey = await crypto.subtle.importKey(\n            'raw',\n            symmetricKeyRaw,\n            { name: 'AES-GCM' },\n            false,\n            ['decrypt']\n        );\n\n        const decryptedData = await crypto.subtle.decrypt(\n            {\n                name: 'AES-GCM',\n                iv: Uint8Array.from(Buffer.from(iv, 'base64')),\n            },\n            symmetricKey,\n            Uint8Array.from(Buffer.from(encryptedData, 'base64'))\n        );\n\n        req.body = JSON.parse(new TextDecoder().decode(decryptedData));\n        next();\n    } catch {\n        next(createError(403, messages.responses.keyExpired));\n    }\n};\n"
  },
  {
    "filePath": "packages/backend/src/handler/tokenVerification.ts",
    "content": "import { Response } from 'express';\n\n//\nimport { IMiddleWare } from '../../src/handler/middleware';\n// import { getAuth } from '../../src/libraries/firebase';\nimport { generateToken, verifyToken } from '../../src/libraries/tokenGenerator';\nimport { createError } from '../../src/handler/error';\nimport { getUserByIDandSecretKeyRepo } from '../../src/repository/user';\n\n//\nimport messages from '../utils/messages';\n\n//\nconst clearCookies = (res: Response) => {\n    res.cookie('refreshToken', '', {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict',\n    });\n    res.cookie('accessToken', '', {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict',\n    });\n};\n\nexport const tokenChecker: IMiddleWare = async (\n    req,\n    res,\n    next,\n    optional = false\n) => {\n    try {\n        req.body.userId = req.cookies.browserId;\n\n        const refreshToken = req.cookies.refreshToken;\n        const accessToken = req.cookies.accessToken;\n\n        if (!optional && !refreshToken && !accessToken) {\n            clearCookies(res);\n            return next(createError(401, messages.responses.unauthorized));\n        }\n\n        let result;\n        try {\n            result = await verifyToken(accessToken);\n        } catch {\n            if (refreshToken) {\n                result = await verifyToken(refreshToken);\n\n                const payload = JSON.parse(atob(accessToken.split('.')?.[1]));\n\n                const now = Date.now();\n\n                if (\n                    now - payload.lastUsed <=\n                    +process.env.REFRESH_TOKEN_EXPIRES_IN!\n                ) {\n                    const newAccessTokenToken = await generateToken(\n                        { ...result, lastUsed: now },\n                        true\n                    );\n                    res.cookie('accessToken', newAccessTokenToken, {\n                        httpOnly: true,\n                        secure: true,\n                        sameSite: 'strict',\n                        maxAge: +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n                    });\n                } else {\n                    clearCookies(res);\n                    return next(\n                        createError(401, messages.responses.unauthorized)\n                    );\n                }\n            }\n        }\n\n        const {\n            iat: _,\n            exp: __,\n            lastUsed: ___,\n            ...data\n        } = result as Record<string, string>;\n\n        if (data.secretKey) {\n            const isUserAvailable = await getUserByIDandSecretKeyRepo(\n                data.userId,\n                data.secretKey\n            );\n\n            if (!isUserAvailable) {\n                clearCookies(res);\n                return next(createError(401, messages.responses.unauthorized));\n            }\n        }\n\n        req.body = {\n            ...req.body,\n            ...data,\n        };\n\n        next();\n    } catch {\n        if (optional) return next();\n        else {\n            clearCookies(res);\n            return next(createError(401, messages.responses.unauthorized));\n        }\n    }\n};\n\n//\nexport const headerTokenChecker: IMiddleWare = async (req, _, next) => {\n    try {\n        const token = req.headers.authorization?.split(' ')?.[1];\n        if (!token) throw createError(401, messages.responses.unauthorized);\n\n        const result = await verifyToken(token);\n\n        req.body = {\n            ...result,\n            ...req.body,\n        };\n        next();\n    } catch {\n        return next(createError(401, messages.responses.unauthorized));\n    }\n};\n\n// export const providerTokenChecker: IMiddleWare = async (req, _, next) => {\n//     const requestToken = req.headers.authorization?.split(' ')?.[1];\n\n//     if (!requestToken) throw createError(400, messages.responses.tokenNotFound);\n\n//     await getAuth()\n//         .verifyIdToken(requestToken)\n//         .then((decodedToken) => {\n//             const providerId = decodedToken.uid;\n//             const name = decodedToken.name;\n//             const email = decodedToken.email;\n\n//             req.body = {\n//                 ...{\n//                     providerId,\n//                     name,\n//                     email,\n//                 },\n//                 ...req.body,\n//             };\n\n//             next();\n//         });\n// };\n"
  },
  {
    "filePath": "packages/backend/src/handler/validator.ts",
    "content": "import { IError, IValidator } from './middleware';\n\nexport const validator: IValidator = (validation) => {\n    return async (req, res, next) => {\n        try {\n            await validation.validate(req.body);\n\n            next();\n        } catch (e) {\n            res.status(400).json({ message: (e as IError).message });\n        }\n    };\n};\n"
  },
  {
    "filePath": "packages/backend/src/index.ts",
    "content": "import express from 'express';\nimport { rateLimit } from 'express-rate-limit';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport swaggerUI from 'swagger-ui-express';\n\ndotenv.config();\n\n//\nimport { errorHandler } from '../src/handler/error';\nimport { logAccess } from '../src/handler/logger';\nimport { swaggerSpec } from '../src/swagger';\nimport userRoutes from '../src/routes/user';\nimport securityRoutes from '../src/routes/security';\nimport utilRoutes from '../src/routes/utils';\nimport {\n    clientHandler,\n    decryptPayload,\n    inputValidationMiddleware,\n} from '../src/handler/security';\n\n//\nconst app = express();\nconst port = process.env.PORT;\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    limit: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes).\n    standardHeaders: 'draft-8', // draft-6: `RateLimit-*` headers; draft-7 & draft-8: combined `RateLimit` header\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers.\n});\n\nif (process.env.MODE !== 'development') {\n    app.use(limiter);\n}\nif (process.env.MODE === 'development') {\n    app.use(\n        cors({\n            origin: process.env.CORS_ORIGIN?.split(',')?.map((url) =>\n                url.trim()\n            ),\n            credentials: true,\n        })\n    );\n}\napp.use(bodyParser.json({ limit: '5MB' }));\napp.use(bodyParser.urlencoded({ limit: '5MB', extended: true }));\napp.use(cookieParser());\napp.use(express.json());\napp.disable('x-powered-by');\napp.set('trust proxy', 1);\napp.use(clientHandler);\n\napp.use('/files', express.static('../assets/files'));\n\napp.get('/', (_, res) => {\n    res.send('API running successfully!');\n});\napp.use('/api-docs', swaggerUI.serve, swaggerUI.setup(swaggerSpec));\n\napp.use(decryptPayload);\napp.use(logAccess);\napp.use(inputValidationMiddleware);\n\napp.use('/v1/user', userRoutes);\napp.use('/v1/security', securityRoutes);\napp.use('/v1/utils', utilRoutes);\n\napp.use(errorHandler);\n\nif (process.env.NODE_ENV !== 'test')\n    app.listen(port, () => {\n        console.log(`Server running on ${port}`);\n    });\n\nexport default app;\n"
  },
  {
    "filePath": "packages/backend/src/libraries/fileSystem.ts",
    "content": "import fs from 'fs';\nimport path from 'path';\n\nexport const readFileData = (_filePath: string): Promise<string> => {\n    const filePath = path.join(__dirname, _filePath);\n    return new Promise((resolve, reject) =>\n        fs.readFile(filePath, 'utf8', (metaError, data) => {\n            if (metaError) reject(metaError);\n            resolve(data);\n        })\n    );\n};\n"
  },
  {
    "filePath": "packages/backend/src/libraries/fileUpload.ts",
    "content": "import multer from 'multer';\nimport path from 'path';\n\n//\nexport const fileUpload = multer({\n    storage: multer.diskStorage({\n        destination: function (_, __, cb) {\n            cb(\n                null,\n                path.join(\n                    __dirname,\n                    process.env.MODE === 'development'\n                        ? '../../../assets/files'\n                        : '../assets/files'\n                )\n            );\n        },\n        filename: function (_, file, cb) {\n            cb(null, Date.now() + '-' + file.originalname);\n        },\n    }),\n    fileFilter: async (req, file, cb) => {\n        req.headers['content-type'] = 'application/json';\n        const filetypes = /jpg|jpeg|png|gif/;\n        const extname = filetypes.test(\n            path.extname(file.originalname).toLowerCase()\n        );\n        const mimetype = filetypes.test(file.mimetype);\n\n        if (mimetype && extname) {\n            return cb(null, true);\n        } else {\n            cb(new Error('Unsupported file'));\n        }\n    },\n}).single('file');\n"
  },
  {
    "filePath": "packages/backend/src/libraries/firebase.ts",
    "content": "import admin from 'firebase-admin';\nimport { getAuth } from 'firebase-admin/auth';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst serviceAccount = require(process.env.SERVICE_KEY_PATH!);\n\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n});\n\nexport { getAuth };\n"
  },
  {
    "filePath": "packages/backend/src/libraries/mail.ts",
    "content": "import nodemailer from 'nodemailer';\n\nconst configOptions = {\n    host: process.env.MAIL_HOST,\n    secure: process.env.MAIL_SECURE === 'true',\n    port: process.env.MAIL_PORT ? Number(process.env.MAIL_PORT!) : 587,\n    auth: {\n        user: process.env.MAIL_ADDRESS,\n        pass: process.env.MAIL_PWD,\n    },\n};\n\nexport const transporter = nodemailer.createTransport(configOptions);\n\nconst createTestTransporter = async () => {\n    const testAccount = await nodemailer.createTestAccount();\n\n    const configOptions = {\n        host: testAccount.smtp.host,\n        secure: testAccount.smtp.secure,\n        port: testAccount.smtp.port,\n        auth: {\n            user: testAccount.user,\n            pass: testAccount.pass,\n        },\n    };\n\n    return nodemailer.createTransport(configOptions);\n};\n\nexport const testTransporter = createTestTransporter();\n"
  },
  {
    "filePath": "packages/backend/src/libraries/otp.ts",
    "content": "// import { SNSClient, PublishCommand } from '@aws-sdk/client-sns';\n\nexport const sendOTP = async (PhoneNumber: string, otp: string) => {\n    // const params = {\n    //     Message: `Your OTP code is: ${otp}`,\n    //     PhoneNumber,\n    //     MessageAttributes: {\n    //         'AWS.SNS.SMS.SenderID': {\n    //             DataType: 'String',\n    //             StringValue: 'String',\n    //         },\n    //     },\n    // };\n\n    // const sns = new SNSClient({\n    //     region: process.env.AWS_REGION!,\n    //     credentials: {\n    //         accessKeyId: process.env.AWS_ACCESS_KEY!,\n    //         secretAccessKey: process.env.AWS_SECRET_KEY!,\n    //     },\n    // });\n\n    // const command = new PublishCommand(params);\n\n    // const message = await sns.send(command);\n\n    // return message;\n    return {};\n};\n"
  },
  {
    "filePath": "packages/backend/src/libraries/passwordGenerator.ts",
    "content": "import bcryptjs from 'bcryptjs';\n\nexport const generatePasswordHash: IGeneratePasswordHash = (password) => {\n    return new Promise((resolve, rejected) => {\n        bcryptjs.genSalt(10, (error, salt) => {\n            if (error) rejected(error);\n            bcryptjs.hash(password, salt, (passwordError, hash) => {\n                if (passwordError) rejected(passwordError);\n                resolve(hash);\n            });\n        });\n    });\n};\n\nexport const verifyPassword: IVerifyPassword = (\n    requestPassword,\n    dbPassword\n) => {\n    return new Promise((resolve) => {\n        bcryptjs.compare(requestPassword, dbPassword, (error, isMatch) => {\n            if (error) resolve(false);\n            resolve(isMatch);\n        });\n    });\n};\n\nexport type IGeneratePasswordHash = (password: string) => Promise<string>;\n\nexport type IVerifyPassword = (\n    password: string,\n    requestPassword: string\n) => Promise<boolean>;\n"
  },
  {
    "filePath": "packages/backend/src/libraries/renderer.ts",
    "content": "import ejs from 'ejs';\n\nexport const renderHTML = (\n    template: string,\n    data: Record<string, string | number>\n) => ejs.render(template, data);\n"
  },
  {
    "filePath": "packages/backend/src/libraries/tokenGenerator.ts",
    "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport jwt from 'jsonwebtoken';\n\n//\nexport const verifyToken: IVerifyToken = (token: string) => {\n    return new Promise((resolve, reject) => {\n        jwt.verify(\n            token,\n            process.env.SECRET_KEY!,\n            async (err, payload: any) => {\n                if (err) reject(err);\n                resolve(payload);\n            }\n        );\n    });\n};\n\nexport const generateTokenByRefreshToken: IGenerateRefreshToken = (token) => {\n    return new Promise((resolve) => {\n        verifyToken(token).then((result) => {\n            const token = generateToken({\n                ...result,\n            });\n            resolve(token);\n        });\n    });\n};\n\nexport const generateToken: IGenerateToken = (data, verification = false) => {\n    const { exp: _, iat: __, ...payload } = data;\n    const token = jwt.sign(payload, process.env.SECRET_KEY!, {\n        expiresIn: verification\n            ? +process.env.EXPIRES_IN!\n            : +process.env.REFRESH_TOKEN_EXPIRES_IN!,\n    });\n    return token;\n};\n\nexport type IVerifyToken = (token: string) => Promise<Record<string, any>>;\n\nexport type IGenerateToken = (\n    data: Record<string, any>,\n    verification?: boolean\n) => string;\n\nexport type IGenerateRefreshToken = (token: string) => Promise<string>;\n"
  },
  {
    "filePath": "packages/backend/src/repository/security.ts",
    "content": "import { executeKeysQuery } from '../../src/handler/db.ts';\n\n//\nexport const addKeyPairRepo = async ({\n    clientId,\n    userId,\n    publicKey,\n    privateKey,\n    createdAt,\n}: Record<string, string>) => {\n    const query = `INSERT INTO keyPair (clientId, userId, publicKey, privateKey, createdAt) VALUES (?, ?, ?, ?, ?)`;\n    const queryResponse = await executeKeysQuery(query, [\n        clientId,\n        userId,\n        publicKey,\n        privateKey,\n        createdAt,\n    ]);\n\n    return queryResponse.insertId;\n};\n\nexport const getKeysRepo = async (clientId: string) => {\n    const query = `SELECT * FROM keyPair WHERE clientId = ?`;\n    const queryResponse = await executeKeysQuery(query, [clientId]);\n\n    return queryResponse[0];\n};\n\nexport const getKeysByUserIdRepo = async (userId: string) => {\n    const query = `SELECT * FROM keyPair WHERE userId = ?`;\n    const queryResponse = await executeKeysQuery(query, [userId]);\n\n    return queryResponse[0];\n};\n\nexport const updateClientUserId = async (clientId: string, userId: string) => {\n    const query = `UPDATE keyPair SET userId=? WHERE clientId=?`;\n\n    const queryResponse = await executeKeysQuery(query, [userId, clientId]);\n\n    return queryResponse.affectedRows;\n};\n"
  },
  {
    "filePath": "packages/backend/src/repository/user.ts",
    "content": "import { executeQuery } from '../../src/handler/db.ts';\n\nexport const getUserByIDandSecretKeyRepo = async (\n    userId: string,\n    secretKey: string\n) => {\n    const query = `CALL GetUserByIDandSecretKey(?, ?)`;\n    const queryResponse = await executeQuery(query, [userId, secretKey]);\n    return queryResponse[0][0]; // First result set, first row\n};\n\nexport const createUserRepo = async ({\n    userId,\n    name,\n    email,\n    phoneNumber,\n    profileURL,\n    passwordHash,\n    providerId,\n    secretKey,\n}: IUser) => {\n    const query = `CALL CreateUser(?, ?, ?, ?, ?, ?, ?, ?, @insertId)`;\n    const queryResponse = await executeQuery(query, [\n        userId,\n        name,\n        email,\n        phoneNumber,\n        profileURL,\n        passwordHash,\n        providerId,\n        secretKey,\n    ]);\n    return queryResponse[0][0].insertId; // First result set contains insertId\n};\n\nexport const updateEmailVerification = async (email: string) => {\n    const query = `CALL UpdateEmailVerification(?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [email]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const updateVerificationOTP = async (\n    phoneNumber: string,\n    otp: string\n) => {\n    const query = `CALL UpdateVerificationOTP(?, ?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [phoneNumber, otp]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const updateVerificationRepo = async (\n    source: string,\n    type: 'email' | 'phone',\n    otp?: string\n) => {\n    const query = `CALL UpdateVerification(?, ?, ?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [\n        source,\n        type,\n        otp || null,\n    ]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const getUserBySourceRepo = async ({\n    email,\n    phoneNumber,\n}: {\n    email?: string;\n    phoneNumber?: string;\n}) => {\n    const query = `CALL GetUserBySource(?, ?)`;\n    const queryResponse = await executeQuery(query, [\n        email || null,\n        phoneNumber || null,\n    ]);\n    return queryResponse[0][0]; // First result set, first row\n};\n\nexport const checkUserVerifiedRepo = async (source: string) => {\n    const query = `CALL CheckUserVerified(?, @count)`;\n    const queryResponse = await executeQuery(query, [source]);\n    return queryResponse[0][0].count; // First result set contains count\n};\n\nexport const getUserByIdRepo = async (userId: string) => {\n    const query = `CALL GetUserById(?)`;\n    const queryResponse = await executeQuery(query, [userId]);\n    return queryResponse[0][0]; // First result set, first row\n};\n\nexport const getLocalUserByIdRepo = async (userId: string) => {\n    const query = `CALL GetLocalUserById(?)`;\n    const queryResponse = await executeQuery(query, [userId]);\n    return queryResponse[0][0]; // First result set, first row\n};\n\nexport const updateResetPasswordKeyRepo = async (\n    resetPasswordKey: string,\n    userId: string\n) => {\n    const query = `CALL UpdateResetPasswordKey(?, ?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [resetPasswordKey, userId]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const updatePasswordByKeyRepo = async (\n    passwordHash: string,\n    userId: string,\n    secretKey: string,\n    resetPasswordKey: string\n) => {\n    const query = `CALL UpdatePasswordByKey(?, ?, ?, ?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [\n        passwordHash,\n        userId,\n        secretKey,\n        resetPasswordKey,\n    ]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const updatePasswordRepo = async (\n    passwordHash: string,\n    userId: string\n) => {\n    const query = `CALL UpdatePassword(?, ?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [passwordHash, userId]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const increaseFailedAttemptRepo = async (userId: string) => {\n    const query = `CALL IncreaseFailedAttempt(?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [userId]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\nexport const updateSecretKeyRepo = async (\n    secretKey: string,\n    userId: string\n) => {\n    const query = `CALL UpdateSecretKey(?, ?, @affectedRows)`;\n    const queryResponse = await executeQuery(query, [secretKey, userId]);\n    return queryResponse[0][0].affectedRows; // First result set contains affectedRows\n};\n\n// Note: updateUserRepo remains unchanged as it doesn't use a stored procedure\nexport const updateUserRepo = async (userId: string, user: Partial<IUser>) => {\n    const query = `UPDATE users SET ${Object.entries(user)\n        .map(\n            ([key, value]) =>\n                `${key}=${key === 'lastLoginTime' ? 'CURRENT_TIMESTAMP' : `'${value}'`}`\n        )\n        .join(', ')} WHERE userId=? AND isDeleted=0`;\n    const queryResponse = await executeQuery(query, [userId]);\n    return queryResponse.affectedRows; // Direct result from UPDATE\n};\n\nexport interface IUser {\n    userId: string;\n    name: string | null;\n    email: string | null;\n    phoneNumber: string | null;\n    profileURL: string | null;\n    passwordHash: string | null;\n    providerId: string | null;\n    secretKey: string;\n}\n"
  },
  {
    "filePath": "packages/backend/src/routes/security.ts",
    "content": "import express from 'express';\n\n//\nimport { tokenChecker } from '../../src/handler/tokenVerification';\nimport {\n    getClientPublicKeyController,\n    getKeyPairsController,\n} from '../../src/controller/security';\n\n//\nconst router = express.Router();\n\nrouter.route('/keyPair').get((req, res, next) => {\n    const optional = true;\n    tokenChecker(req, res, next, optional);\n}, getKeyPairsController);\n\nrouter.route('/client-publicKey').get(getClientPublicKeyController);\n\nexport default router;\n"
  },
  {
    "filePath": "packages/backend/src/routes/user.ts",
    "content": "import express from 'express';\nimport {\n    changePasswordController,\n    createUserController,\n    forgotPasswordController,\n    loginController,\n    userController,\n    requestVerifyController,\n    logoutController,\n    verifyEmailController,\n    verifyPhoneController,\n    updateUserController,\n    updatePasswordController,\n} from '../../src/controller/user';\nimport {\n    headerTokenChecker,\n    tokenChecker,\n} from '../../src/handler/tokenVerification';\nimport { validator } from '../../src/handler/validator';\nimport {\n    createUserValidation,\n    emailValidation,\n    loginValidation,\n    passwordValidation,\n    phoneVerificationValidation,\n    requestVerificationValidation,\n    updatePasswordValidation,\n    updateUserValidation,\n} from '../../src/validations/user';\n\n//\nconst router = express.Router();\n\n// Create user API\n/**\n * @swagger\n * /v1/user/create:\n *   post:\n *     summary: Create a new user\n *     description: Creates a new user with the provided details. Either a password or providerId must be specified.\n *     tags: [Users]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               name:\n *                 type: string\n *               password:\n *                 type: string\n *               providerId:\n *                 type: string\n *               profileURL:\n *                 type: string\n *               email:\n *                 type: string\n *             example:\n *               name: \"John Doe\"\n *               password: \"securepassword123\"\n *               providerId: \"google12345\"\n *               profileURL: \"https://example.com/profile.jpg\"\n *               email: \"john.doe@example.com\"\n *     responses:\n *       200:\n *         description: User created successfully\n *       400:\n *         description: Bad request - Validation failed\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/create')\n    .post(validator(createUserValidation), createUserController);\n\n// User login API\n/**\n * @swagger\n * /v1/user/login:\n *   post:\n *     summary: User login\n *     description: Authenticates a user with their email and password.\n *     tags: [Users]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *               password:\n *                 type: string\n *             example:\n *               email: \"john.doe@example.com\"\n *               password: \"securepassword123\"\n *     responses:\n *       200:\n *         description: Login successful\n *       400:\n *         description: Bad request - Validation failed\n *       401:\n *         description: Unauthorized - Invalid credentials\n *       500:\n *         description: Internal server error\n */\nrouter.route('/login').post(validator(loginValidation), loginController);\n\n// Get user profile API\n/**\n * @swagger\n * /v1/user/profile:\n *   get:\n *     summary: Get user profile\n *     description: Retrieves the authenticated user's profile information. Requires a valid authentication token stored in a cookie.\n *     tags: [Users]\n *     security:\n *       - cookieAuth: []\n *     responses:\n *       200:\n *         description: User profile retrieved successfully\n *       401:\n *         description: Unauthorized - Missing or invalid token\n *       500:\n *         description: Internal server error\n */\nrouter.route('/profile').get(tokenChecker, userController);\n\n// Request email verification mail\n/**\n * @swagger\n * /v1/user/request-verification:\n *   post:\n *     summary: Request verification\n *     description: Requests verification for a user by providing either an email or phone number.\n *     tags: [Users]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *               phoneNumber:\n *                 type: string\n *             example:\n *               email: \"john.doe@example.com\"\n *               phoneNumber: \"+1234567890\"\n *     responses:\n *       200:\n *         description: Verification request sent successfully\n *       400:\n *         description: Bad request - Validation failed\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/request-verification')\n    .post(validator(requestVerificationValidation), requestVerifyController);\n\n// Email and Phone verification API\n/**\n * @swagger\n * /v1/user/verify-email:\n *   get:\n *     summary: Verify email\n *     description: Verifies a user's email address using a token provided in the Authorization header.\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Email verified successfully\n *       401:\n *         description: Unauthorized - Missing or invalid token\n *       500:\n *         description: Internal server error\n */\nrouter.route('/verify-email').get(headerTokenChecker, verifyEmailController);\n\n/**\n * @swagger\n * /v1/user/verify-phone:\n *   post:\n *     summary: Verify phone number\n *     description: Verifies a user's phone number using an OTP and phone number.\n *     tags: [Users]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               otp:\n *                 type: string\n *               phoneNumber:\n *                 type: string\n *             example:\n *               otp: \"123456\"\n *               phoneNumber: \"+1234567890\"\n *     responses:\n *       200:\n *         description: Phone number verified successfully\n *       400:\n *         description: Bad request - Validation failed\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/verify-phone')\n    .post(validator(phoneVerificationValidation), verifyPhoneController);\n\n// Generate reset password link API\n/**\n * @swagger\n * /v1/user/request-reset-password:\n *   post:\n *     summary: Request password reset\n *     description: Initiates a password reset process by sending a reset link or code to the provided email.\n *     tags: [Users]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *             example:\n *               email: \"john.doe@example.com\"\n *     responses:\n *       200:\n *         description: Password reset request sent successfully\n *       400:\n *         description: Bad request - Validation failed\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/request-reset-password')\n    .post(validator(emailValidation), forgotPasswordController);\n\n// Change password API\n/**\n * @swagger\n * /v1/user/change-password:\n *   post:\n *     summary: Change user password\n *     description: Changes the user's password using a new password provided in the request body. Requires a valid authentication token in the Authorization header.\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               password:\n *                 type: string\n *             example:\n *               password: \"newsecurepassword123\"\n *     responses:\n *       200:\n *         description: Password changed successfully\n *       400:\n *         description: Bad request - Validation failed\n *       401:\n *         description: Unauthorized - Missing or invalid token\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/change-password')\n    .post(\n        headerTokenChecker,\n        validator(passwordValidation),\n        changePasswordController\n    );\n\n/**\n * @swagger\n * /v1/user/update-password:\n *   put:\n *     summary: Update user password\n *     description: Updates the user's password by verifying the current password and setting a new one. Requires a valid authentication token stored in a cookie.\n *     tags: [Users]\n *     security:\n *       - cookieAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               currentPassword:\n *                 type: string\n *               password:\n *                 type: string\n *             example:\n *               currentPassword: \"oldsecurepassword123\"\n *               password: \"newsecurepassword123\"\n *     responses:\n *       200:\n *         description: Password updated successfully\n *       400:\n *         description: Bad request - Validation failed\n *       401:\n *         description: Unauthorized - Missing or invalid token\n *       403:\n *         description: Forbidden - Current password incorrect\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/update-password')\n    .put(\n        tokenChecker,\n        validator(updatePasswordValidation),\n        updatePasswordController\n    );\n\n// Logout user\n/**\n * @swagger\n * /v1/user/logout:\n *   post:\n *     summary: Log out user\n *     description: Logs out the authenticated user by invalidating their session or token. Requires a valid authentication token stored in a cookie.\n *     tags: [Users]\n *     security:\n *       - cookieAuth: []\n *     responses:\n *       200:\n *         description: Logout successful\n *       401:\n *         description: Unauthorized - Missing or invalid token\n *       500:\n *         description: Internal server error\n */\nrouter.route('/logout').post(tokenChecker, logoutController);\n\n// Update profile\n/**\n * @swagger\n * /v1/user/update:\n *   put:\n *     summary: Update user profile\n *     description: Updates the authenticated user's profile information, such as name or profile URL. Requires a valid authentication token stored in a cookie.\n *     tags: [Users]\n *     security:\n *       - cookieAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               name:\n *                 type: string\n *               profileURL:\n *                 type: string\n *             example:\n *               name: \"John Doe\"\n *               profileURL: \"https://example.com/newprofile.jpg\"\n *     responses:\n *       200:\n *         description: User profile updated successfully\n *       400:\n *         description: Bad request - Validation failed\n *       401:\n *         description: Unauthorized - Missing or invalid token\n *       500:\n *         description: Internal server error\n */\nrouter\n    .route('/update')\n    .put(tokenChecker, validator(updateUserValidation), updateUserController);\n\nexport default router;\n"
  },
  {
    "filePath": "packages/backend/src/routes/utils.ts",
    "content": "import express from 'express';\n\n//\nimport { fileUpload } from '../../src/libraries/fileUpload';\nimport { decryptPayload, filePathScanner } from '../../src/handler/security';\nimport { uploadFileController } from '../../src/controller/utils';\nimport { tokenChecker } from '../../src/handler/tokenVerification';\n\n//\nconst router = express.Router();\n\n//\nrouter\n    .route('/file-upload')\n    .post(\n        fileUpload,\n        decryptPayload,\n        tokenChecker,\n        filePathScanner,\n        uploadFileController\n    );\n\nexport default router;\n"
  },
  {
    "filePath": "packages/backend/src/services/security.ts",
    "content": "import { generateSecretKey } from '../../src/utils';\nimport { IService } from '../../src/handler/middleware';\nimport {\n    addKeyPairRepo,\n    getKeysByUserIdRepo,\n    getKeysRepo,\n} from '../../src/repository/security';\nimport { createError } from '../../src/handler/error';\n\n//\nimport messages from '../../src/utils/messages';\n\n//\nexport const getKeyPairService: IService<any> = async (data) => {\n    let clientId = data.browserId;\n    const userId = data.userId || null;\n\n    if (clientId && !userId) {\n        if (!(global as any).userKeys[clientId]) {\n            const keyPair = await getKeysRepo(clientId);\n            if (keyPair)\n                (global as any).userKeys[clientId] = {\n                    publicKey: Uint8Array.from(\n                        Buffer.from(keyPair.publicKey, 'base64')\n                    ),\n                    privateKey: Uint8Array.from(\n                        Buffer.from(keyPair.privateKey, 'base64')\n                    ),\n                    createdAt: +keyPair.createdAt,\n                };\n        }\n    } else if (userId) {\n        (global as any).userKeys[clientId] = null;\n        const keyPair = await getKeysByUserIdRepo(userId);\n        if (keyPair) {\n            clientId = keyPair.clientId;\n            (global as any).userKeys[clientId] = {\n                publicKey: Uint8Array.from(\n                    Buffer.from(keyPair.publicKey, 'base64')\n                ),\n                privateKey: Uint8Array.from(\n                    Buffer.from(keyPair.privateKey, 'base64')\n                ),\n                createdAt: +keyPair.createdAt,\n            };\n        }\n    }\n\n    if ((global as any).userKeys[clientId]) {\n        const keyPair = (global as any).userKeys[clientId];\n\n        const publicKeyString = btoa(\n            String.fromCharCode(...new Uint8Array(keyPair.publicKey))\n        );\n        const privateKeyString = btoa(\n            String.fromCharCode(...new Uint8Array(keyPair.privateKey))\n        );\n\n        return {\n            clientId,\n            publicKey: publicKeyString,\n            privateKey: privateKeyString,\n        };\n    }\n\n    const keyPair = await crypto.subtle.generateKey(\n        {\n            name: 'RSA-OAEP',\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: 'SHA-256',\n        },\n        true,\n        ['encrypt', 'decrypt']\n    );\n\n    const publicKey = await crypto.subtle.exportKey('spki', keyPair.publicKey);\n    const privateKey = await crypto.subtle.exportKey(\n        'pkcs8',\n        keyPair.privateKey\n    );\n\n    clientId = data.userId ? `CLNT-${generateSecretKey()}` : data.browserId;\n\n    const createdAt = Date.now();\n\n    const privateKeyString = btoa(\n        String.fromCharCode(...new Uint8Array(privateKey))\n    );\n    const publicKeyString = btoa(\n        String.fromCharCode(...new Uint8Array(publicKey))\n    );\n    await addKeyPairRepo({\n        clientId,\n        userId,\n        publicKey: publicKeyString,\n        privateKey: privateKeyString,\n        createdAt: createdAt.toString(),\n    });\n\n    (global as any).userKeys[clientId] = { publicKey, privateKey, createdAt };\n\n    return {\n        clientId,\n        publicKey: publicKeyString,\n        privateKey: privateKeyString,\n    };\n};\n\nexport const getClientPublicKeyService: IService<string> = async (data) => {\n    const result = await getKeysRepo(data.clientId);\n\n    if (!result) throw createError(404, messages.responses.notFound);\n\n    return result.publicKey;\n};\n\n// Utils\nexport const getPrivateKey = async (clientId: string) => {\n    if (!(global as any).userKeys[clientId]?.privateKey) {\n        const { publicKey, privateKey, createdAt } =\n            await getKeysRepo(clientId);\n        (global as any).userKeys[clientId] = {\n            publicKey: Uint8Array.from(Buffer.from(publicKey, 'base64')),\n            privateKey: Uint8Array.from(Buffer.from(privateKey, 'base64')),\n            createdAt: +createdAt,\n        };\n    }\n\n    const privateKey = (global as any).userKeys[clientId]?.privateKey;\n\n    if (!privateKey) return;\n\n    const privateKeyObject = await crypto.subtle.importKey(\n        'pkcs8',\n        privateKey,\n        { name: 'RSA-OAEP', hash: 'SHA-256' },\n        false,\n        ['decrypt']\n    );\n\n    return privateKeyObject;\n};\n"
  },
  {
    "filePath": "packages/backend/src/services/user.ts",
    "content": "import { IService } from '../../src/handler/middleware';\nimport { createError } from '../../src/handler/error';\nimport {\n    generatePasswordHash,\n    verifyPassword,\n} from '../../src/libraries/passwordGenerator';\nimport { generateToken } from '../../src/libraries/tokenGenerator';\nimport {\n    checkUserVerifiedRepo,\n    createUserRepo,\n    getLocalUserByIdRepo,\n    getUserByIdRepo,\n    getUserBySourceRepo,\n    increaseFailedAttemptRepo,\n    IUser,\n    updateEmailVerification,\n    updatePasswordByKeyRepo,\n    updatePasswordRepo,\n    updateResetPasswordKeyRepo,\n    updateSecretKeyRepo,\n    updateUserRepo,\n    updateVerificationOTP,\n    updateVerificationRepo,\n} from '../../src/repository/user';\nimport { generateSecretKey, generateId } from '../../src/utils';\nimport { sendMail } from '../../src/utils/mail';\nimport { sendOTP } from '../../src/libraries/otp';\n\n//\nimport messages from '../utils/messages';\n\n//\nexport const createUserService: IService<string> = async (data) => {\n    if (data.phoneNumber) {\n        const userPhone = await getUserBySourceRepo({\n            phoneNumber: data.phoneNumber,\n        });\n\n        if (userPhone)\n            throw createError(400, messages.responses.userPhoneAlreadyExist);\n    }\n\n    const userEmail = await getUserBySourceRepo({\n        email: data.email,\n    });\n\n    if (userEmail)\n        throw createError(400, messages.responses.userEmailAlreadyExist);\n\n    // const verificationResult = await updateVerificationRepo(\n    //     data.phoneNumber,\n    //     'phone',\n    //     data.otp\n    // );\n\n    // if (!verificationResult)\n    //     throw createError(400, messages.responses.otpVerificationFailed);\n\n    const userId = `USR-${generateId()}`;\n    const secretKey = generateSecretKey();\n    let passwordHash = null;\n    if (data.password) {\n        passwordHash = await generatePasswordHash(data.password);\n    }\n\n    const result = await createUserRepo({\n        userId,\n        secretKey,\n        passwordHash,\n        name: data.name,\n        email: data.email,\n        phoneNumber: data.phoneNumber,\n        profileURL: data.profileURL,\n        providerId: data.providerId,\n    });\n\n    if (!result) throw createError(400, messages.responses.failedToCreateUser);\n\n    // const payload = {\n    //     userId,\n    //     secretKey,\n    // };\n\n    // const newRefreshToken = await generateToken({\n    //     ...payload,\n    //     lastUsed: Date.now(),\n    // });\n\n    // const newAccessToken = await generateToken(payload);\n\n    // return { refreshToken: newRefreshToken, accessToken: newAccessToken };\n\n    return messages.responses.userCreated;\n};\n\nexport const loginService: IService<{\n    refreshToken: string;\n    accessToken: string;\n}> = async (data) => {\n    const user = await getUserBySourceRepo({\n        email: data.email,\n    });\n\n    if (!user) throw createError(400, messages.responses.userNotFound);\n\n    if (!user.passwordHash)\n        throw createError(400, messages.responses.noPasswordAuth);\n\n    if (user.isSuspended) {\n        const suspendTime = +process.env.ACCOUNT_SUSPEND_MINUTE! || 5;\n        const suspendedAt = new Date(user.suspendedAt).getTime();\n        const now = Date.now();\n        const timeDiff = Math.floor((now - suspendedAt) / (1000 * 60));\n        const remainingTime = suspendTime - timeDiff;\n        if (timeDiff < suspendTime)\n            throw createError(\n                400,\n                messages.responses.accountSuspended(remainingTime)\n            );\n    }\n\n    const isPasswordVerified = await verifyPassword(\n        data.password,\n        user.passwordHash?.toString()\n    );\n    if (!isPasswordVerified) {\n        await increaseFailedAttemptRepo(user.userId);\n        throw createError(400, messages.responses.invalidCred);\n    }\n\n    const isVerified = await checkUserVerified(user);\n    if (!isVerified) throw createError(400, messages.responses.unverifiedUser);\n\n    const payload = {\n        userId: user.userId,\n        secretKey: user.secretKey,\n    };\n\n    const newRefreshToken = await generateToken({\n        ...payload,\n        lastUsed: Date.now(),\n    });\n\n    const newAccessToken = await generateToken(payload);\n\n    return { refreshToken: newRefreshToken, accessToken: newAccessToken };\n};\n\nexport const getUserService: IService<Record<string, string>> = async (\n    data\n) => {\n    const userDetail = await getUserByIdRepo(data.userId);\n    return userDetail;\n};\n\nexport const requestVerificationService: IService<string> = async (data) => {\n    const response = { email: '', phoneNumber: '' };\n    const user = await getUserBySourceRepo({\n        email: data.email,\n    });\n    if (data.email) {\n        const verification = true;\n\n        const result = await updateEmailVerification(data.email);\n\n        if (!result) throw createError(400, messages.responses.mailFailed);\n\n        const verificationToken = await generateToken(\n            {\n                userId: user.userId,\n                email: data.email,\n            },\n            verification\n        );\n        const emailVerificationLink = `${process.env.PROTOCOL}://${process.env.DOMAIN}/${process.env.VERIFICATION_URL}${verificationToken}`;\n\n        await sendMail(\n            `${process.env.MAIN_PATH}/templates/verification.ejs`,\n            {\n                title: 'Email verification',\n                name: user.name,\n                verificationLink: emailVerificationLink,\n            },\n            {\n                to: user.email,\n                subject: `Welcome to ${process.env.APP_NAME}`,\n            }\n        );\n\n        response.email =\n            process.env.MODE === 'development'\n                ? verificationToken\n                : messages.responses.mailSent;\n    }\n    if (data.phoneNumber) {\n        const otp = Math.random().toString().substring(2, 8);\n\n        if (process.env.MODE !== 'development') {\n            const res = await sendOTP(data.phoneNumber, otp);\n\n            if (!res) throw createError(400, messages.responses.otpFailed);\n        }\n\n        const result = await updateVerificationOTP(data.phoneNumber, otp);\n\n        if (!result) throw createError(400, messages.responses.otpFailed);\n\n        response.phoneNumber =\n            process.env.MODE === 'development'\n                ? otp\n                : messages.responses.otpSent;\n    }\n    return Object.values(response).join(' ').trim();\n};\n\nexport const verificationEmailService = async (payload: {\n    userId: string;\n    email: string;\n}) => {\n    await updateVerificationRepo(payload.email, 'email');\n\n    return messages.responses.verified;\n};\n\nexport const verificationPhoneService = async (payload: {\n    phoneNumber: string;\n    otp: string;\n}) => {\n    await updateVerificationRepo(payload.phoneNumber, 'phone', payload.otp);\n\n    return messages.responses.verified;\n};\n\nexport const forgotPasswordService: IService<string> = async (data) => {\n    const user = await getUserBySourceRepo({\n        email: data.email,\n    });\n\n    if (!user) throw createError(400, messages.responses.userNotFound);\n\n    const isVerified = await checkUserVerified(user);\n    if (!isVerified) throw createError(400, messages.responses.unverifiedUser);\n\n    const verification = true;\n    const resetPasswordKey = generateSecretKey();\n    const token = await generateToken(\n        {\n            userId: user.userId,\n            resetPasswordKey,\n        },\n        verification\n    );\n\n    const result = await updateResetPasswordKeyRepo(\n        resetPasswordKey,\n        user.userId\n    );\n\n    if (!result) throw createError(400, messages.responses.failed);\n\n    const resetPasswordLink = `${process.env.PROTOCOL}://${process.env.DOMAIN}/${process.env.RESET_PASSWORD_URL}${token}`;\n\n    await sendMail(\n        `${process.env.MAIN_PATH}/templates/reset-password.ejs`,\n        {\n            title: 'Reset your password',\n            name: user.name,\n            resetLink: resetPasswordLink,\n        },\n        {\n            to: user.email,\n            subject: 'Reset your password',\n        }\n    );\n\n    return process.env.MODE === 'development'\n        ? token\n        : messages.responses.mailSent;\n};\n\nexport const changePasswordService: IService<string> = async (data) => {\n    const user = await getLocalUserByIdRepo(data.userId);\n    const secretKey = generateSecretKey();\n\n    if (!user) throw createError(400, messages.responses.userNotFound);\n\n    const isPasswordVerified = await verifyPassword(\n        data.password,\n        user.passwordHash?.toString()\n    );\n\n    if (isPasswordVerified)\n        throw createError(400, messages.responses.previousPasswordError);\n\n    const passwordHash = await generatePasswordHash(data.password);\n\n    const result = await updatePasswordByKeyRepo(\n        passwordHash,\n        user.userId,\n        secretKey,\n        data.resetPasswordKey\n    );\n\n    if (!result)\n        throw createError(400, messages.responses.passwordChangeFailed);\n\n    return messages.responses.passwordChanged;\n};\n\nexport const updatePasswordService: IService<string> = async (data) => {\n    const user = await getLocalUserByIdRepo(data.userId);\n\n    if (!user) throw createError(400, messages.responses.userNotFound);\n\n    const isPasswordVerified = await verifyPassword(\n        data.currentPassword,\n        user.passwordHash?.toString()\n    );\n\n    if (!isPasswordVerified)\n        throw createError(400, messages.responses.passwordDoesNotMatch);\n\n    const passwordHash = await generatePasswordHash(data.password);\n\n    const result = await updatePasswordRepo(passwordHash, user.userId);\n\n    if (!result)\n        throw createError(400, messages.responses.passwordChangeFailed);\n\n    return messages.responses.passwordChanged;\n};\n\nexport const logoutService: IService<string> = async (data) => {\n    const secretKey = generateSecretKey();\n\n    await updateSecretKeyRepo(secretKey, data.userId);\n\n    return '';\n};\n\nexport const updateUserService: IService<string> = async (data) => {\n    const result = await updateUserRepo(data.userId, {\n        name: data.name,\n        profileURL: data.profileURL,\n    });\n\n    if (!result) throw createError(400, messages.responses.userUpdateFailed);\n\n    return messages.responses.userUpdated;\n};\n\n// Utils\nexport const checkUserVerified = async (user: IUser) => {\n    let emailVerified = false;\n    let phoneNumberVerified = false;\n\n    if (user.email) {\n        emailVerified = await checkUserVerifiedRepo(user.email);\n    }\n\n    if (user.phoneNumber) {\n        phoneNumberVerified = await checkUserVerifiedRepo(user.phoneNumber);\n    }\n\n    return emailVerified || phoneNumberVerified;\n};\n"
  },
  {
    "filePath": "packages/backend/src/swagger.ts",
    "content": "import swaggerJSDoc from 'swagger-jsdoc';\n\nconst swaggerDefinition = {\n    openapi: '3.0.0',\n    info: {\n        title: process.env.APP_NAME!,\n        version: '1.0.0',\n    },\n};\n\nconst options = {\n    swaggerDefinition,\n    apis: ['src/routes/*.ts', 'src/routes/*.js'],\n};\n\nexport const swaggerSpec = swaggerJSDoc(options);\n"
  },
  {
    "filePath": "packages/backend/src/utils/index.ts",
    "content": "export const generateId = () => {\n    return Array.from({ length: 32 }, () =>\n        Math.random().toString(36).charAt(2)\n    ).join('');\n};\n\nexport const generateSecretKey = () => {\n    return Math.random().toString(36).substring(2, 12);\n};\n"
  },
  {
    "filePath": "packages/backend/src/utils/mail.ts",
    "content": "import { logMail } from '../../src/handler/logger';\nimport { readFileData } from '../../src/libraries/fileSystem';\nimport { testTransporter, transporter } from '../../src/libraries/mail';\nimport { renderHTML } from '../../src/libraries/renderer';\n\nexport const sendMail: ISendMail = async (templatePath, data, config) => {\n    const mailConfigurations = {\n        from: process.env.APP_NAME,\n        ...config,\n    };\n    const template = await readFileData(templatePath);\n    mailConfigurations.html = renderHTML(template, {\n        ...data,\n        year: new Date().getFullYear(),\n        companyName: process.env.APP_NAME!,\n    });\n\n    const _transporter =\n        process.env.MODE === 'development' && testTransporter\n            ? await testTransporter\n            : transporter;\n\n    return new Promise((resolve) => {\n        _transporter.sendMail(mailConfigurations, (error, data) => {\n            logMail({ config, error, data });\n\n            if (error) throw error;\n            resolve(data);\n        });\n    });\n};\n\nexport type ISendMail = (\n    template: string,\n    data: Record<string, string | number>,\n    config: {\n        form?: string;\n        to?: string | string[];\n        bcc?: string | string[];\n        subject: string;\n        html?: string;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n"
  },
  {
    "filePath": "packages/backend/src/utils/messages.ts",
    "content": "export default {\n    responses: {\n        failedToCreateUser: 'User creation failed. Please try again later',\n        userCreated: 'User has been successfully created',\n        userNotFound: 'User not found',\n        userEmailAlreadyExist: 'An account with this email already exists',\n        userPhoneAlreadyExist:\n            'An account with this phone number already exists',\n        userUpdateFailed: 'Failed to update user details. Please try again',\n        userUpdated: 'User details updated successfully',\n        noPasswordAuth: 'Password authentication is not supported',\n        invalidCred: 'Invalid credentials. Please check and try again',\n        unverifiedUser: 'Your account has not been verified',\n        tokenNotFound: 'Authentication token is missing',\n        tokenExpired: 'Your session has expired. Please log in again',\n        unauthorized: 'You do not have permission to perform this action',\n        verified: 'Your account has been successfully verified',\n        passwordChanged: 'Password updated successfully',\n        passwordDoesNotMatch: 'Passwords do not match. Please try again',\n        passwordChangeFailed: 'Failed to update password. Please try again',\n        previousPasswordError:\n            'New password cannot be the same as the old password',\n        success: 'Operation completed successfully',\n        failed: 'Operation failed. Please try again',\n        expired: 'The requested resource has expired',\n        notFound: 'The requested resource was not found',\n        mailFailed: 'Failed to send email. Please try again',\n        mailSent: 'Email has been sent successfully!',\n        otpSent: 'OTP has been sent successfully!',\n        otpFailed: 'Failed to send OTP. Please try again',\n        otpVerificationFailed: 'OTP verification failed. Please try again',\n        keyExpired: 'KEY_EXPIRED',\n        invalidRequest: 'The request is invalid',\n        accountSuspended: (time: number) =>\n            `Your account has been suspended due to multiple invalid login attempts. Access will be restored in ${time} minutes.`,\n\n        harmfulContent: `Input contains potentially harmful content`,\n        harmfulFile: 'Harmful file detected',\n        fileNotFound: 'File not found',\n    },\n};\n"
  },
  {
    "filePath": "packages/backend/src/validations/user.ts",
    "content": "import * as yup from 'yup';\n\nexport const emailValidation = yup.object().shape({\n    email: yup\n        .string()\n        .email('Email must be valid')\n        .required('Email is required'),\n});\n\nexport const phoneValidation = yup.object().shape({\n    phoneNumber: yup.string().required('Phone number is required'),\n});\n\nexport const passwordValidation = yup.object().shape({\n    password: yup.string().required('Password is required'),\n});\n\nexport const requestVerificationValidation = yup\n    .object()\n    .shape({\n        email: yup.string().email('Email must be valid'),\n        phoneNumber: yup.string(),\n    })\n    .test(\n        'either-email-or-phoneNumber',\n        'Either email or phoneNumber is required',\n        (value) => {\n            const { email, phoneNumber } = value || {};\n            return !!email || !!phoneNumber;\n        }\n    );\n\nexport const updatePasswordValidation = yup\n    .object()\n    .shape({\n        currentPassword: yup.string().required('Current password is required'),\n    })\n    .concat(passwordValidation);\n\nexport const createUserValidation = yup\n    .object()\n    .shape({\n        name: yup.string().required('Name is required'),\n        password: yup.string(),\n        providerId: yup.string(),\n        profileURL: yup.string(),\n    })\n    .concat(emailValidation)\n    // .concat(phoneValidation)\n    .test(\n        'either-password-or-providerId',\n        'Either password or providerId is required',\n        (value) => {\n            const { password, providerId } = value || {};\n            return !!password || !!providerId;\n        }\n    );\n\nexport const updateUserValidation = yup.object().shape({\n    name: yup.string(),\n    profileURL: yup.string(),\n});\n\nexport const loginValidation = yup\n    .object()\n    .shape({\n        password: yup.string().required('Password is required'),\n    })\n    .concat(emailValidation);\n\nexport const phoneVerificationValidation = yup\n    .object()\n    .shape({\n        otp: yup.string().required('OTP is required'),\n    })\n    .concat(phoneValidation);\n\nexport const verificationRequestValidation =\n    emailValidation.concat(phoneValidation);\n\nexport const userIdValidation = yup.object().shape({\n    userId: yup.string().required('User ID is required'),\n});\n"
  },
  {
    "filePath": "packages/backend/tests/001_users.test.ts",
    "content": "import request from 'supertest';\nimport nodemailerMock from 'nodemailer-mock';\nimport app from 'src';\nimport { executeQuery, MYSQLConnection } from '../src/handler/db.ts';\nimport { user } from './data';\nimport { encrypt, waitForEmail } from './utils';\n\nlet clientId: string;\nlet storedPublicKey: string;\nlet accessToken: string = '';\nlet refreshToken: string = '';\nlet cookies: string = '';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nlet userDetail: Record<string, string> = {};\n\ndescribe('Users API', () => {\n    let payload = {};\n\n    beforeAll(async () => {\n        nodemailerMock.mock.reset();\n        await executeQuery('DELETE FROM users');\n        await executeQuery('DELETE FROM verifications');\n        await executeQuery('ALTER TABLE users AUTO_INCREMENT = 1');\n        await executeQuery('ALTER TABLE verifications AUTO_INCREMENT = 1');\n\n        // Fetch public key and set clientId\n        const response = await request(app).get('/v1/security/keyPair').send();\n        expect(response.status).toBe(200);\n        clientId =\n            (response.headers['set-cookie'] as unknown as string[])\n                .find((cookie: string) => cookie.startsWith('clientId='))\n                ?.split('=')[1]\n                ?.split(';')[0] || '';\n        expect(clientId).not.toBeNull();\n        storedPublicKey = response.body.publicKey;\n        expect(storedPublicKey).not.toBeNull();\n    });\n\n    afterAll(async () => {\n        await MYSQLConnection.closePool();\n    });\n\n    test('Create user', async () => {\n        let response = await request(app)\n            .post('/v1/user/create')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual(\n            'Either password or providerId is required'\n        );\n\n        payload = {\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/create')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Name is required');\n\n        payload = {\n            name: user.name,\n            email: user.name,\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/create')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Email must be valid');\n\n        payload = {\n            name: user.name,\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/create')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Email is required');\n\n        payload = {\n            email: user.email,\n            name: user.name,\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/create')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n    }, 10000);\n\n    test('Login user', async () => {\n        payload = {};\n        let response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Password is required');\n\n        payload = {\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Email is required');\n\n        payload = {\n            email: user.email,\n            password: user.name,\n        };\n        response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual(\n            'Invalid credentials. Please check and try again'\n        );\n\n        payload = {\n            email: user.email,\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual(\n            'Your account has not been verified'\n        );\n\n        payload = {\n            email: user.email,\n        };\n        response = await request(app)\n            .post('/v1/user/request-verification')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n\n        // After email verification\n        const verificationEmail = await waitForEmail();\n        const verificationToken = (verificationEmail.html as string)!.match(\n            /verify\\?token=([^\\s].*)\" class/\n        )![1];\n\n        response = await request(app)\n            .get('/v1/user/verify-email')\n            .set('Cookie', `clientId=${clientId}`)\n            .set('Authorization', `Bearer ${verificationToken}`)\n            .send();\n        expect(response.status).toBe(200);\n        expect(response.body.message).toEqual(\n            'Your account has been successfully verified'\n        );\n\n        payload = {\n            email: user.email,\n            password: user.password,\n        };\n\n        response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n        expect(response.body.data.accessToken).not.toBeNull();\n        expect(response.body.data.refreshToken).not.toBeNull();\n    }, 10000);\n\n    test('Forgot and Change password', async () => {\n        payload = {};\n        let response = await request(app)\n            .post('/v1/user/request-reset-password')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Email is required');\n\n        payload = {\n            email: user.email,\n        };\n        response = await request(app)\n            .post('/v1/user/request-reset-password')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n        expect(response.body.message).toEqual(\n            'Email has been sent successfully!'\n        );\n\n        const resetLinkEmail = await waitForEmail();\n\n        const resetToken = (resetLinkEmail.html as string)!.match(\n            /reset-password\\?token=(.*)\" class/\n        )![1];\n\n        payload = {};\n        response = await request(app)\n            .post('/v1/user/change-password')\n            .set('Cookie', `clientId=${clientId}`)\n            .set('Authorization', `Bearer ${resetToken}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Password is required');\n\n        payload = {\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/change-password')\n            .set('Cookie', `clientId=${clientId}`)\n            .set('Authorization', `Bearer ${resetToken}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual(\n            'New password cannot be the same as the old password'\n        );\n\n        payload = {\n            password: user.newPassword,\n        };\n        response = await request(app)\n            .post('/v1/user/change-password')\n            .set('Cookie', `clientId=${clientId}`)\n            .set('Authorization', `Bearer ${resetToken}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n        expect(response.body.message).toEqual('Password updated successfully');\n\n        payload = {\n            email: user.email,\n            password: user.password,\n        };\n        response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual(\n            'Invalid credentials. Please check and try again'\n        );\n    }, 10000);\n\n    test('Login and get profile', async () => {\n        payload = {\n            email: user.email,\n            password: user.newPassword,\n        };\n        let response = await request(app)\n            .post('/v1/user/login')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n        expect(response.body.data.accessToken).not.toBeNull();\n        expect(response.body.data.refreshToken).not.toBeNull();\n        accessToken = response.body.data.accessToken;\n        refreshToken = response.body.data.refreshToken;\n\n        response = await request(app)\n            .get('/v1/user/profile')\n            .set('Cookie', `clientId=${clientId}`)\n            .send();\n        expect(response.status).toBe(401);\n        expect(response.body.message).toEqual(\n            'You do not have permission to perform this action'\n        );\n\n        cookies = `clientId=${clientId};accessToken=${accessToken};refreshToken=${refreshToken}`;\n\n        response = await request(app)\n            .get('/v1/user/profile')\n            .set('Cookie', cookies)\n            .send();\n        expect(response.status).toBe(200);\n        userDetail = response.body.data.user;\n        expect(response.body.data.user.userId).not.toBeNull();\n        expect(response.body.data.user.email).toEqual(user.email);\n    }, 10000);\n\n    test('Login, Update profile', async () => {\n        payload = {\n            name: user.newName,\n        };\n\n        let response = await request(app)\n            .put('/v1/user/update')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(401);\n        expect(response.body.message).toEqual(\n            'You do not have permission to perform this action'\n        );\n\n        response = await request(app)\n            .put('/v1/user/update')\n            .set('Cookie', cookies)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n        expect(response.body.message).toEqual(\n            'User details updated successfully'\n        );\n    }, 10000);\n\n    test('Login and Update password', async () => {\n        payload = {};\n\n        let response = await request(app)\n            .put('/v1/user/update-password')\n            .set('Cookie', `clientId=${clientId}`)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(401);\n        expect(response.body.message).toEqual(\n            'You do not have permission to perform this action'\n        );\n\n        response = await request(app)\n            .put('/v1/user/update-password')\n            .set('Cookie', cookies)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Current password is required');\n\n        payload = {\n            currentPassword: user.newPassword,\n        };\n\n        response = await request(app)\n            .put('/v1/user/update-password')\n            .set('Cookie', cookies)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual('Password is required');\n\n        payload = {\n            currentPassword: user.password,\n            password: user.newPassword,\n        };\n\n        response = await request(app)\n            .put('/v1/user/update-password')\n            .set('Cookie', cookies)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(400);\n        expect(response.body.message).toEqual(\n            'Passwords do not match. Please try again'\n        );\n\n        payload = {\n            currentPassword: user.newPassword,\n            password: user.password,\n        };\n\n        response = await request(app)\n            .put('/v1/user/update-password')\n            .set('Cookie', cookies)\n            .send(await encrypt(payload, storedPublicKey));\n        expect(response.status).toBe(200);\n        expect(response.body.message).toEqual('Password updated successfully');\n    }, 10000);\n});\n"
  },
  {
    "filePath": "packages/backend/tests/data.ts",
    "content": "export const user = {\n    name: 'TestUser',\n    newName: 'TestUserUpdate',\n    email: 'TestUser@mail.com',\n    password: 'Dev@123456',\n    newPassword: 'Dev@1234567',\n};\n"
  },
  {
    "filePath": "packages/backend/tests/setup.ts",
    "content": "import nodemailer from 'nodemailer';\nimport nodemailerMock from 'nodemailer-mock';\n\njest.mock('nodemailer', () => ({\n    ...jest.requireActual('nodemailer'),\n    createTransport: jest.fn(),\n}));\n\n(nodemailer.createTransport as jest.Mock).mockReturnValue(\n    nodemailerMock.createTransport()\n);\n"
  },
  {
    "filePath": "packages/backend/tests/utils.ts",
    "content": "import nodemailerMock from 'nodemailer-mock';\nimport Mail from 'nodemailer/lib/mailer';\n\nexport const waitForEmail = (interval = 1000): Promise<Mail.Options> => {\n    return new Promise((resolve) => {\n        const checkMail = () => {\n            const sentEmails = nodemailerMock.mock.getSentMail();\n            const mail = sentEmails[0];\n            if (mail) {\n                nodemailerMock.mock.reset();\n                resolve(mail);\n            } else {\n                setTimeout(checkMail, interval);\n            }\n        };\n\n        checkMail();\n    });\n};\n\nexport const encrypt = async (\n    data: Record<string, string>,\n    storedPublicKey: string\n) => {\n    if (storedPublicKey) {\n        const binaryString = atob(storedPublicKey);\n        const binaryData = Uint8Array.from(binaryString, (char) =>\n            char.charCodeAt(0)\n        );\n        const publicKey = await crypto.subtle.importKey(\n            'spki',\n            binaryData,\n            { name: 'RSA-OAEP', hash: 'SHA-256' },\n            false,\n            ['encrypt']\n        );\n\n        const symmetricKey = await crypto.subtle.generateKey(\n            { name: 'AES-GCM', length: 256 },\n            true,\n            ['encrypt', 'decrypt']\n        );\n\n        const symmetricKeyRaw = await crypto.subtle.exportKey(\n            'raw',\n            symmetricKey\n        );\n\n        const encryptedSymmetricKey = await crypto.subtle.encrypt(\n            { name: 'RSA-OAEP' },\n            publicKey,\n            symmetricKeyRaw\n        );\n\n        const encoder = new TextEncoder();\n        const encodedData = encoder.encode(JSON.stringify(data));\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const encryptedData = await crypto.subtle.encrypt(\n            { name: 'AES-GCM', iv },\n            symmetricKey,\n            encodedData\n        );\n\n        const encryptedSymmetricKeyBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedSymmetricKey))\n        );\n        const encryptedDataBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedData))\n        );\n        const ivBase64 = btoa(String.fromCharCode(...iv));\n\n        return {\n            encryptedSymmetricKey: encryptedSymmetricKeyBase64,\n            encryptedData: encryptedDataBase64,\n            iv: ivBase64,\n        };\n    }\n    return data;\n};\n"
  },
  {
    "filePath": "packages/frontend-react/plugins/vite-svg-plugin.ts",
    "content": "import { Plugin } from 'vite';\nimport { readFileSync, readdirSync, statSync } from 'fs';\nimport { resolve, basename, join } from 'path';\n\nconst getAllSvgFiles = (dir: string): Record<string, string> => {\n    const svgMap: Record<string, string> = {};\n\n    function readDirectory(directory: string) {\n        readdirSync(directory).forEach((file) => {\n            const filePath = resolve(directory, file);\n            const stat = statSync(filePath);\n\n            if (stat.isDirectory()) {\n                // Recursively read subdirectory\n                readDirectory(filePath);\n            } else if (file.endsWith('.svg')) {\n                // Add SVG file to the map\n                const svgContent = readFileSync(filePath, 'utf-8');\n                const fileName = join(\n                    basename(directory),\n                    basename(file)\n                ).replace(/\\\\/g, '/');\n                svgMap[fileName] = svgContent;\n            }\n        });\n    }\n\n    readDirectory(dir);\n    return svgMap;\n};\n\nexport const svgIconsPlugin = (svgDir: string): Plugin => {\n    const svgMap = getAllSvgFiles(svgDir);\n\n    return {\n        name: 'vite-plugin-svg-icons',\n        resolveId(id) {\n            if (id === 'virtual:svg-icons') {\n                return id;\n            }\n        },\n        load(id) {\n            if (id === 'virtual:svg-icons') {\n                return `\n\t\t\t\t\texport function getSvgIcon(name) {\n\t\t\t\t\t\treturn ${JSON.stringify(svgMap)}[name];\n\t\t\t\t\t}\n\t\t\t\t`;\n            }\n        },\n    };\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/App.tsx",
    "content": "import { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\n//\nimport { ErrorBoundaryProvider } from 'src/providers/errorBoundary';\nimport { UserProvider } from 'src/providers/userContext';\nimport { ToastProvider } from 'src/providers/toast';\nimport RouteMain from 'src/app/router';\n\n//\nfunction App() {\n    useEffect(() => {\n        document.getElementsByTagName('title')[0]!.innerText =\n            import.meta.env.VITE_APP_NAME;\n\n        document.documentElement.style.setProperty(\n            '--scale-factor',\n            window.devicePixelRatio.toString()\n        );\n        if (window.devicePixelRatio >= 1 && window.innerWidth > 768) {\n            const scale = 1 / window.devicePixelRatio;\n            document.body.style.zoom = `${scale}`;\n        }\n    }, []);\n\n    return (\n        <BrowserRouter>\n            <ErrorBoundaryProvider>\n                <ToastProvider>\n                    <UserProvider>\n                        <RouteMain />\n                    </UserProvider>\n                </ToastProvider>\n            </ErrorBoundaryProvider>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/avatar.tsx",
    "content": "export const Avatar = ({\n    name,\n    image,\n    onClick,\n    className = 'p-2 w-10 h-10',\n}: {\n    name: string;\n    image?: string;\n    onClick?: () => void;\n    className?: string;\n}) => {\n    return (\n        <div\n            data-testid=\"avatar\"\n            className={`app-shadow rounded-full dark:bg-transparent bg-gray-100 flex items-center justify-center text-xl overflow-hidden ${className} ${image ? '!p-0' : ''}`}\n            onClick={onClick}\n        >\n            {image ? (\n                <img\n                    src={image}\n                    className=\"w-full h-full object-cover rounded-full\"\n                />\n            ) : (\n                <>\n                    {name\n                        .split(' ')\n                        .map((n) => n[0].toUpperCase())\n                        .slice(0, 2)\n                        .join('')}\n                </>\n            )}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/cookies.tsx",
    "content": "import { useEffect, useState } from 'react';\n\n//\nexport const Cookies = () => {\n    const [accepted, setAccept] = useState(false);\n\n    const acceptCookies = () => {\n        localStorage.setItem('cookiesAccepted', 'true');\n        setAccept(true);\n    };\n\n    useEffect(() => {\n        if (localStorage.getItem('cookiesAccepted') === 'true') setAccept(true);\n    }, [localStorage.getItem('cookiesAccepted')]);\n\n    return accepted ? (\n        <></>\n    ) : (\n        <div className=\"fixed bottom-4 left-4 right-4 md:left-auto md:right-4 bg-gray-800 text-white p-4 rounded-lg shadow-lg flex items-center justify-between\">\n            <p className=\"text-sm\">\n                We use cookies to enhance your experience. By using our app, you\n                agree to our cookie usage.\n            </p>\n            <button\n                onClick={acceptCookies}\n                className=\"ml-4 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded\"\n            >\n                Accept\n            </button>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/copy.tsx",
    "content": "import { ReactNode, useState } from 'react';\nimport SvgIcon from './svg';\nimport copy from 'copy-to-clipboard';\n\nexport const Copy = ({\n    content,\n    children,\n}: {\n    content: string;\n    children: ReactNode;\n}) => {\n    const [state, setState] = useState(false);\n\n    const contentCopy = () => {\n        copy(content);\n        setState(true);\n        setTimeout(() => {\n            setState(false);\n        }, 3000);\n    };\n\n    return (\n        <div className=\"flex items-center\">\n            {children}\n            <span onClick={contentCopy}>\n                {state ? (\n                    <SvgIcon\n                        path=\"/icons/svg/check.svg\"\n                        className=\"w-5 h-5 text-green-500\"\n                    />\n                ) : (\n                    <SvgIcon\n                        path=\"/icons/svg/copy.svg\"\n                        className=\"w-5 h-5 text-gray-500\"\n                    />\n                )}\n            </span>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/cropper.tsx",
    "content": "// import Cropper from 'cropperjs';\n// import { useEffect, useRef, useState } from 'react';\n// import SvgIcon from './svg';\n\nexport const CropperView = ({\n    image,\n    // close,\n    // callback,\n}: {\n    image: string;\n    close: () => void;\n    callback: (image: Blob) => void;\n}) => {\n    return <>{image}</>;\n    // const [cropper, setCropper] = useState<Cropper>();\n    // const imageRef = useRef<HTMLImageElement>(null); // Use a ref for the image element\n\n    // const cropImage = () => {\n    //     if (!cropper) return;\n    //     cropper.getCroppedCanvas().toBlob((blob) => {\n    //         if (blob) callback(blob); // Ensure blob is not null\n    //     });\n    // };\n\n    // useEffect(() => {\n    //     if (!imageRef.current) return;\n\n    //     const _cropper = new Cropper(imageRef.current, {\n    //         aspectRatio: 1,\n    //         viewMode: 1,\n    //         autoCropArea: 0.8,\n    //         dragMode: 'move',\n    //         cropBoxMovable: false,\n    //         cropBoxResizable: false,\n    //         zoomable: true,\n    //         center: true,\n    //         background: false,\n    //         modal: true,\n    //         minCropBoxHeight: 200,\n    //         minCropBoxWidth: 200,\n    //     });\n\n    //     setCropper(_cropper);\n    //     _cropper.replace(image);\n\n    //     // Cleanup on unmount\n    //     return () => {\n    //         _cropper.destroy();\n    //     };\n    // }, [image]); // Dependency array includes image\n\n    // return (\n    //     <div className=\"p-2 flex flex-col gap-5\">\n    //         <img\n    //             ref={imageRef}\n    //             id=\"cropperContainer\"\n    //             className=\"w-[250px] h-[200px] object-contain\"\n    //             src={image} // Set initial image source\n    //             alt=\"Cropper Image\"\n    //         />\n    //         <div className=\"flex flex-row gap-2 items-center w-full justify-between\">\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Zoom in\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.zoom(0.1)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/zoom-in.svg\" className=\"w-5 h-5\" />\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Zoom out\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.zoom(-0.1)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/zoom-out.svg\" className=\"w-5 h-5\" />\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Rotate left\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.rotate(-45)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/rotate.svg\" className=\"w-5 h-5\" />\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 title=\"Rotate right\"\n    //                 className=\"flex gap-2 whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-2 px-2.5 rounded-lg\"\n    //                 onClick={() => cropper?.rotate(45)}\n    //             >\n    //                 <SvgIcon path=\"/icons/svg/rotate.svg\" className=\"w-5 h-5 -scale-x-100\" />\n    //             </button>\n    //         </div>\n    //         <div className=\"flex justify-center gap-2 items-center\">\n    //             <button\n    //                 type=\"button\"\n    //                 className=\"flex gap-2 h-fit whitespace-nowrap bg-blue-400 items-center border-blue-600 border !text-white p-1 px-3 rounded-lg\"\n    //                 onClick={cropImage}\n    //             >\n    //                 Save\n    //             </button>\n    //             <button\n    //                 type=\"button\"\n    //                 className=\"flex gap-2 h-fit whitespace-nowrap bg-red-400 items-center border-red-600 border !text-white p-1 px-3 rounded-lg\"\n    //                 onClick={close}\n    //             >\n    //                 Cancel\n    //             </button>\n    //         </div>\n    //     </div>\n    // );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/dialog.tsx",
    "content": "import { ReactNode } from 'react';\nimport SvgIcon from './svg';\n\n//\nexport const DialogView = ({\n    open,\n    close,\n    children,\n    contentClass,\n    hideClose,\n}: {\n    children: ReactNode;\n    open: boolean;\n    close: () => void;\n    contentClass?: string;\n    hideClose?: boolean;\n}) => {\n    return (\n        <div\n            data-testid=\"DIALOG_BACKGROUND\"\n            className={`fixed top-0 left-1/2 -translate-x-1/2 no-scrollbar flex items-center justify-center overflow-hidden duration-500 bg-black bg-opacity-50 ${\n                open\n                    ? '!w-screen !h-screen opacity-100 z-40 backdrop-blur-sm'\n                    : '!w-0 !h-0 !opacity-0 -z-0'\n            }`}\n            onClick={close}\n        >\n            <div\n                className=\"no-scrollbar rounded-md max-h-[calc(100vh-50px)]\"\n                onClick={(e) => e.stopPropagation()}\n            >\n                <div\n                    className={`w-full max-sm:w-[90dvw] h-auto rounded-2xl relative bg-white dark:bg-black border ${contentClass}`}\n                >\n                    {!hideClose && (\n                        <button\n                            className=\"text-gray-400 bg-white dark:bg-black app-button border !rounded-full !p-0 text-sm !w-8 !h-8 flex justify-center items-center absolute -top-3 -right-3\"\n                            onContextMenu={() => {\n                                return false;\n                            }}\n                            onClick={close}\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/close.svg\"\n                                className=\"w-5 h-5\"\n                            ></SvgIcon>\n                        </button>\n                    )}\n                    <div className=\"overflow-hidden overflow-y-auto\">\n                        {children}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/fileViewer.tsx",
    "content": "import { useState, useRef, useMemo, WheelEvent, MouseEvent } from 'react';\nimport SvgIcon from './svg';\n\nexport const FileViewer = ({ url }: { url: string }) => {\n    const isVideo = useMemo(() => url.match(/\\.(mp4|webm|ogg)$/i), [url]);\n    const [scale, setScale] = useState(1);\n    const [position, setPosition] = useState({ x: 0, y: 0 });\n    const [isDragging, setIsDragging] = useState(false);\n    const startPos = useRef({ x: 0, y: 0 });\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    // Enhanced wheel handling with smoother scaling\n    const handleWheel = (e: WheelEvent) => {\n        if (isVideo) return;\n        e.preventDefault();\n        const scaleChange = e.deltaY > 0 ? -0.1 : 0.1;\n        setScale((prev) => Math.max(0.2, Math.min(5, prev + scaleChange)));\n    };\n\n    const handleMouseDown = (e: MouseEvent) => {\n        if (isVideo) return;\n        setIsDragging(true);\n        startPos.current = {\n            x: e.clientX - position.x,\n            y: e.clientY - position.y,\n        };\n    };\n\n    const handleMouseMove = (e: MouseEvent) => {\n        if (!isDragging || isVideo) return;\n        setPosition({\n            x: e.clientX - startPos.current.x,\n            y: e.clientY - startPos.current.y,\n        });\n    };\n\n    const handleMouseUp = () => {\n        setIsDragging(false);\n    };\n\n    // Zoom controls\n    const zoomIn = () => {\n        if (!isVideo) {\n            setScale((prev) => Math.min(5, prev + 0.2));\n        }\n    };\n\n    const zoomOut = () => {\n        if (!isVideo) {\n            setScale((prev) => Math.max(0.2, prev - 0.2));\n        }\n    };\n\n    // Reset view to initial state\n    const resetView = () => {\n        setScale(1);\n        setPosition({ x: 0, y: 0 });\n    };\n\n    return (\n        <div className=\"relative w-full h-full flex flex-col\">\n            <div\n                ref={containerRef}\n                className=\"flex-1 flex items-center justify-center w-full h-[80vh] overflow-hidden bg-gray-100 dark:bg-gray-800 rounded-lg\"\n                onWheel={handleWheel}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                onMouseLeave={handleMouseUp}\n            >\n                {isVideo ? (\n                    <video\n                        src={url}\n                        controls\n                        className=\"max-w-full max-h-full rounded\"\n                        onContextMenu={(e) => e.preventDefault()}\n                    />\n                ) : (\n                    <img\n                        src={url}\n                        alt=\"File Viewer\"\n                        className={`cursor-grab transition-transform duration-200 ease-out ${\n                            isDragging ? 'active:cursor-grabbing' : ''\n                        }`}\n                        onMouseDown={handleMouseDown}\n                        onError={(e) => {\n                            e.currentTarget.src = '/icons/svg/file.svg';\n                        }}\n                        style={{\n                            transform: `translate(${position.x}px, ${position.y}px) scale(${scale})`,\n                            userSelect: 'none',\n                            maxWidth: '100%',\n                            maxHeight: '100%',\n                        }}\n                        draggable={false}\n                    />\n                )}\n            </div>\n\n            {!isVideo && (\n                <div className=\"flex justify-center items-center gap-4 p-4\">\n                    <button\n                        onClick={zoomOut}\n                        disabled={scale <= 0.2}\n                        className=\"p-2 rounded-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                        title=\"Zoom Out\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/zoom-out.svg\"\n                            className=\"w-5 h-5\"\n                        />\n                    </button>\n\n                    <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                        {Math.round(scale * 100)}%\n                    </span>\n\n                    <button\n                        onClick={zoomIn}\n                        disabled={scale >= 5}\n                        className=\"p-2 rounded-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                        title=\"Zoom In\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/zoom-in.svg\"\n                            className=\"w-5 h-5\"\n                        />\n                    </button>\n\n                    <button\n                        onClick={resetView}\n                        className=\"p-2 rounded-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                        title=\"Reset View\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/reset.svg\"\n                            className=\"w-5 h-5\"\n                        />\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/filter.tsx",
    "content": "//\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\n//\nimport { IFieldChange, IFormField } from 'src/app/components/form/form.types';\nimport { FormElements } from './form/main';\nimport { getTagValues } from 'services/constants';\n\n//\nexport const Filter = ({\n    form,\n    call,\n    setData,\n}: {\n    form: Record<string, IFormField>;\n    call(filter?: string): Promise<ILargeRecord[]>;\n    setData: Dispatch<SetStateAction<ILargeRecord[]>>;\n}) => {\n    const [data, _setData] = useState<Record<string, IFormField>>({});\n    const [debounceTimer, setDebounceTimer] = useState(0);\n\n    const onFieldChange = async (field: IFieldChange) => {\n        _setData((_data) => {\n            _data[field.name] = field.ref\n                ? { ..._data[field.ref], ref: field.ref, value: field.value }\n                : { ..._data[field.name], value: field.value };\n\n            return _data;\n        });\n\n        if (debounceTimer) clearTimeout(debounceTimer);\n\n        setDebounceTimer(\n            setTimeout(() => {\n                const payload = getPayload();\n                call(\n                    Object.entries(payload)\n                        .filter(([_, value]) => Boolean(value))\n                        .map(([key, value]) => {\n                            let formattedValue = '';\n                            if (key.toLowerCase().includes('date')) {\n                                if (key === 'startDate') {\n                                    formattedValue = new Date(\n                                        `${value}T00:00:00`\n                                    ).toISOString();\n                                } else if (key === 'endDate') {\n                                    formattedValue = new Date(\n                                        `${value}T23:59:59`\n                                    ).toISOString();\n                                }\n                            }\n                            return `${key}=${encodeURIComponent(formattedValue || value)}`;\n                        })\n                        .join('&')\n                ).then(setData);\n            }, 500)\n        );\n    };\n\n    const getPayload = () => {\n        const payload: Record<string, ILargeRecord> = {};\n        for (const key in data) {\n            if (data[key].ref) {\n                const refKey = data[key].ref;\n                if (!payload[refKey]) payload[refKey] = [];\n                payload[refKey].push(data[key].value);\n            } else\n                payload[key] =\n                    data[key].type === 'tag'\n                        ? getTagValues(data[key].value)\n                        : data[key].value;\n        }\n        return payload;\n    };\n\n    useEffect(() => {\n        _setData({ ...form });\n\n        const payload: Record<string, ILargeRecord> = {};\n\n        for (const key in form) {\n            if (form[key]?.ref) {\n                const refKey = form[key]?.ref;\n                if (!payload[refKey]) payload[refKey] = [];\n                payload[refKey].push(form[key].value);\n            } else\n                payload[key] =\n                    form[key].type === 'tag'\n                        ? getTagValues(form[key].value)\n                        : form[key].value;\n        }\n\n        const timer = setTimeout(() => {\n            call(\n                Object.entries(payload)\n                    .filter(([_, value]) => Boolean(value))\n                    .map(([key, value]) => {\n                        let formattedValue = '';\n                        if (key.toLowerCase().includes('date')) {\n                            if (key === 'startDate') {\n                                formattedValue = new Date(\n                                    `${value}T00:00:00`\n                                ).toISOString();\n                            } else if (key === 'endDate') {\n                                formattedValue = new Date(\n                                    `${value}T23:59:59`\n                                ).toISOString();\n                            } else formattedValue = value;\n                        }\n                        return `${key}=${encodeURIComponent(formattedValue)}`;\n                    })\n                    .join('&')\n            ).then(setData);\n        }, 500);\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [form]);\n\n    return (\n        <div className=\"flex max-sm:flex-col items-center gap-2\">\n            {Object.entries(data || {})\n                .filter(([_, field]) => !field.ref)\n                .map(([fieldName, field]) => (\n                    <div\n                        key={fieldName}\n                        className={`w-full ${field.alignClass}`}\n                    >\n                        <FormElements\n                            fieldName={fieldName}\n                            field={field}\n                            onFieldChange={onFieldChange}\n                        />\n                    </div>\n                ))}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/form/checkBox.tsx",
    "content": "import { IFormField } from './form.types';\n\n//\nexport const CheckBox = ({\n    label,\n    name,\n    helperText,\n    value,\n    error,\n    disabled,\n    size,\n    required,\n    layoutClass,\n    options,\n    className,\n    customField,\n    onChange,\n}: Pick<\n    IFormField,\n    | 'label'\n    | 'helperText'\n    | 'value'\n    | 'error'\n    | 'disabled'\n    | 'size'\n    | 'required'\n    | 'layoutClass'\n    | 'options'\n    | 'className'\n    | 'customField'\n> &\n    Required<Pick<IFormField, 'name' | 'onChange'>>) => {\n    const handleInput = (option: string) => {\n        const _value = option;\n        onChange({\n            name,\n            value: _value === value ? undefined : _value,\n        });\n    };\n\n    return (\n        <div className={`w-full ${className}`}>\n            <label\n                htmlFor={name}\n                className=\"block mb-1 text-sm text-gray-600 dark:text-white\"\n            >\n                {label}\n                {label && required && (\n                    <span\n                        v-show=\"\"\n                        className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\"\n                    >\n                        *\n                    </span>\n                )}\n            </label>\n            <div className={`flex flex-wrap gap-3 mt-2 ${layoutClass}`}>\n                {options?.map((option, index) => (\n                    <div\n                        v-for=\"(option, index) in options\"\n                        key={option.id}\n                        className=\"flex flex-row items-center cursor-pointer w-fit\"\n                        onClick={() => handleInput(option.label)}\n                    >\n                        <input\n                            type=\"checkbox\"\n                            name={name}\n                            data-testid={name}\n                            checked={value?.includes(option.label)}\n                            className={`text-left mr-2 ${size}`}\n                            disabled={disabled}\n                        />\n                        <span\n                            className=\"text-sm\"\n                            dangerouslySetInnerHTML={{ __html: option.label }}\n                        />\n                        {customField && index === options.length - 1 && (\n                            <input\n                                v-if=\"\"\n                                type=\"text\"\n                                className=\"outline-none border-b-[1px] border-b-gray-600 w-full\"\n                                disabled={\n                                    disabled || !value?.includes(option.label)\n                                }\n                                onChange={(e) => {\n                                    if (value?.includes(option.label))\n                                        handleInput(\n                                            `${e.target.value} ${option.label}`\n                                        );\n                                }}\n                            />\n                        )}\n                    </div>\n                ))}\n            </div>\n            <p\n                data-testid={`${name}-error`}\n                className={`mt-1 text-xs italic min-h-4 ${error ? 'text-red-500' : 'text-gray-400'}`}\n            >\n                {error || helperText}\n            </p>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/form/fileUpload.tsx",
    "content": "import { ChangeEvent, DragEvent, useEffect, useState } from 'react';\n\n//\nimport { DialogView } from '../dialog';\nimport { IFormField } from './form.types';\nimport { byteFormat, formatAcceptTypes } from 'services/repository/utils';\nimport { CropperView } from '../cropper';\nimport SvgIcon from '../svg';\nimport { Thumbnail } from '../thumbnail';\n\n//\nexport const FileUpload = ({\n    name,\n    label,\n    helperText,\n    error,\n    disabled,\n    max = '1',\n    size = 'p-3 text-md',\n    required,\n    layoutClass,\n    className,\n    onChange,\n    accept = 'image/png,image/jpg,image/jpeg',\n    multiple,\n    cropper = false,\n    fileSize = 52428800,\n    imageSize = 'h-24 w-24',\n    icon,\n    value = [],\n}: Pick<\n    IFormField,\n    | 'label'\n    | 'helperText'\n    | 'value'\n    | 'error'\n    | 'disabled'\n    | 'max'\n    | 'size'\n    | 'required'\n    | 'layoutClass'\n    | 'className'\n    | 'onChange'\n    | 'accept'\n    | 'multiple'\n    | 'cropper'\n    | 'fileSize'\n    | 'imageSize'\n    | 'icon'\n> &\n    Required<Pick<IFormField, 'name' | 'onChange'>>) => {\n    const [files, setFiles] = useState<File[]>([]);\n    const [localFile, setLocalFile] = useState('');\n    const [selectedFile, setSelectedFile] = useState<File>();\n    const [showCropper, setCropper] = useState(false);\n    const [isDragging, setDrag] = useState(false);\n    const [localError, setLocalError] = useState('');\n\n    const handleDrag = () => {\n        setDrag((prev) => !prev);\n    };\n\n    const onDrop = (event: DragEvent<HTMLLabelElement>) => {\n        setDrag(false);\n        if (!disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n            loadFile({\n                target: { files: event.dataTransfer!.files },\n            } as ChangeEvent<HTMLInputElement>);\n        }\n    };\n\n    const loadFile = async (event: ChangeEvent<HTMLInputElement>) => {\n        const files = [];\n        setLocalError('');\n        const fileInput = event.target;\n\n        if (fileInput.files && fileInput.files.length > 0) {\n            if (fileInput.files.length <= +max) {\n                for (const file of fileInput.files) {\n                    const acceptFileRegex = new RegExp(\n                        accept.replace(/,\\s?/g, '|')\n                    );\n                    if (acceptFileRegex.test(file.type || '')) {\n                        if (file.size > fileSize)\n                            setLocalError(\n                                `Upload limit maximum ${byteFormat(fileSize, 0)} allowed`\n                            );\n                        else {\n                            if (cropper) {\n                                setLocalFile(getObjectURL(file));\n                                setSelectedFile(file);\n                                setCropper(true);\n                            } else {\n                                files.push(file);\n                                onChange?.({\n                                    name,\n                                    value: files,\n                                });\n                            }\n                        }\n                    } else {\n                        setLocalError(`${file.name} file format is invalid`);\n                    }\n                }\n            } else setLocalError(`Maximum allowed files : ${max}`);\n        }\n        setFiles(files);\n        fileInput.value = '';\n    };\n\n    const getObjectURL = (file: File | string) => {\n        return typeof file === 'string' ? file : URL.createObjectURL(file);\n    };\n    const removeLocalImages = (index: number) => {\n        setFiles((prev) => {\n            const files = prev;\n\n            return files.filter((_, i) => i !== index);\n        });\n        onChange?.({\n            name,\n            value: files,\n        });\n    };\n\n    const toggleCropper = () => {\n        setCropper((prev) => !prev);\n\n        if (!showCropper) {\n            setLocalFile('');\n            setSelectedFile(undefined);\n        }\n    };\n\n    const callback = (image: Blob) => {\n        setCropper(false);\n        const file = new File([image], selectedFile!.name, {\n            type: 'image/png',\n        });\n        setSelectedFile(file);\n        setFiles([file]);\n        onChange?.({\n            name,\n            value: [file],\n        });\n    };\n\n    useEffect(() => {\n        setFiles(value);\n    }, [value.length]);\n\n    return (\n        <div className={`w-full ${className}`}>\n            <input\n                id={`${name}-browse`}\n                data-testid={name}\n                name={name}\n                type=\"file\"\n                accept={accept}\n                disabled={disabled}\n                multiple={multiple}\n                hidden\n                onChange={loadFile}\n            />\n            {label && (\n                <label\n                    htmlFor={name}\n                    className=\"block mb-1 text-sm text-gray-600 dark:text-white\"\n                >\n                    {label}\n                    {label && required && (\n                        <span className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\">\n                            *\n                        </span>\n                    )}\n                </label>\n            )}\n            <div\n                className={`w-full grid grid-cols-2 gap-1 items-end ${layoutClass}`}\n            >\n                <label\n                    htmlFor={`${name}-browse`}\n                    className={`flex flex-col gap-1 items-center justify-center rounded-lg cursor-pointer h-full app-inner-shadow ${size} ${\n                        disabled\n                            ? 'shadow-[_0px_0px_20px_inset] shadow-gray-400'\n                            : isDragging\n                              ? ' shadow-[_0px_0px_20px_inset] shadow-green-500'\n                              : ''\n                    }`}\n                    onDragOver={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        handleDrag();\n                    }}\n                    onDragLeave={handleDrag}\n                    onDrop={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        onDrop(e);\n                    }}\n                >\n                    {icon}\n                    <p className=\"text-sm text-gray-400 text-center\">\n                        Drag & Drop\n                        <br />\n                        <span className=\"text-themeColorAlternate\">\n                            or browse\n                        </span>\n                    </p>\n                </label>\n                <div className=\"block\">\n                    {files.map((image, index) => (\n                        <div\n                            key={index}\n                            data-title={image.name}\n                            data-testid=\"SELECTED_FILE\"\n                            className={`float-left m-1 relative border border-gray-300 rounded-lg ${imageSize}`}\n                        >\n                            <Thumbnail\n                                url={getObjectURL(image)}\n                                className={`rounded-lg border-white object-cover pointer-events-none ${imageSize}`}\n                            />\n                            <p className=\"text-[10px] absolute bottom-0 right-0 bg-white px-3 py-1 rounded-full text-black\">\n                                {image.name}\n                            </p>\n                            <button\n                                aria-label=\"close-information\"\n                                data-testid=\"REMOVE_FILE\"\n                                type=\"button\"\n                                className=\"text-gray-400 bg-white dark:bg-black app-button border border-blue-200 !rounded-full !p-0 text-sm !w-6 !h-6 flex justify-center items-center absolute -top-2 -right-2 z-50\"\n                                onClick={() => removeLocalImages(index)}\n                            >\n                                <SvgIcon\n                                    path=\"/icons/svg/close.svg\"\n                                    className=\"w-5 h-5\"\n                                ></SvgIcon>\n                            </button>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <p\n                data-testid=\"`${name}-error`\"\n                className={`mt-1 text-xs italic min-h-4 ${error || localError ? 'text-red-500' : 'text-gray-400'}`}\n            >\n                {localError ||\n                    error ||\n                    helperText ||\n                    `File types ${formatAcceptTypes(accept)}. Upload limit maximum ${byteFormat(fileSize, 0)} allowed`}\n            </p>\n            <DialogView\n                open={showCropper}\n                close={toggleCropper}\n                hideClose={true}\n            >\n                <CropperView\n                    image={localFile}\n                    close={toggleCropper}\n                    callback={callback}\n                />\n            </DialogView>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/form/form.types.ts",
    "content": "import { ReactNode, KeyboardEvent, ComponentType } from 'react';\n\nexport interface IFormField {\n    name?: string;\n    label?: string;\n    value?: ILargeRecord;\n    error?: string;\n    validations?: {\n        type: 'regex' | 'function';\n        message?: string;\n        validate:\n            | string\n            | ((\n                  values: ILargeRecord,\n                  name: string\n              ) => Promise<string> | string);\n    }[];\n    required?: boolean;\n    requiredLabel?: string;\n    type?:\n        | 'label'\n        | 'text'\n        | 'textarea'\n        | 'number'\n        | 'date'\n        | 'time'\n        | 'datetime-local'\n        | 'file'\n        | 'tag'\n        | 'password'\n        | 'autocomplete'\n        | 'select'\n        | 'otp'\n        | 'calendar'\n        | 'checkbox'\n        | 'chip'\n        | 'multiTextField'\n        | 'toggle'\n        | 'radio'\n        | 'custom';\n    placeHolder?: string;\n    helperText?: string;\n    rows?: number;\n    alignClass?: string;\n    className?: string;\n    layoutClass?: string;\n    imageSize?: string;\n    size?: string;\n    disabled?: boolean;\n    multiple?: boolean;\n    min?: string;\n    max?: string;\n    accept?: string;\n    format?: string;\n    options?: { id: string; label: string }[];\n    buttonText?: string;\n    buttonSize?: string;\n    ref?: string;\n    initialFieldCount?: number;\n    remove?: (index: number) => void;\n    customField?: boolean;\n    fileSize?: number;\n    cropper?: boolean;\n    length?: number;\n    noError?: boolean;\n    disableFilter?: boolean;\n    maxLength?: number;\n\n    //\n    startIcon?: ReactNode;\n    endIcon?: ReactNode;\n    element?: ComponentType<{ onFieldChange: (field: IFieldChange) => void }>;\n    icon?: ReactNode;\n    onChange?: (field: IFieldChange) => void;\n    onKeyPress?: (e: KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport type IFieldChange = {\n    name: string;\n    value: ILargeRecord;\n    ignoreValidation?: boolean;\n    ref?: string;\n    id?: boolean;\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/form/main.tsx",
    "content": "import {\n    createElement,\n    FormEvent,\n    ReactNode,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\n\n//\nimport { getTagValues } from 'services/constants';\n\n//\nimport { IFieldChange, IFormField } from './form.types';\nimport { TextField } from './textField';\nimport { CheckBox } from './checkBox';\nimport { FileUpload } from './fileUpload';\nimport { RadioButton } from './radioButton';\n\n//\nexport const FormBuilder = ({\n    form,\n    call,\n    buttonText,\n    buttonClass,\n    layoutClass,\n    formTop,\n    formBottom,\n}: {\n    form: Record<string, IFormField>;\n    call: (...args: ILargeRecord) => Promise<boolean>;\n    buttonText?: string;\n    buttonClass?: string;\n    layoutClass?: string;\n    formTop?: ReactNode;\n    formBottom?: ReactNode;\n}) => {\n    const [data, setData] = useState<Record<string, IFormField>>({});\n    const [initialData, setInitialData] = useState<Record<string, IFormField>>(\n        {}\n    );\n    const [loading, setLoading] = useState(false);\n    const [debounceTimer, setDebounceTimer] = useState(0);\n\n    //\n\n    const getPayload = () => {\n        const payload: Record<string, ILargeRecord> = {};\n        for (const key in data) {\n            if (data[key].ref) {\n                const refKey = data[key].ref;\n                if (!payload[refKey]) payload[refKey] = [];\n                payload[refKey].push(data[key].value);\n            } else\n                payload[key] =\n                    data[key].type === 'tag'\n                        ? getTagValues(data[key].value)\n                        : data[key].value;\n        }\n        return payload;\n    };\n\n    const onFieldChange = async (field: IFieldChange) => {\n        setData((_data) => {\n            _data[field.name] = field.ref\n                ? { ..._data[field.ref], ref: field.ref, value: field.value }\n                : { ..._data[field.name], value: field.value };\n\n            return _data;\n        });\n\n        if (!field.ignoreValidation) {\n            if (debounceTimer) clearTimeout(debounceTimer);\n\n            setDebounceTimer(\n                setTimeout(() => {\n                    const fieldData = data[field.name];\n                    validateField(field.name, fieldData);\n                }, 500)\n            );\n        }\n    };\n\n    const validateField = async (name: string, fieldData: IFormField) => {\n        let errorMessage = '';\n        const value = fieldData.value || '';\n\n        if (\n            fieldData.required &&\n            (fieldData.type === 'tag'\n                ? !value\n                      .split(/( |;|,)/g)\n                      .filter((t: string) =>\n                          t.replaceAll(/(\\s|;|,)/g, '').trim()\n                      ).length\n                : typeof value === 'object'\n                  ? !value.length\n                  : !`${value}`.trim())\n        ) {\n            errorMessage =\n                fieldData.requiredLabel ||\n                `${fieldData.label || 'field'} is required`;\n        } else if (fieldData.validations) {\n            for (const key in fieldData.validations) {\n                const validation = fieldData.validations[key];\n                const regex = new RegExp(validation.validate as string);\n                if (validation.type === 'function') {\n                    const payload = getPayload();\n                    const call = validation.validate as (\n                        values: ILargeRecord,\n                        name: string\n                    ) => Promise<string> | string;\n                    errorMessage = await call(payload, name);\n                } else if (\n                    (validation.type === 'regex' &&\n                        typeof value === 'object' &&\n                        value.filter((v: ILargeRecord) => !regex.test(v))\n                            .length) ||\n                    (fieldData.type === 'tag'\n                        ? value.split(/( |;|,)/g).filter((t: string) => {\n                              const data = t.replaceAll(/(\\s|;|,)/g, '').trim();\n                              if (data) return !regex.test(data);\n                              return false;\n                          }).length\n                        : !regex.test(value))\n                ) {\n                    errorMessage = validation.message || 'Invalid value';\n                }\n                if (errorMessage) break;\n            }\n        }\n        setData((_data) => {\n            const updatedData = { ..._data };\n            updatedData[name] = {\n                ...updatedData[name],\n                error: errorMessage,\n            };\n            return updatedData;\n        });\n        return errorMessage;\n    };\n\n    const validate = async () => {\n        const errors: Record<string, string> = {};\n        for (const field in data) {\n            if (\n                data[field].type !== 'label' &&\n                (data[field].type !== 'multiTextField' ||\n                    (data[field].type === 'multiTextField' && data[field].ref))\n            )\n                errors[field] = await validateField(field, data[field]);\n        }\n        return !Object.values(errors).filter(Boolean).length;\n    };\n\n    const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setLoading(true);\n        const payload = getPayload();\n        if (await validate()) {\n            const success = await call(payload);\n            if (success) setData(initialData);\n        }\n        setLoading(false);\n    };\n\n    const fields = useMemo(\n        () =>\n            Object.entries(initialData || {}).filter(\n                ([_, field]) => !field.ref\n            ),\n        [initialData]\n    );\n\n    //\n    useEffect(() => {\n        setData({ ...form });\n        setInitialData({ ...form });\n    }, [form]);\n\n    return (\n        <form\n            className={`grid gap-1 w-auto relative ${layoutClass}`}\n            onSubmit={onSubmit}\n        >\n            {formTop}\n            {fields.map(([fieldName, field]) => (\n                <div\n                    key={`${fieldName}-holder`}\n                    className={`w-full ${field.alignClass}`}\n                >\n                    <FormElements\n                        fieldName={fieldName}\n                        field={data[fieldName]}\n                        onFieldChange={onFieldChange}\n                    />\n                </div>\n            ))}\n            {/* <div className=\"h-5\" /> */}\n            {formBottom ? (\n                formBottom\n            ) : (\n                <button\n                    disabled={loading}\n                    type=\"submit\"\n                    data-testid=\"SUBMIT\"\n                    className={`app-button border-transparent app-shadow ${loading ? 'text-gray-400' : ''} ${buttonClass}`}\n                    onContextMenu={() => {\n                        return false;\n                    }}\n                >\n                    {buttonText}\n                </button>\n            )}\n            {loading && (\n                <div className=\"bg-gray-100 bg-opacity-50 dark:bg-transparent absolute w-full h-full rounded-lg flex items-center justify-center\">\n                    <div className=\"dot-pulse\"></div>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport const FormElements = ({\n    fieldName,\n    field,\n    onFieldChange,\n}: {\n    fieldName: string;\n    field: IFormField;\n    onFieldChange: (field: IFieldChange) => void;\n}) => {\n    if (field.type === 'custom' && field.element)\n        return createElement(field.element, { onFieldChange });\n    else if (field.type === 'label')\n        return (\n            <label className={field.layoutClass}>\n                {field.label}\n                {field.required && (\n                    <span\n                        v-show=\"field.label && field.required\"\n                        className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\"\n                    >\n                        *\n                    </span>\n                )}\n                {field.icon}\n            </label>\n        );\n    else if (field.type === 'checkbox')\n        return (\n            <CheckBox\n                name={fieldName}\n                label={field.label}\n                value={field.value}\n                error={field.error}\n                required={field.required}\n                disabled={field.disabled}\n                helperText={field.helperText}\n                layoutClass={field.layoutClass}\n                options={field.options || []}\n                customField={field.customField}\n                onChange={onFieldChange}\n            />\n        );\n    else if (field.type === 'radio')\n        return (\n            <RadioButton\n                name={fieldName}\n                label={field.label}\n                value={field.value}\n                error={field.error}\n                required={field.required}\n                disabled={field.disabled}\n                helperText={field.helperText}\n                layoutClass={field.layoutClass}\n                options={field.options || []}\n                onChange={onFieldChange}\n            />\n        );\n    else if (field.type === 'file')\n        return (\n            <FileUpload\n                name={fieldName}\n                label={field.label}\n                value={field.value}\n                error={field.error}\n                required={field.required}\n                disabled={field.disabled}\n                imageSize={field.imageSize}\n                accept={field.accept}\n                size={field.size}\n                max={field.max}\n                className={field.className}\n                layoutClass={field.layoutClass}\n                fileSize={field.fileSize}\n                cropper={field.cropper}\n                onChange={onFieldChange}\n                icon={field.icon}\n            />\n        );\n    else {\n        return (\n            <TextField\n                name={fieldName}\n                label={field.label}\n                value={field.value}\n                options={field.options || []}\n                error={field.error}\n                required={field.required}\n                disabled={field.disabled}\n                placeHolder={field.placeHolder}\n                helperText={field.helperText}\n                type={field.type!}\n                size={field.size}\n                rows={field.rows}\n                min={field.min}\n                max={field.max}\n                maxLength={field.maxLength}\n                className={field.className}\n                layoutClass={field.layoutClass}\n                format={field.format}\n                onChange={(data) => {\n                    onFieldChange(data);\n                    field?.onChange?.(data);\n                }}\n                startIcon={field.startIcon}\n                endIcon={field.endIcon}\n                noError={field.noError}\n                length={field.length}\n                disableFilter={field.disableFilter}\n            />\n        );\n    }\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/form/radioButton.tsx",
    "content": "import { IFormField } from './form.types';\n\n//\nexport const RadioButton = ({\n    label,\n    name,\n    helperText,\n    value = '',\n    error,\n    disabled,\n    size,\n    required,\n    layoutClass,\n    options,\n    className,\n    onChange,\n}: Pick<\n    IFormField,\n    | 'label'\n    | 'helperText'\n    | 'value'\n    | 'error'\n    | 'disabled'\n    | 'size'\n    | 'required'\n    | 'layoutClass'\n    | 'options'\n    | 'className'\n> &\n    Required<Pick<IFormField, 'name' | 'onChange'>>) => {\n    const handleInput = (option: string) => {\n        const _value = option;\n        onChange({\n            name,\n            value: _value === value ? undefined : _value,\n        });\n    };\n\n    return (\n        <div className={`w-full ${className}`}>\n            <label\n                htmlFor={name}\n                className=\"block mb-1 text-sm text-gray-600 dark:text-white\"\n            >\n                {label}\n                {label && required && (\n                    <span\n                        v-show=\"\"\n                        className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\"\n                    >\n                        *\n                    </span>\n                )}\n            </label>\n            <div className={`flex flex-wrap gap-3 mt-2 ${layoutClass}`}>\n                {options?.map((option) => (\n                    <div\n                        v-for=\"(option, index) in options\"\n                        key={option.id}\n                        className=\"flex flex-row items-center cursor-pointer w-fit\"\n                        onClick={() => handleInput(option.label)}\n                    >\n                        <input\n                            type=\"radio\"\n                            name={name}\n                            data-testid={name}\n                            checked={value?.includes(option.label)}\n                            className={`text-left mr-2 ${size}`}\n                            disabled={disabled}\n                        />\n                        <span\n                            className=\"text-sm\"\n                            dangerouslySetInnerHTML={{ __html: option.label }}\n                        />\n                    </div>\n                ))}\n            </div>\n            <p\n                data-testid={`${name}-error`}\n                className={`mt-1 text-xs italic min-h-4 ${error ? 'text-red-500' : 'text-gray-400'}`}\n            >\n                {error || helperText}\n            </p>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/form/textField.tsx",
    "content": "import {\n    ChangeEvent,\n    ClipboardEvent,\n    KeyboardEvent,\n    FormEvent,\n    useMemo,\n    useState,\n    useRef,\n    useEffect,\n} from 'react';\n\n//\nimport { getTagValues } from 'services/constants';\n\n//\nimport SvgIcon from '../svg';\nimport { IFormField } from './form.types';\n\n//\nexport const TextField = ({\n    name,\n    label,\n    placeHolder,\n    helperText,\n    value,\n    error,\n    noError,\n    disabled,\n    type = 'text',\n    min,\n    max,\n    size = 'p-3 text-md',\n    rows,\n    required,\n    layoutClass,\n    format: _,\n    options = [],\n    length = 4,\n    startIcon,\n    endIcon,\n    onChange,\n    onKeyPress,\n    className,\n    disableFilter = false,\n    maxLength = 19,\n}: Pick<\n    IFormField,\n    | 'label'\n    | 'placeHolder'\n    | 'helperText'\n    | 'value'\n    | 'error'\n    | 'disabled'\n    | 'min'\n    | 'max'\n    | 'size'\n    | 'rows'\n    | 'required'\n    | 'layoutClass'\n    | 'format'\n    | 'options'\n    | 'startIcon'\n    | 'endIcon'\n    | 'className'\n    | 'noError'\n    | 'length'\n    | 'onChange'\n    | 'disableFilter'\n    | 'maxLength'\n    | 'onKeyPress'\n> &\n    Required<Pick<IFormField, 'name' | 'type' | 'onChange'>>) => {\n    const [show, setShow] = useState(\n        ['date', 'datetime-local', 'time'].includes(type) || false\n    );\n    const [showMenu, setShowMenu] = useState(false);\n    const [filterMenu, setFilterMenu] = useState(false);\n    const [otp, setOTP] = useState<string[]>([]);\n    const menuRef = useRef<HTMLUListElement>(null);\n\n    //\n    const filterOptions = useMemo(\n        () =>\n            type === 'select' || disableFilter\n                ? options || []\n                : options?.filter((option) =>\n                      value && filterMenu\n                          ? `${option.id} ${option.label}`\n                                .toLowerCase()\n                                .includes(`${value}`.toLowerCase())\n                          : true\n                  ) || [],\n        [options?.length, value, disableFilter]\n    );\n\n    //\n    const handleInput = (\n        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        if (['autocomplete', 'select'].includes(type)) {\n            setShowMenu(true);\n            setFilterMenu(true);\n        }\n        onChange({\n            name,\n            value: e.target.value,\n        });\n    };\n\n    const handleInputChange = (\n        event: FormEvent<HTMLInputElement>,\n        index: number\n    ) => {\n        const target = event.target as unknown as { value: string };\n        const otpInputs = document.querySelectorAll(\n            `[data-ref=\"${name}-otpInputs\"]`\n        ) as unknown as HTMLInputElement[];\n        if (/^\\d$/.test(target.value)) {\n            setOTP((_otp) => {\n                _otp[index] = target.value;\n                return _otp;\n            });\n            onChange({\n                name,\n                value: Object.values(otp).join(''),\n            });\n            if (\n                (event as unknown as { inputType: string }).inputType ===\n                    'deleteContentBackward' &&\n                index > 0\n            ) {\n                setOTP((_otp) => {\n                    _otp[index] = '';\n                    return _otp;\n                });\n                const previousInput = otpInputs[index - 1];\n                if (previousInput) {\n                    previousInput.focus();\n                }\n            } else if (index < otpInputs.length - 1) {\n                const nextInput = otpInputs[index + 1];\n                if (nextInput) {\n                    nextInput.focus();\n                }\n            }\n        } else if (\n            (event as unknown as { key: string }).key === 'Backspace' &&\n            index > 0\n        ) {\n            setOTP((_otp) => {\n                _otp[index] = '';\n                return _otp;\n            });\n            const previousInput = otpInputs[index - 1];\n            if (previousInput) {\n                previousInput.focus();\n            }\n        } else {\n            (event.target as unknown as { value: string }).value = '';\n        }\n    };\n\n    const handleKeyDown = (\n        event: KeyboardEvent<HTMLInputElement>,\n        index: number\n    ) => {\n        const otpInputs = document.querySelectorAll(\n            `[data-ref=\"${name}-otpInputs\"]`\n        ) as unknown as HTMLInputElement[];\n        if (index > 0 && event.key === 'Backspace' && !otpInputs[index].value) {\n            const previousInput = otpInputs[index - 1];\n            if (previousInput) {\n                previousInput.focus();\n            }\n        }\n    };\n\n    const limitInput = (event: ChangeEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (type === 'number' && target.value.length >= maxLength) {\n            target.value = target.value.slice(0, maxLength);\n            onChange({\n                name,\n                value: target.value,\n            });\n        }\n    };\n\n    const filterNumericInput = (event: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress?.(event);\n        if (type === 'number') {\n            const char = String.fromCharCode(event.charCode);\n            if (\n                !/[0-9\\\\.]/.test(char) &&\n                ![8, 9, 13, 37, 39].includes(event.charCode)\n            ) {\n                event.preventDefault();\n            }\n        }\n    };\n\n    const filterPaste = (event: ClipboardEvent<HTMLInputElement>) => {\n        if (type === 'number') {\n            const pasteData = event.clipboardData?.getData('text');\n            if (pasteData && !/^\\d+$/.test(pasteData)) {\n                event.preventDefault();\n            }\n        }\n    };\n\n    const toggle = () => {\n        setShow((prev) => !prev);\n    };\n\n    const toggleMenu = () => {\n        if (['autocomplete', 'select'].includes(type)) {\n            setShowMenu((prev) => !prev);\n            setFilterMenu(false);\n            if (showMenu)\n                setTimeout(() => {\n                    document.removeEventListener('click', handleOutsideClick);\n                    document.addEventListener('click', handleOutsideClick);\n                }, 100);\n            else document.removeEventListener('click', handleOutsideClick);\n        }\n    };\n\n    const handleOutsideClick = () => {\n        if (showMenu) {\n            setShowMenu(false);\n            setFilterMenu(false);\n            onChange({\n                name,\n                value,\n            });\n            document.removeEventListener('click', handleOutsideClick);\n        }\n    };\n\n    const selectOption = (value: string) => {\n        onChange({ name, value, id: true });\n        setShowMenu(false);\n        setFilterMenu(false);\n        document.removeEventListener('click', handleOutsideClick);\n    };\n\n    const focus = () => {\n        if (['date', 'datetime-local', 'time'].includes(type)) setShow(false);\n    };\n\n    const blur = () => {\n        if (['date', 'datetime-local', 'time'].includes(type)) setShow(true);\n    };\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (\n                showMenu &&\n                menuRef.current &&\n                event.target &&\n                !menuRef.current?.contains(event.target as Node)\n            ) {\n                setShowMenu(false);\n                setFilterMenu(false);\n            }\n        };\n\n        if (showMenu)\n            document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [showMenu]);\n\n    return (\n        <div className={`w-full ${className}`}>\n            {label && (\n                <label\n                    htmlFor={name}\n                    className=\"block mb-1 text-sm text-gray-600 dark:text-white\"\n                >\n                    {label}\n                    {label && required && (\n                        <span className=\"text-gray-600/50 dark:text-white/50 font-bold text-xs\">\n                            *\n                        </span>\n                    )}\n                </label>\n            )}\n            {type === 'otp' ? (\n                <div\n                    className={`flex gap-3 justify-between  w-fit ${layoutClass}`}\n                >\n                    {new Array(length).fill(null).map((_, i) => (\n                        <input\n                            key={i + 1}\n                            data-ref={`${name}-otpInputs`}\n                            name={name + i + 1}\n                            data-testid={name + i + 1}\n                            type={type}\n                            placeholder={placeHolder}\n                            disabled={disabled}\n                            className={`text-md rounded-md outline-none bg-transparent text-center w-10 h-10 app-inner-shadow ${size} ${\n                                disabled\n                                    ? 'bg-gray-400 text-gray-400 dark:text-gray-300'\n                                    : 'border border-transparent hover:border-gray-500'\n                            }`}\n                            maxLength={1}\n                            onInput={(e) => handleInputChange(e, i)}\n                            onKeyDown={(e) => handleKeyDown(e, i)}\n                        />\n                    ))}\n                </div>\n            ) : (\n                <div\n                    className={`flex text-md border border-transparent hover:border-gray-500 text-md w-full rounded-xl relative items-center gap-1 transition-border duration-300 app-inner-shadow ${layoutClass} ${disabled ? 'bg-gray-200 dark:bg-gray-600 text-gray-400 dark:text-gray-300' : ''}`}\n                >\n                    {startIcon}\n                    {['date', 'datetime-local'].includes(type) && (\n                        <SvgIcon\n                            path=\"/icons/svg/calendar.svg\"\n                            className=\"!w-5 !h-5 m-auto ml-3 !text-current\"\n                        ></SvgIcon>\n                    )}\n                    {type === 'time' && (\n                        <SvgIcon\n                            path=\"/icons/svg/time.svg\"\n                            className=\"!w-5 !h-5 m-auto ml-3 !text-current\"\n                        ></SvgIcon>\n                    )}\n                    {type === 'textarea' ? (\n                        <textarea\n                            data-testid={name}\n                            name={name}\n                            placeholder={placeHolder}\n                            disabled={disabled}\n                            rows={rows}\n                            className={`w-full rounded-xl outline-none bg-transparent ${size}`}\n                            style={{ resize: 'none' }}\n                            onChange={handleInput}\n                            value={value}\n                        />\n                    ) : (\n                        <input\n                            data-testid={name}\n                            name={name}\n                            type={\n                                ['autocomplete', 'select'].includes(type)\n                                    ? 'text'\n                                    : show\n                                      ? 'text'\n                                      : type\n                            }\n                            placeholder={placeHolder}\n                            disabled={disabled || type === 'select'}\n                            min={min}\n                            max={max}\n                            // format={format}\n                            className={`text-md w-full rounded-xl outline-none bg-transparent ${size}`}\n                            autoComplete=\"off\"\n                            onInput={limitInput}\n                            onKeyPress={filterNumericInput}\n                            onPaste={filterPaste}\n                            onFocus={focus}\n                            onBlur={blur}\n                            onClick={toggleMenu}\n                            onChange={handleInput}\n                            value={\n                                ['autocomplete', 'select'].includes(type) &&\n                                value\n                                    ? options.find((o) => o.id === value)\n                                          ?.label || value\n                                    : value\n                            }\n                        />\n                    )}\n                    {type === 'select' && (\n                        <div\n                            data-testid={`${name}-select`}\n                            className=\"absolute top-0 left-0 w-full h-full\"\n                            onClick={toggleMenu}\n                        ></div>\n                    )}\n                    {type === 'password' && (\n                        <button\n                            type=\"button\"\n                            className=\"mr-3\"\n                            onContextMenu={() => {\n                                return false;\n                            }}\n                            onClick={toggle}\n                        >\n                            {show ? (\n                                <SvgIcon\n                                    path=\"/icons/svg/visibility.svg\"\n                                    className=\"!h-5 !w-5 !text-current\"\n                                ></SvgIcon>\n                            ) : (\n                                <SvgIcon\n                                    path=\"/icons/svg/visibility_off.svg\"\n                                    className=\"!h-5 !w-5 !text-current\"\n                                ></SvgIcon>\n                            )}\n                        </button>\n                    )}\n                    {['autocomplete', 'select'].includes(type) && (\n                        <button\n                            type=\"button\"\n                            className=\"mr-3\"\n                            onContextMenu={() => {\n                                return false;\n                            }}\n                            onClick={toggleMenu}\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/arrow.svg\"\n                                className={`!h-3 !w-3 !text-current transition-transform duration-300 ${showMenu ? '' : 'rotate-180'}`}\n                            ></SvgIcon>\n                        </button>\n                    )}\n                    {endIcon}\n                    {['autocomplete', 'select'].includes(type) && showMenu && (\n                        <ul\n                            ref={menuRef}\n                            data-testid={`${name}-menu`}\n                            className=\"absolute app-bg border rounded-lg w-full max-h-32 h-fit overflow-auto z-10 top-[100%] max-md:fixed max-md:left-[50%] max-md:top-[50%] max-md:-translate-x-[50%] max-md:-translate-y-[50%] max-md:max-w-sm max-sm:w-[90%]\"\n                        >\n                            {filterOptions.map((option, index) => (\n                                <li\n                                    key={index}\n                                    data-testid={`${name}-option`}\n                                    className=\"app-menu-item capitalize\"\n                                    onClick={() => selectOption(option.id)}\n                                >\n                                    {option.label}\n                                </li>\n                            ))}\n                            {filterOptions.length === 0 && (\n                                <li\n                                    className=\"app-menu-item\"\n                                    onClick={() => selectOption('')}\n                                >\n                                    No options found\n                                </li>\n                            )}\n                        </ul>\n                    )}\n                </div>\n            )}\n            {!noError && (\n                <p\n                    data-testid={`${name}-error`}\n                    className={`mt-1 text-xs italic min-h-4 ${error ? 'text-red-500' : 'text-gray-400'}`}\n                >\n                    {type === 'tag' && (\n                        <>\n                            <span\n                                data-testid={`${name}-error`}\n                                className=\"mt-1 text-xs italic min-h-4 text-gray-400\"\n                            >\n                                separated by commas, semicolons, or newlines\n                            </span>\n                            <br />\n                        </>\n                    )}\n                    {error || helperText}\n                </p>\n            )}\n            {type === 'tag' && (\n                <div className=\"block max-h-20 overflow-y-auto no-scrollbar\">\n                    {getTagValues(value).map((tag) => (\n                        <p\n                            key={tag}\n                            className=\"text-xs rounded-full border w-fit px-2 pb-0.5 m-0.5 truncate max-w-[250px] float-left\"\n                        >\n                            {tag}\n                        </p>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/loading.tsx",
    "content": "import { Logo } from './logo';\n\nexport const Loading = () => {\n    return (\n        <div className=\"fixed top-0 left-0 app-width h-screen flex items-center justify-center bg-white dark:bg-black\">\n            <Logo />\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/logo.tsx",
    "content": "import SvgIcon from './svg';\n\nexport const Logo = ({ className = 'w-16 h-16' }) => {\n    return <SvgIcon path=\"/icons/svg/logo.svg\" className={className} />;\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/maintenance.tsx",
    "content": "//\nexport default () => {\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center h-screen app-width\">\n            <img\n                src=\"/images/maintenance.png\"\n                className=\"w-full max-w-[300px]\"\n            />\n            <h1 data-testid=\"INIT\" className=\"text-3xl font-bold text-center\">\n                Scheduled Maintenance Notice\n            </h1>\n            <p className=\"text-xl font-bold text-center\">\n                We're performing essential maintenance to improve your\n                experience\n            </p>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/page.tsx",
    "content": "import { useNavigate } from 'react-router-dom';\n\n//\nexport const CommonPage = ({ content }: { content: string }) => {\n    const navigate = useNavigate();\n\n    const goToHome = () => {\n        navigate(import.meta.env.BASE_URL);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center h-screen app-width\">\n            <h1 data-testid=\"INIT\" className=\"text-3xl font-bold\">\n                {content}\n            </h1>\n            <button className=\"app-button app-shadow\" onClick={goToHome}>\n                Home\n            </button>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/svg.tsx",
    "content": "import { useEffect, useState } from 'react';\nimport { getSvgIcon } from 'virtual:svg-icons';\n\n//\nconst SvgIcon = ({ path, className }: { path: string; className: string }) => {\n    const [icon, setIcon] = useState('');\n\n    useEffect(() => {\n        setIcon(getSvgIcon(path.split('/').slice(-2).join('/')));\n    }, [path]);\n\n    return (\n        <svg\n            className={className}\n            dangerouslySetInnerHTML={{ __html: icon }}\n        ></svg>\n    );\n};\n\nexport default SvgIcon;\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/table.tsx",
    "content": "import { ReactNode, useEffect, useState } from 'react';\nimport { generateKey } from 'services/repository/utils';\nimport { TextField } from './form/textField';\n\nexport const Table = ({ data, columns }: ITable) => {\n    const [currentPage, setCurrentPage] = useState(1);\n    const [itemsPerPage, setItemsPerPage] = useState(10);\n\n    // Calculate total pages\n    const totalPages = Math.ceil(data.length / itemsPerPage);\n\n    // Get current page data\n    const paginatedData = data.slice(\n        (currentPage - 1) * itemsPerPage,\n        currentPage * itemsPerPage\n    );\n\n    // Pagination handlers\n    const goToPreviousPage = () => {\n        if (currentPage > 1) setCurrentPage(currentPage - 1);\n    };\n\n    const goToNextPage = () => {\n        if (currentPage < totalPages) setCurrentPage(currentPage + 1);\n    };\n\n    const goToPage = (page: number) => {\n        if (page >= 1 && page <= totalPages) setCurrentPage(page);\n    };\n\n    // Generate page numbers (e.g., show 5 pages around current)\n    const getPageNumbers = () => {\n        const maxPagesToShow = 5;\n        const half = Math.floor(maxPagesToShow / 2);\n        let start = Math.max(1, currentPage - half);\n        const end = Math.min(totalPages, start + maxPagesToShow - 1);\n\n        if (end - start + 1 < maxPagesToShow) {\n            start = Math.max(1, end - maxPagesToShow + 1);\n        }\n\n        return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n    };\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [data.length]);\n\n    return (\n        <>\n            <div className=\"relative overflow-x-auto !overflow-y-clip rounded-lg app-shadow no-scrollbar flex flex-col\">\n                <table className=\"w-full text-sm text-left rtl:text-right rounded-lg\">\n                    <thead className=\"bg-primary-200 sticky top-0 bg-gray-200 dark:bg-neutral-900 dark:text-gray-400\">\n                        <tr>\n                            {columns.map((c) => (\n                                <th\n                                    key={`headcol-${generateKey()}`}\n                                    scope=\"col\"\n                                    className=\"px-4 py-4 truncate\"\n                                >\n                                    {c.headerCell ? c.headerCell : c.header}\n                                </th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {paginatedData.length ? (\n                            paginatedData.map((row, index) => (\n                                <tr\n                                    key={`tablerow-${generateKey()}`}\n                                    className={`bg-gray-50 dark:bg-neutral-800 odd:light:bg-white even:bg-gray-100 even:dark:bg-neutral-900 ${\n                                        index === paginatedData.length - 1\n                                            ? ''\n                                            : 'border-b dark:border-neutral-700 border-gray-200'\n                                    }`}\n                                >\n                                    {columns.map((c) => (\n                                        <td\n                                            key={`tablecell-${generateKey()}`}\n                                            className={`px-4 py-4 overflow-hidden w-fit ${c.cellClass ? c.cellClass : ''}`}\n                                        >\n                                            {c.cell\n                                                ? c.cell({\n                                                      value: row[c.field],\n                                                      row: {\n                                                          ...row,\n                                                          index:\n                                                              (currentPage -\n                                                                  1) *\n                                                                  itemsPerPage +\n                                                              index +\n                                                              1,\n                                                      },\n                                                  })\n                                                : row[c.field]}\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))\n                        ) : (\n                            <tr className=\"bg-gray-50 dark:bg-neutral-800\">\n                                <td\n                                    scope=\"row\"\n                                    colSpan={columns.length}\n                                    className=\"px-6 py-10 font-medium col-span-6 text-center text-2xl text-gray-400\"\n                                >\n                                    No data found\n                                </td>\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            {data.length > 0 && (\n                <div className=\"flex gap-2 items-center p-2\">\n                    <p className=\"text-sm font-bold flex-1 text-nowrap\">\n                        Total : {data.length}\n                    </p>\n                    <TextField\n                        startIcon={\n                            <p className=\"text-gray-500 text-nowrap ml-2 -mr-3 max-sm:hidden\">\n                                Rows :\n                            </p>\n                        }\n                        name=\"month\"\n                        type=\"select\"\n                        value={`${itemsPerPage}`}\n                        size=\"p-1.5 pl-4\"\n                        layoutClass=\"max-w-32\"\n                        className=\"!w-fit mr-2\"\n                        onChange={(e) => setItemsPerPage(e.value)}\n                        options={[\n                            { id: '10', label: '10' },\n                            { id: '25', label: '25' },\n                            { id: '50', label: '50' },\n                            { id: '100', label: '100' },\n                        ]}\n                        noError={true}\n                    />\n                    <ul className=\"flex items-center -space-x-px h-10 text-base app-shadow rounded-lg\">\n                        <li>\n                            <button\n                                onClick={goToPreviousPage}\n                                disabled={currentPage === 1}\n                                className={`flex items-center justify-center px-3 h-10 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white ${\n                                    currentPage === 1\n                                        ? 'cursor-not-allowed opacity-50'\n                                        : ''\n                                }`}\n                            >\n                                <span className=\"sr-only\">Previous</span>\n                                <svg\n                                    className=\"w-3 h-3 rtl:rotate-180\"\n                                    aria-hidden=\"true\"\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    fill=\"none\"\n                                    viewBox=\"0 0 6 10\"\n                                >\n                                    <path\n                                        stroke=\"currentColor\"\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        strokeWidth=\"2\"\n                                        d=\"M5 1 1 5l4 4\"\n                                    />\n                                </svg>\n                            </button>\n                        </li>\n                        {getPageNumbers().map((page) => (\n                            <li key={`page-${page}`}>\n                                <button\n                                    onClick={() => goToPage(page)}\n                                    className={`!rounded-none !border-1 !py-1.5 !px-3 ${\n                                        currentPage === page\n                                            ? 'app-button-fill'\n                                            : 'app-button'\n                                    }`}\n                                >\n                                    {page}\n                                </button>\n                            </li>\n                        ))}\n                        <li>\n                            <button\n                                onClick={goToNextPage}\n                                disabled={currentPage === totalPages}\n                                className={`flex items-center justify-center px-3 h-10 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white ${\n                                    currentPage === totalPages\n                                        ? 'cursor-not-allowed opacity-50'\n                                        : ''\n                                }`}\n                            >\n                                <span className=\"sr-only\">Next</span>\n                                <svg\n                                    className=\"w-3 h-3 rtl:rotate-180\"\n                                    aria-hidden=\"true\"\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    fill=\"none\"\n                                    viewBox=\"0 0 6 10\"\n                                >\n                                    <path\n                                        stroke=\"currentColor\"\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        strokeWidth=\"2\"\n                                        d=\"m1 9 4-4-4-4\"\n                                    />\n                                </svg>\n                            </button>\n                        </li>\n                    </ul>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport interface ITable {\n    columns: {\n        header?: string;\n        field: string;\n        headerCell?: ReactNode;\n        cell?: (params: { value: string; row: ILargeRecord }) => ReactNode;\n        cellClass?: string;\n    }[];\n    data: ILargeRecord[];\n}\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/thumbnail.tsx",
    "content": "import { useState } from 'react';\nimport SvgIcon from './svg';\n\nexport const Thumbnail = ({\n    url,\n    className = 'w-16 h-16',\n}: {\n    url: string;\n    className?: string;\n}) => {\n    const [imageError, setImageError] = useState(false);\n\n    return imageError ? (\n        <SvgIcon path=\"/icons/svg/file.svg\" className={className} />\n    ) : (\n        <img\n            src={url}\n            className={className}\n            onError={() => {\n                setImageError(true);\n            }}\n        />\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/components/toast.tsx",
    "content": "import SvgIcon from './svg';\n\n//\nconst Toast = ({\n    type,\n    message,\n    close,\n}: {\n    type: 'info' | 'error' | 'warning' | 'success';\n    message: string;\n    close: () => void;\n}) => (\n    <div\n        data-testid=\"TOAST\"\n        className={`flex items-center max-w-[400px] w-full p-2 mb-4 rounded-lg shadow-2xl ${\n            type === 'success'\n                ? 'bg-green-100'\n                : type === 'error'\n                  ? 'bg-red-100'\n                  : type === 'warning'\n                    ? ' bg-orange-100'\n                    : ' bg-blue-100'\n        }`}\n        role=\"alert\"\n    >\n        {\n            {\n                info: (\n                    <div className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200\">\n                        <SvgIcon\n                            path=\"/icons/svg/info.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n                error: (\n                    <div className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200\">\n                        <SvgIcon\n                            path=\"/icons/svg/error.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n                warning: (\n                    <div\n                        v-if=\"toast.type === 'warning'\"\n                        className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-orange-500 bg-orange-100 rounded-lg dark:bg-orange-700 dark:text-orange-200\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/warning.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n                success: (\n                    <div\n                        v-if=\"toast.type === 'success'\"\n                        className=\"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200\"\n                    >\n                        <SvgIcon\n                            path=\"/icons/svg/check_circle.svg\"\n                            className=\"h-6 w-6\"\n                        ></SvgIcon>\n                    </div>\n                ),\n            }[type]\n        }\n        <div\n            className={`mx-3 text-sm font-normal ${\n                type === 'success'\n                    ? 'text-green-500'\n                    : type === 'error'\n                      ? 'text-red-500'\n                      : type === 'warning'\n                        ? ' text-orange-500'\n                        : ' text-blue-500'\n            }`}\n        >\n            {message}\n        </div>\n        <button\n            className=\"ms-auto -mx-1.5 -my-1.5 text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 f p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8\"\n            data-dismiss-target=\"#toast-success\"\n            aria-label=\"Close\"\n            onContextMenu={() => {\n                return false;\n            }}\n            onClick={close}\n        >\n            <SvgIcon path=\"/icons/svg/close.svg\" className=\"h-6 w-6\"></SvgIcon>\n        </button>\n    </div>\n);\n\nexport default Toast;\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/app.tsx",
    "content": "import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { FormDemo } from './demos/formDemo';\nimport FormDemoRaw from './demos/formDemo?raw';\nimport { TableDemo } from './demos/tableDemo';\nimport TableDemoRaw from './demos/tableDemo?raw';\nimport { FilterTableDemo } from './demos/filterTableDemo';\nimport FilterTableDemoRaw from './demos/filterTableDemo?raw';\nimport { CodeBlock } from './demos/codeBlock';\nimport { Avatar } from 'src/app/components/avatar';\nimport { Copy } from 'src/app/components/copy';\nimport { DialogView } from 'src/app/components/dialog';\nimport { FileViewer } from 'src/app/components/fileViewer';\nimport SvgIcon from 'src/app/components/svg';\nimport { Thumbnail } from 'src/app/components/thumbnail';\n\nexport default () => {\n    const navigate = useNavigate();\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [imageDialogOpen, setImageDialogOpen] = useState(false);\n    const [videoDialogOpen, setVideoDialogOpen] = useState(false);\n\n    return (\n        <div className=\"max-w-screen-md app-width mx-auto py-8 flex flex-col gap-8\">\n            <h1 className=\"text-4xl font-bold text-gray-800 dark:text-gray-100 tracking-tight\">\n                Pages Showcase\n            </h1>\n            <section className=\"block\">\n                <button\n                    className=\"app-button whitespace-nowrap float-left m-2 app-shadow\"\n                    onClick={() => navigate(routes.signIn)}\n                >\n                    Sign In\n                </button>\n                <button\n                    className=\"app-button whitespace-nowrap float-left m-2 app-shadow\"\n                    onClick={() => navigate(routes.signUp)}\n                >\n                    Sign Up\n                </button>\n                <button\n                    className=\"app-button whitespace-nowrap float-left m-2 app-shadow\"\n                    onClick={() => navigate(routes.forgotPassword)}\n                >\n                    Forgot password\n                </button>\n                <button\n                    className=\"app-button whitespace-nowrap float-left m-2 app-shadow\"\n                    onClick={() =>\n                        navigate(\n                            routes.resetPassword + '?token=EMAIL_TOKEN_HERE'\n                        )\n                    }\n                >\n                    Reset password\n                </button>\n                <button\n                    className=\"app-button whitespace-nowrap float-left m-2 app-shadow\"\n                    onClick={() => navigate(routes.maintenance)}\n                >\n                    Maintenance\n                </button>\n                <button\n                    className=\"app-button whitespace-nowrap float-left m-2 app-shadow\"\n                    onClick={() => navigate(routes['404'])}\n                >\n                    404\n                </button>\n            </section>\n\n            <h1 className=\"text-4xl font-bold text-gray-800 dark:text-gray-100 tracking-tight mt-10\">\n                Components Showcase\n            </h1>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Form Demo\n                </h2>\n                <FormDemo />\n                <CodeBlock code={FormDemoRaw} />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Table Demo\n                </h2>\n                <TableDemo />\n                <CodeBlock code={TableDemoRaw} />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Filter Table Demo\n                </h2>\n                <FilterTableDemo />\n                <CodeBlock code={FilterTableDemoRaw} />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Avatar Demo\n                </h2>\n                <div className=\"flex gap-4\">\n                    <Avatar name=\"John Doe\" />\n                    <Avatar name=\"Jane Smith\" image=\"/images/profile.jpg\" />\n                </div>\n                <CodeBlock\n                    code={`\n<div className=\"flex gap-4\">\n    <Avatar name=\"John Doe\" />\n    <Avatar name=\"Jane Smith\" image=\"/images/profile.jpg\" />\n</div>\n                `}\n                />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Copy Demo\n                </h2>\n                <Copy content=\"Text to copy\">\n                    <span className=\"mr-2\">Click to copy: </span>\n                </Copy>\n                <CodeBlock\n                    code={`\n<Copy content=\"Text to copy\">\n    <span className=\"mr-2\">Click to copy: </span>\n</Copy>\n                `}\n                />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Dialog Demo\n                </h2>\n                <button\n                    className=\"app-button app-shadow w-32\"\n                    onClick={() => setDialogOpen(true)}\n                >\n                    Open Dialog\n                </button>\n                <DialogView\n                    open={dialogOpen}\n                    close={() => setDialogOpen(false)}\n                >\n                    <div className=\"p-6\">\n                        <h3 className=\"text-lg font-semibold\">\n                            Dialog Content\n                        </h3>\n                        <p>This is a sample dialog content.</p>\n                    </div>\n                </DialogView>\n                <CodeBlock\n                    code={`\nconst [dialogOpen, setDialogOpen] = useState(false);\n\n<button\n    className=\"app-button app-shadow w-32\"\n    onClick={() => setDialogOpen(true)}\n>\n    Open Dialog\n</button>\n<DialogView\n    open={dialogOpen}\n    close={() => setDialogOpen(false)}\n>\n    <div className=\"p-6\">\n        <h3 className=\"text-lg font-semibold\">Dialog Content</h3>\n        <p>This is a sample dialog content.</p>\n    </div>\n</DialogView>\n                `}\n                />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    FileViewer Demos\n                </h2>\n                <div className=\"flex gap-4\">\n                    <button\n                        className=\"app-button app-shadow w-32\"\n                        onClick={() => setImageDialogOpen(true)}\n                    >\n                        View Image\n                    </button>\n                    <button\n                        className=\"app-button app-shadow w-32\"\n                        onClick={() => setVideoDialogOpen(true)}\n                    >\n                        View Video\n                    </button>\n                </div>\n\n                <DialogView\n                    open={imageDialogOpen}\n                    close={() => setImageDialogOpen(false)}\n                    contentClass=\"p-2\"\n                >\n                    <FileViewer url=\"/images/profile.jpg\" />\n                </DialogView>\n\n                <DialogView\n                    open={videoDialogOpen}\n                    close={() => setVideoDialogOpen(false)}\n                    contentClass=\"p-2\"\n                >\n                    <FileViewer url=\"/images/setup_and_test.mp4\" />\n                </DialogView>\n                <CodeBlock\n                    code={`\nconst [imageDialogOpen, setImageDialogOpen] = useState(false);\nconst [videoDialogOpen, setVideoDialogOpen] = useState(false);\n\n<div className=\"flex gap-4\">\n    <button\n        className=\"app-button app-shadow w-32\"\n        onClick={() => setImageDialogOpen(true)}\n    >\n        View Image\n    </button>\n    <button\n        className=\"app-button app-shadow w-32\"\n        onClick={() => setVideoDialogOpen(true)}\n    >\n        View Video\n    </button>\n</div>\n\n<DialogView\n    open={imageDialogOpen}\n    close={() => setImageDialogOpen(false)}\n    contentClass=\"p-2\"\n>\n    <FileViewer url=\"/images/profile.jpg\" />\n</DialogView>\n\n<DialogView\n    open={videoDialogOpen}\n    close={() => setVideoDialogOpen(false)}\n    contentClass=\"p-2\"\n>\n    <FileViewer url=\"/images/setup_and_test.mp4\" />\n</DialogView>\n                `}\n                />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    SVG Icon Demo\n                </h2>\n                <div className=\"flex gap-4\">\n                    <SvgIcon\n                        path=\"/icons/svg/github.svg\"\n                        className=\"w-6 h-6 text-green-500\"\n                    />\n                    <SvgIcon\n                        path=\"/icons/svg/linkedIn.svg\"\n                        className=\"w-6 h-6 text-gray-500\"\n                    />\n                </div>\n                <CodeBlock\n                    code={`\n<div className=\"flex gap-4\">\n    <SvgIcon\n        path=\"/icons/svg/github.svg\"\n        className=\"w-6 h-6 text-green-500\"\n    />\n    <SvgIcon\n        path=\"/icons/svg/linkedIn.svg\"\n        className=\"w-6 h-6 text-gray-500\"\n    />\n</div>\n                `}\n                />\n            </section>\n\n            <section className=\"flex flex-col gap-4\">\n                <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2\">\n                    Thumbnail Demo\n                </h2>\n                <div className=\"flex gap-4\">\n                    <Thumbnail url=\"/images/maintenance.png\" />\n                    <Thumbnail url=\"invalid-url\" />\n                </div>\n                <CodeBlock\n                    code={`\n<div className=\"flex gap-4\">\n    <Thumbnail url=\"/images/maintenance.png\" />\n    <Thumbnail url=\"invalid-url\" />\n</div>\n                `}\n                />\n            </section>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/authentication/forgotPassword.tsx",
    "content": "import { useNavigate } from 'react-router-dom';\nimport { emailRegex } from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport { requestResetPassword } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\n\n//\nconst form = {\n    email: {\n        label: 'Email',\n        placeHolder: 'Enter your email',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your email',\n        validations: [\n            {\n                type: 'regex',\n                validate: emailRegex,\n                message: 'Invalid email',\n            },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const navigate = useNavigate();\n\n    const call = async (payload: ILargeRecord) => {\n        const res = await requestResetPassword(payload);\n        return !res.error;\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Forgot Password</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Request reset password link\"\n                    layoutClass=\"gap-1\"\n                />\n                <div className=\"w-full border-t border-gray-600\"></div>\n                <div\n                    onClick={() => navigate(routes.signIn)}\n                    className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                >\n                    Back to login\n                </div>\n            </div>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/authentication/resetPassword.tsx",
    "content": "import { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\n//\nimport { passwordRegex } from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport { changePassword } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\n\n//\nconst form = {\n    password: {\n        label: 'New Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n        validations: [\n            {\n                type: 'regex',\n                validate: passwordRegex,\n                message:\n                    'Password must contain at least one uppercase letter, one lower case, one number, one symbol(@$!%*?&#), and be at least 8 characters long',\n            },\n        ],\n    },\n    confirmPassword: {\n        label: 'Re-Enter New Password',\n        placeHolder: 'Re-enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter confirmation password',\n        validations: [\n            {\n                type: 'function',\n                validate: (values, name) => {\n                    return values.password === values[name]\n                        ? ''\n                        : 'Password does not match';\n                },\n            },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const [searchParams] = useSearchParams();\n    const navigate = useNavigate();\n\n    //\n    const call = async (payload: ILargeRecord) => {\n        const res = await changePassword(\n            payload,\n            searchParams.get('token') as string\n        );\n        if (!res.error) navigate(routes.signIn);\n        return !res.error;\n    };\n\n    //\n    useEffect(() => {\n        const token = searchParams.get('token') as string;\n        if (!token) navigate(routes.root);\n    }, [searchParams.get('token')]);\n\n    //\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Reset Password</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Change Password\"\n                    layoutClass=\"gap-1\"\n                />\n            </div>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/authentication/signIn.tsx",
    "content": "import { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { emailRegex } from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport { login } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport { UserContext } from 'src/providers/context';\n\n//\nconst form = {\n    email: {\n        label: 'Email',\n        placeHolder: 'Enter your email',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your email',\n        validations: [\n            {\n                type: 'regex',\n                validate: emailRegex,\n                message: 'Invalid email',\n            },\n        ],\n    },\n    password: {\n        label: 'Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const navigate = useNavigate();\n    const user = useContext(UserContext);\n\n    //\n    const call = async (payload: ILargeRecord) => {\n        const res = await login(payload);\n        if (!res.error) {\n            user.updateUser();\n            navigate(routes.root);\n        }\n        return !res.error;\n    };\n\n    return (\n        <div className=\"flex flex-col items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Sign In</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Sign In\"\n                    layoutClass=\"gap-1\"\n                />\n                <div className=\"w-full border-t border-gray-600\"></div>\n                <div className=\"flex flex-row justify-between\">\n                    <a\n                        onClick={() => navigate(routes.signUp)}\n                        className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                    >\n                        Create new account\n                    </a>\n                    <a\n                        onClick={() => navigate(routes.forgotPassword)}\n                        className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                    >\n                        Forgot password?\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/authentication/signUp.tsx",
    "content": "import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n    emailRegex,\n    fullNameRegex,\n    passwordRegex,\n} from 'services/constants/regex';\nimport { routes } from 'services/constants/routes';\nimport {\n    register,\n    requestVerification,\n} from 'services/repository/authentication';\nimport { DialogView } from 'src/app/components/dialog';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport SvgIcon from 'src/app/components/svg';\n\n//\nconst form = {\n    name: {\n        label: 'Name',\n        placeHolder: 'Enter your name',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your name',\n        validations: [\n            {\n                type: 'regex',\n                validate: fullNameRegex,\n                message: 'Invalid name',\n            },\n        ],\n    },\n    email: {\n        label: 'Email',\n        placeHolder: 'Enter your email',\n        type: 'text',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your email',\n        validations: [\n            {\n                type: 'regex',\n                validate: emailRegex,\n                message: 'Invalid email',\n            },\n        ],\n    },\n    password: {\n        label: 'Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n        validations: [\n            {\n                type: 'regex',\n                validate: passwordRegex,\n                message:\n                    'Password must contain at least one uppercase letter, one lower case, one number, one symbol(@$!%*?&#), and be at least 8 characters long',\n            },\n        ],\n    },\n    confirmPassword: {\n        label: 'Confirm Password',\n        placeHolder: 'Re-enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter confirmation password',\n    },\n} as Record<string, IFormField>;\n\nexport default () => {\n    const [email, setEmail] = useState<string>('');\n    const [loading, setLoading] = useState(false);\n    const [open, setOpen] = useState(false);\n    const navigate = useNavigate();\n\n    const handleOpen = () => setOpen((prev) => !prev);\n\n    const call = async (payload: ILargeRecord) => {\n        const res = await register(payload);\n        if (!res.error) {\n            setEmail(payload.email);\n            await requestVerification({ email: payload.email });\n            handleOpen();\n        }\n        return !res.error;\n    };\n\n    const resendEmail = async () => {\n        if (email) {\n            setLoading(true);\n            await requestVerification({\n                email,\n            });\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <div className=\"max-w-[400px] w-full flex flex-col gap-2 p-2 app-container app-shadow\">\n                <p className=\"text-4xl font-bold\">Sign Up</p>\n                <FormBuilder\n                    form={form}\n                    call={call}\n                    buttonText=\"Sign Up\"\n                    layoutClass=\"gap-1\"\n                />\n                <div className=\"w-full border-t border-gray-600\"></div>\n                <div\n                    onClick={() => navigate(routes.signIn)}\n                    className=\"text-md underline text-gray-500 hover:text-current cursor-pointer\"\n                >\n                    Already have an account?\n                </div>\n            </div>\n            <DialogView open={open} close={handleOpen}>\n                <div className=\"flex flex-col items-center gap-5 rounded-lg p-7 py-10 max-w-md\">\n                    <p className=\"text-xl font-bold flex items-center gap-2\">\n                        <SvgIcon\n                            path=\"/icons/avg/app/check-rounded.svg\"\n                            className=\"w-6 h-6\"\n                        />\n                        Check Your Email\n                    </p>\n                    <p className=\"text-lg text-center\">\n                        Email verify request has been sent to your email. Please\n                        check your email to verify your email. If you didn't\n                        receive\n                    </p>\n                    <button\n                        className=\"app-button-fill !text-base\"\n                        disabled={loading}\n                        onClick={resendEmail}\n                    >\n                        Click here to resend\n                    </button>\n                </div>\n            </DialogView>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/authentication/verification.tsx",
    "content": "import { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { verifyEmailAccount } from 'services/repository/authentication';\nimport SvgIcon from 'src/app/components/svg';\n\n//\nexport default () => {\n    const [response, setResponse] = useState<{\n        error: boolean;\n        message: string;\n    }>();\n    const [searchParams] = useSearchParams();\n    const navigate = useNavigate();\n\n    //\n    useEffect(() => {\n        const token = searchParams.get('token') as string;\n        if (!token) {\n            navigate(routes.root);\n        } else\n            verifyEmailAccount(token).then((res) => {\n                setResponse(res);\n            });\n    }, [searchParams.get('token')]);\n\n    //\n    const goToHome = () => {\n        navigate(routes.root);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-5 items-center justify-center app-height app-width\">\n            <h1\n                data-testid=\"MESSAGE\"\n                className={`text-3xl font-bold flex gap-2 items-center justify-center ${response?.error ? 'text-red-500' : 'text-green-500'}`}\n            >\n                <SvgIcon\n                    path=\"/icons/svg/error.svg\"\n                    className=\"h-8 w-8\"\n                ></SvgIcon>\n                {response?.message}\n            </h1>\n            <button className=\"app-button\" onClick={goToHome}>\n                Home\n            </button>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/components/changePassword.tsx",
    "content": "//\nimport { passwordRegex } from 'services/constants/regex';\nimport { updatePassword } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport SvgIcon from 'src/app/components/svg';\n\n//\nconst form = {\n    currentPassword: {\n        label: 'Current Password',\n        placeHolder: 'Enter your current password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your current password',\n    },\n    password: {\n        label: 'New Password',\n        placeHolder: 'Enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter your password',\n        validations: [\n            {\n                type: 'regex',\n                validate: passwordRegex,\n                message:\n                    'Password must contain at least one uppercase letter, one lower case, one number, one symbol(@$!%*?&#), and be at least 8 characters long',\n            },\n        ],\n    },\n    confirmPassword: {\n        label: 'Re-Enter New Password',\n        placeHolder: 'Re-enter your password',\n        type: 'password',\n        required: true,\n        value: '',\n        requiredLabel: 'Please enter confirmation password',\n        validations: [\n            {\n                type: 'function',\n                validate: (values, name) => {\n                    return values.password === values[name]\n                        ? ''\n                        : 'Password does not match';\n                },\n            },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport const ChangePassword = () => {\n    const call = async (payload: ILargeRecord) => {\n        const res = await updatePassword(payload);\n        return !res.error;\n    };\n\n    return (\n        <>\n            <p\n                className=\"text-lg font-bold flex items-center gap-2 border-b pb-4\"\n                data-testid=\"CHANGE_PASSWORD_PAGE\"\n            >\n                <SvgIcon path=\"/icons/svg/lock.svg\" className=\"w-5 h-5\" />{' '}\n                Change Password\n            </p>\n            <p className=\"text-md text-gray-400\">Update your password</p>\n            <FormBuilder\n                form={form}\n                call={call}\n                buttonText=\"Update\"\n                layoutClass={`gap-1 sm:gap-2 max-w-screen-sm mt-6`}\n                buttonClass={`app-button app-shadow !text-[16px] !px-6`}\n            />\n        </>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/components/profile.tsx",
    "content": "import { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { UserContext } from 'src/providers/context';\nimport { Avatar } from 'src/app/components/avatar';\nimport { logout } from 'services/repository/authentication';\n\n//\nexport const Profile = () => {\n    const user = useContext(UserContext);\n    const [open, setOpen] = useState(false);\n    const navigate = useNavigate();\n    const menuRef = useRef<HTMLDivElement>(null);\n\n    const handleOpen = () => setOpen((prev) => !prev);\n\n    const _logout = async () => {\n        await logout();\n        user?.updateUser?.();\n    };\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (\n                open &&\n                menuRef.current &&\n                event.target &&\n                !menuRef.current?.contains(event.target as Node)\n            )\n                setOpen(false);\n        };\n\n        if (open) document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [open]);\n\n    return (\n        <div className=\"relative cursor-pointer\">\n            <Avatar name={user!.name!} onClick={handleOpen} />\n            {open && (\n                <div\n                    ref={menuRef}\n                    className=\"app-menu app-shadow border-transparent mt-2 w-44\"\n                    role=\"menu\"\n                >\n                    <div\n                        className=\"app-menu-item\"\n                        role=\"menuitem\"\n                        data-testid=\"profile\"\n                        onClick={() => {\n                            handleOpen();\n                            navigate(routes.settings, {\n                                state: {\n                                    menu: 'profile_tab',\n                                },\n                            });\n                        }}\n                    >\n                        Profile\n                    </div>\n                    <div\n                        className=\"app-menu-item\"\n                        role=\"menuitem\"\n                        data-testid=\"change-password\"\n                        onClick={() => {\n                            handleOpen();\n                            navigate(routes.settings, {\n                                state: {\n                                    menu: 'change_password_tab',\n                                },\n                            });\n                        }}\n                    >\n                        Change password\n                    </div>\n                    <div\n                        className=\"app-menu-item\"\n                        role=\"menuitem\"\n                        data-testid=\"settings\"\n                        onClick={() => {\n                            handleOpen();\n                            navigate(routes.settings, {\n                                state: {\n                                    menu: 'setting_tab',\n                                },\n                            });\n                        }}\n                    >\n                        Settings\n                    </div>\n                    <div\n                        className=\"app-menu-item !text-red-500\"\n                        role=\"menuitem\"\n                        data-testid=\"logout\"\n                        onClick={() => {\n                            handleOpen();\n                            _logout();\n                        }}\n                    >\n                        Logout\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/components/setting.tsx",
    "content": "//\nimport SvgIcon from 'src/app/components/svg';\n\n//\nexport const Setting = () => {\n    return (\n        <>\n            <p\n                className=\"text-lg font-bold flex items-center gap-2 border-b pb-4\"\n                data-testid=\"APP_SETTING_PAGE\"\n            >\n                <SvgIcon path=\"/icons/svg/setting.svg\" className=\"w-5 h-5\" />{' '}\n                Settings\n            </p>\n            <p className=\"text-lg font-bold text-center py-10\">App Settings</p>\n        </>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/components/userInfo.tsx",
    "content": "import { useContext, useMemo } from 'react';\n\n//\nimport { fullNameRegex } from 'services/constants/regex';\nimport { updateUser } from 'services/repository/authentication';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport SvgIcon from 'src/app/components/svg';\nimport { UserContext } from 'src/providers/context';\n\n//\nexport const UserInfo = () => {\n    const user = useContext(UserContext);\n\n    const form = useMemo(\n        () =>\n            ({\n                name: {\n                    label: 'Name',\n                    placeHolder: 'Enter your name',\n                    type: 'text',\n                    required: true,\n                    value: user?.name || '',\n                    requiredLabel: 'Please enter your name',\n                    validations: [\n                        {\n                            type: 'regex',\n                            validate: fullNameRegex,\n                            message: 'Invalid name',\n                        },\n                    ],\n                },\n                email: {\n                    label: 'Email',\n                    placeHolder: 'Enter your email',\n                    type: 'text',\n                    required: true,\n                    value: user?.email || '',\n                    requiredLabel: 'Please enter your email',\n                    disabled: true,\n                },\n            }) as Record<string, IFormField>,\n        [JSON.stringify(user)]\n    );\n\n    const call = async (_payload: ILargeRecord) => {\n        const res = await updateUser({\n            name: _payload.name,\n            profileURL: _payload.profileURL,\n        });\n        if (!res.error) user?.updateUser?.();\n        return !res.error;\n    };\n\n    return (\n        <>\n            <p\n                className=\"text-lg font-bold flex items-center gap-2 border-b pb-4\"\n                data-testid=\"USERINFO_PAGE\"\n            >\n                <SvgIcon path=\"/icons/svg/user.svg\" className=\"w-5 h-5\" />{' '}\n                Profile\n            </p>\n            <p className=\"text-md text-gray-400\">\n                Update your personal information and profile settings.\n            </p>\n            <FormBuilder\n                form={form}\n                call={call}\n                buttonText=\"Update\"\n                layoutClass={`gap-1 sm:gap-2 max-w-screen-sm mt-6`}\n                buttonClass={`app-button app-shadow !text-[16px] !px-6`}\n            />\n        </>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/demos/codeBlock.tsx",
    "content": "// ./demos/codeBlock.tsx\nimport { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nexport const CodeBlock = ({ code }: { code: string }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [isCopied, setIsCopied] = useState(false);\n\n    // Truncate code to first 5 lines for collapsed view\n    const truncatedCode = code.split('\\n').slice(0, 5).join('\\n');\n    const displayCode = isExpanded ? code : truncatedCode;\n\n    const handleCopy = () => {\n        navigator.clipboard.writeText(code).then(() => {\n            setIsCopied(true);\n            setTimeout(() => setIsCopied(false), 2000); // Reset after 2 seconds\n        });\n    };\n\n    const handleToggle = () => {\n        setIsExpanded(!isExpanded);\n    };\n\n    return (\n        <div className=\"w-full rounded-xl p-3 bg-neutral-800 max-w-screen-md mx-auto no-scrollbar relative\">\n            <button\n                onClick={handleCopy}\n                className=\"absolute top-3 right-3 px-2 py-1 text-sm text-white bg-neutral-700 hover:bg-neutral-600 rounded-md transition\"\n                title={isCopied ? 'Copied!' : 'Copy to clipboard'}\n            >\n                {isCopied ? 'Copied!' : 'Copy'}\n            </button>\n\n            <SyntaxHighlighter\n                language=\"tsx\"\n                style={darcula}\n                customStyle={{\n                    margin: 0,\n                    padding: '1rem',\n                    background: 'transparent',\n                    maxHeight: isExpanded ? 'none' : '200px',\n                    overflowY: 'hidden',\n                }}\n            >\n                {displayCode}\n            </SyntaxHighlighter>\n\n            {code.split('\\n').length > 5 && (\n                <button\n                    onClick={handleToggle}\n                    className=\"mt-2 text-sm text-neutral-300 hover:text-white underline\"\n                >\n                    {isExpanded ? 'Collapse' : 'Expand'}\n                </button>\n            )}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/demos/filterTableDemo.tsx",
    "content": "import { useState } from 'react';\n\n//\nimport { tableData } from 'services/constants/demo';\nimport { Table, ITable } from 'src/app/components/table';\nimport { Filter } from 'src/app/components/filter';\nimport { IFormField } from 'src/app/components/form/form.types';\n\n//\nconst columns: ITable['columns'] = [\n    {\n        field: '',\n        header: 'S.No.',\n        cell: (params) => params.row.index,\n    },\n    {\n        field: 'name',\n        header: 'Full Name',\n    },\n    {\n        field: 'email',\n        header: 'Email',\n    },\n    {\n        field: 'role',\n        header: 'Role',\n    },\n    {\n        field: 'status',\n        header: 'Status',\n        cell: (params) => (\n            <span\n                className={`px-2 py-1 text-white text-sm rounded app-shadow ${\n                    params.row.status === 'Active'\n                        ? 'bg-green-500'\n                        : 'bg-red-500'\n                }`}\n            >\n                {params.row.status}\n            </span>\n        ),\n    },\n    {\n        field: '',\n        header: 'Actions',\n        cell: () => (\n            <div className=\"flex gap-2\">\n                <button className=\"app-button app-shadow\">Edit</button>\n                <button className=\"app-button app-shadow\">Delete</button>\n            </div>\n        ),\n    },\n];\n\nconst filterForm = {\n    text: {\n        label: 'Search Name',\n        type: 'text',\n        placeHolder: 'Enter name',\n        required: false,\n    },\n    select: {\n        label: 'Role',\n        type: 'select',\n        placeHolder: 'Select role',\n        required: false,\n        options: [\n            { id: '', label: 'All' },\n            { id: 'Admin', label: 'Admin' },\n            { id: 'User', label: 'User' },\n            { id: 'Moderator', label: 'Moderator' },\n        ],\n    },\n} as Record<string, IFormField>;\n\nexport const FilterTableDemo = () => {\n    const [filteredData, setFilteredData] = useState(tableData);\n\n    const mockApiCall = async (filterString?: string) => {\n        let updatedData = tableData;\n        const params = new URLSearchParams(filterString);\n\n        const nameFilter = params.get('text')?.toLowerCase();\n        const roleFilter = params.get('select');\n\n        if (nameFilter) {\n            updatedData = updatedData.filter((item) =>\n                item.name.toLowerCase().includes(nameFilter)\n            );\n        }\n\n        if (roleFilter) {\n            updatedData = updatedData.filter(\n                (item) => item.role === roleFilter\n            );\n        }\n\n        return Promise.resolve(updatedData);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-6\">\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Filters\n            </h2>\n            <Filter\n                form={filterForm}\n                call={mockApiCall}\n                setData={setFilteredData}\n            />\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Filtered Table\n            </h2>\n            <Table columns={columns} data={filteredData} />\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/demos/formDemo.tsx",
    "content": "import { useState } from 'react';\nimport { IFormField } from 'src/app/components/form/form.types';\nimport { FormBuilder } from 'src/app/components/form/main';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n//\nconst form = {\n    label: {\n        label: 'Only label',\n        type: 'label',\n        required: true,\n    },\n    text: {\n        label: 'Textfield',\n        type: 'text',\n        placeHolder: 'Enter some input',\n        required: true,\n        requiredLabel: 'Textfield is required',\n    },\n    number: {\n        label: 'Number field',\n        type: 'number',\n        placeHolder: '1234567890',\n        required: true,\n        requiredLabel: 'Number field is required',\n    },\n    textarea: {\n        label: 'Textarea field',\n        type: 'textarea',\n        placeHolder:\n            'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Error quaerat soluta eum nulla fugiat fuga mollitia nisi recusandae voluptates! Nulla!',\n        multiple: true,\n        rows: 4,\n        required: true,\n        requiredLabel: 'Textarea field is required',\n    },\n    date: {\n        label: 'Date field',\n        type: 'date',\n        placeHolder: 'Select date',\n        required: true,\n        requiredLabel: 'Date field is required',\n    },\n    time: {\n        label: 'Time field',\n        type: 'time',\n        placeHolder: 'Select time',\n        required: true,\n        requiredLabel: 'Time field is required',\n    },\n    datetime: {\n        label: 'Date and Time field',\n        type: 'datetime-local',\n        placeHolder: 'Select date and time',\n        required: true,\n        requiredLabel: 'Date and Time field is required',\n    },\n    file: {\n        label: 'File field',\n        type: 'file',\n        placeHolder: 'Select file',\n        required: true,\n        requiredLabel: 'File field is required',\n        size: 'min-h-72 w-72',\n        imageSize: 'min-h-72 w-72',\n        className: '!w-fit',\n        layoutClass: '!grid-cols-1 sm:!grid-cols-2',\n        accept: 'image/png,image/jpg,image/jpeg,application/pdf',\n    },\n    tag: {\n        label: 'Tag field',\n        type: 'tag',\n        placeHolder: 'Enter tags',\n        required: true,\n        requiredLabel: 'Tag field is required',\n    },\n    password: {\n        label: 'Password field',\n        type: 'password',\n        placeHolder: 'Enter password',\n        required: true,\n        requiredLabel: 'Password field is required',\n    },\n    autocomplete: {\n        label: 'Autocomplete field',\n        type: 'autocomplete',\n        placeHolder: 'Select option',\n        required: true,\n        requiredLabel: 'Autocomplete field is required',\n        options: [\n            {\n                id: 'option1',\n                label: 'Option 1',\n            },\n            {\n                id: 'option2',\n                label: 'Option 2',\n            },\n        ],\n    },\n    select: {\n        label: 'Select field',\n        type: 'select',\n        placeHolder: 'Select option',\n        required: true,\n        requiredLabel: 'Select field is required',\n        options: [\n            {\n                id: 'option1',\n                label: 'Option 1',\n            },\n            {\n                id: 'option2',\n                label: 'Option 2',\n            },\n        ],\n    },\n    otp: {\n        label: 'OTP field',\n        type: 'otp',\n        placeHolder: '0',\n        required: true,\n        requiredLabel: 'OTP field is required',\n    },\n    checkBox: {\n        label: 'Checkbox field',\n        type: 'checkbox',\n        options: [{ id: 'true', label: 'I agree this site is cool' }],\n        required: true,\n        requiredLabel: 'Checkbox field is required',\n    },\n    radio: {\n        label: 'Radio field',\n        type: 'radio',\n        options: [\n            { id: 'option1', label: 'Option 1' },\n            { id: 'option2', label: 'Option 2' },\n        ],\n        required: true,\n        requiredLabel: 'Radio field is required',\n    },\n    custom: {\n        type: 'custom',\n        element: ({ onFieldChange }) => (\n            <div className=\"flex flex-col gap-1\">\n                <label>Custom field</label>\n                <input\n                    className=\"bg-transparent border rounded-full px-3 py-2 w-full\"\n                    placeholder=\"Custom designed field\"\n                    onChange={(e) => {\n                        onFieldChange({\n                            name: 'custom',\n                            value: e.target.value,\n                        });\n                    }}\n                />\n            </div>\n        ),\n    },\n} as Record<string, IFormField>;\n\nexport const FormDemo = () => {\n    const [payload, setPayload] = useState(null);\n\n    const call = async (payload: ILargeRecord) => {\n        setPayload(payload); // Store the payload for display\n        return false; // Assuming this controls form submission success/failure\n    };\n\n    return (\n        <div className=\"flex flex-col gap-6\">\n            <FormBuilder\n                form={form}\n                call={call}\n                buttonText=\"Submit\"\n                layoutClass=\"mx-auto max-w-screen-sm w-full gap-5\"\n                buttonClass=\"mt-6\"\n            />\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Form payload\n            </h2>\n            <div className=\"relative rounded-lg bg-neutral-800 overflow-hidden\">\n                <SyntaxHighlighter\n                    language=\"json\"\n                    style={darcula}\n                    customStyle={{\n                        margin: 0,\n                        padding: '1rem',\n                        background: 'transparent',\n                        maxHeight: '300px', // Fixed height for consistency\n                        overflowY: 'auto',\n                    }}\n                >\n                    {payload\n                        ? JSON.stringify(payload, null, 2)\n                        : 'Submit form to see payload'}\n                </SyntaxHighlighter>\n            </div>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/demos/tableDemo.tsx",
    "content": "import { tableData } from 'services/constants/demo';\nimport { ITable, Table } from 'src/app/components/table';\n\n//\nconst columns: ITable['columns'] = [\n    {\n        field: '',\n        header: 'S.No.',\n        cell: (params) => params.row.index,\n    },\n    {\n        field: 'name',\n        header: 'Full Name',\n    },\n    {\n        field: 'email',\n        header: 'Email',\n    },\n    {\n        field: 'role',\n        header: 'Role',\n    },\n    {\n        field: 'status',\n        header: 'Status',\n        cell: (params) => (\n            <span\n                className={`px-2 py-1 text-white text-sm rounded app-shadow ${\n                    params.row.status === 'Active'\n                        ? 'bg-green-500'\n                        : 'bg-red-500'\n                }`}\n            >\n                {params.row.status}\n            </span>\n        ),\n    },\n    {\n        field: 'actions',\n        header: 'Actions',\n        cell: () => (\n            <div className=\"flex gap-2\">\n                <button className=\"app-button app-shadow\">Edit</button>\n                <button className=\"app-button app-shadow\">Delete</button>\n            </div>\n        ),\n    },\n];\n\nexport const TableDemo = () => {\n    return (\n        <div className=\"flex flex-col gap-6\">\n            <Table columns={columns} data={tableData} />\n            <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mt-10\">\n                Without Data\n            </h2>\n            <Table columns={columns} data={[]} />\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/layout.tsx",
    "content": "import { useContext, useEffect } from 'react';\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { generateKey } from 'services/repository/utils';\nimport { UserContext } from 'src/providers/context';\nimport { Logo } from '../components/logo';\nimport { Profile } from './components/profile';\nimport { Cookies } from '../components/cookies';\n\n//\nexport default () => {\n    const user = useContext(UserContext);\n    const navigate = useNavigate();\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return (\n        <div className=\"h-screen w-full flex flex-col gap-3\">\n            <div className=\"flex gap-2 px-5 py-4 w-full justify-between items-center\">\n                <button\n                    className=\"text-xl font-bold flex gap-1 items-center\"\n                    onClick={() => navigate(routes.root)}\n                >\n                    <Logo className=\"w-8 h-8\" /> {import.meta.env.VITE_APP_NAME}\n                </button>\n                {user?.signedIn ? (\n                    <div className=\"flex gap-2 items-center\">\n                        <button\n                            className=\"app-button border-transparent app-shadow\"\n                            onClick={() => navigate(routes.app)}\n                        >\n                            App\n                        </button>\n                        <Profile />\n                    </div>\n                ) : (\n                    <div className=\"flex gap-2\">\n                        <button\n                            className=\"app-button\"\n                            onClick={() => navigate(routes.signIn)}\n                        >\n                            Sign In\n                        </button>\n                        <button\n                            className=\"app-button app-shadow\"\n                            onClick={() => navigate(routes.signUp)}\n                        >\n                            Sign Up\n                        </button>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex flex-col gap-3 px-3 min-w-full app-width\">\n                <Outlet />\n            </div>\n            <div className=\"min-h-24 flex-1 w-full\" />\n            <div className=\"py-10 border-t border-black/10 dark:border-white/10 px-5\">\n                <div className=\"flex flex-col sm:flex-row gap-5 justify-between max-w-screen-xl mx-auto\">\n                    <div className=\"flex flex-col gap-5\">\n                        <p className=\"text-xl font-bold flex gap-1 items-center\">\n                            <Logo className=\"w-8 h-8\" />\n                            {import.meta.env.VITE_APP_NAME}\n                        </p>\n                        <p className=\"text-black/50 dark:text-white/50\">\n                            © {new Date().getFullYear()}{' '}\n                            {import.meta.env.VITE_APP_NAME}. All rights\n                            reserved.\n                        </p>\n                    </div>\n                    <div className=\"flex gap-5\">\n                        {[\n                            {\n                                title: 'Privacy policy',\n                                link: routes.privacyPolicy,\n                            },\n                            {\n                                title: 'Terms and condition',\n                                link: routes.termsAndConditions,\n                            },\n                        ].map((content) => (\n                            <button\n                                key={generateKey()}\n                                className=\"text-black/50 dark:text-white/50\"\n                                onClick={() => navigate(content.link)}\n                            >\n                                {content.title}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Cookies />\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/main.tsx",
    "content": "import { useNavigate } from 'react-router-dom';\n\n//\nimport { links, routes } from 'services/constants/routes';\nimport { Avatar } from '../components/avatar';\nimport SvgIcon from '../components/svg';\n// import { FormBuilder } from '../components/form/main';\n// import { IFormField } from '../components/form/form.types';\n// import { emailRegex } from 'services/constants/regex';\n\n//\nconst skills = [\n    {\n        icon: '/icons/svg/code.svg',\n        title: 'Frontend Development',\n        skills: ['React', 'Vue', 'TypeScript', 'Tailwind CSS', 'MUI'],\n    },\n    {\n        icon: '/icons/svg/storage.svg',\n        title: 'Backend Development',\n        skills: ['Node.js', 'Express'],\n    },\n    {\n        icon: '/icons/svg/stack.svg',\n        title: 'Database & DevOps',\n        skills: ['MySql', 'MongoDB', 'AWS', 'CI/CD', 'Cypress', 'Firebase'],\n    },\n];\n\nconst projects: ILargeRecord[] = [];\n\n// const contactForm = {\n//     name: {\n//         label: 'Name',\n//         type: 'text',\n//         required: true,\n//         requiredLabel: 'Please enter your name',\n//     },\n//     email: {\n//         label: 'Email',\n//         type: 'text',\n//         required: true,\n//         requiredLabel: 'Please enter your email',\n//         validations: [\n//             {\n//                 type: 'regex',\n//                 validate: emailRegex,\n//             },\n//         ],\n//     },\n//     subject: {\n//         label: 'Subject',\n//         type: 'text',\n//         required: true,\n//         requiredLabel: 'Please enter your subject',\n//         alignClass: 'col-span-1 sm:col-span-2',\n//     },\n//     message: {\n//         label: 'Message',\n//         type: 'textarea',\n//         rows: 4,\n//         required: true,\n//         requiredLabel: 'Please enter your message',\n//         alignClass: 'col-span-1 sm:col-span-2',\n//     },\n// } as Record<string, IFormField>;\n\n//\nexport default () => {\n    const navigate = useNavigate();\n\n    const calculateExperience = () => {\n        const start = new Date('2021-08-13');\n        const end = new Date(); // Today: March 19, 2025\n\n        let years = end.getFullYear() - start.getFullYear();\n        let months = end.getMonth() - start.getMonth();\n        let days = end.getDate() - start.getDate();\n\n        // Adjust if the current month/day hasn't reached the start month/day\n        if (months < 0 || (months === 0 && days < 0)) {\n            years--;\n            months += 12;\n        }\n        if (days < 0) {\n            const lastMonth = new Date(\n                end.getFullYear(),\n                end.getMonth() - 1,\n                start.getDate()\n            );\n            days = Math.floor(\n                (end.getTime() - lastMonth.getTime()) / (1000 * 60 * 60 * 24)\n            );\n            months--;\n        }\n\n        return `${years} years, ${months} months`;\n    };\n\n    // const call = async (payload: ILargeRecord) => {\n    //     console.log(payload);\n    //     return false;\n    // };\n\n    return (\n        <div className=\"max-w-screen-xl app-width flex flex-col gap-3 mx-auto\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-5 w-full app-height items-center justify-center\">\n                <div className=\"flex flex-col gap-7\">\n                    <p className=\"text-6xl font-bold\">Full-Stack Developer</p>\n                    <p className=\"text-xl\">\n                        I build modern web applications with cutting-edge\n                        technologies\n                    </p>\n                    <div className=\"flex gap-3\">\n                        <a\n                            className=\"text-xl app-button app-shadow\"\n                            href=\"/documents/sivaprakasam.pdf\"\n                            download=\"sivaprakasam.pdf\"\n                        >\n                            Resume\n                        </a>\n                        <button\n                            className=\"text-xl app-button app-shadow\"\n                            onClick={() => navigate(routes.app)}\n                        >\n                            App\n                        </button>\n                    </div>\n                    <div className=\"flex gap-3\">\n                        <a\n                            href={links.github}\n                            target=\"_blank\"\n                            className=\"app-shadow p-2.5 rounded-full\"\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/github.svg\"\n                                className=\"w-7 h-7\"\n                            />\n                        </a>\n                        <a\n                            href={links.linkedIn}\n                            target=\"_blank\"\n                            className=\"app-shadow p-2.5 rounded-full\"\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/linkedIn.svg\"\n                                className=\"w-7 h-7\"\n                            />\n                        </a>\n                        <a\n                            href={links.mail}\n                            target=\"_blank\"\n                            className=\"app-shadow p-2.5 rounded-full\"\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/mail.svg\"\n                                className=\"w-7 h-7\"\n                            />\n                        </a>\n                        <a\n                            href={links.contact}\n                            target=\"_blank\"\n                            className=\"app-shadow p-2.5 rounded-full\"\n                        >\n                            <SvgIcon\n                                path=\"/icons/svg/whatsapp.svg\"\n                                className=\"w-7 h-7\"\n                            />\n                        </a>\n                    </div>\n                </div>\n                <Avatar\n                    image=\"/images/profile.jpg\"\n                    name=\"Siva prakasam\"\n                    className=\"w-72 h-72 p-3 mx-auto text-[10rem]\"\n                />\n            </div>\n            <div className=\"flex flex-col gap-10 items-center my-10\">\n                <p className=\"text-5xl font-bold text-center\">About Me</p>\n                <div className=\"flex flex-col gap-3 app-container app-shadow max-w-screen-lg text-xl\">\n                    <p className=\"mb-4\">\n                        I’m a{' '}\n                        <strong className=\"text-blue-500\">\n                            passionate Full-Stack Developer\n                        </strong>{' '}\n                        with\n                        <strong className=\"text-blue-500 ml-1\">\n                            {calculateExperience()} years of professional\n                            experience\n                        </strong>{' '}\n                        in building modern, scalable web applications. With\n                        expertise in\n                        <span className=\"font-semibold\">\n                            React, Vue, TypeScript, Node.js, MySQL, Firebase,\n                            AWS, Google Cloud, GitHub CI/CD, and Cypress\n                        </span>\n                        , I specialize in crafting seamless user experiences\n                        backed by robust and secure backend architectures.\n                    </p>\n\n                    <p className=\"mb-4\">\n                        I have a{' '}\n                        <strong className=\"text-blue-500\">\n                            ready-to-use project setup\n                        </strong>{' '}\n                        that includes a{' '}\n                        <strong className=\"text-blue-500\">\n                            base authentication flow with security features\n                        </strong>\n                        , enabling me to rapidly build secure and scalable\n                        applications. My experience spans across\n                        <span className=\"font-semibold\">\n                            e-commerce, SaaS platforms, real-time analytics, and\n                            multiplayer applications\n                        </span>\n                        .\n                    </p>\n\n                    <h2 className=\"text-xl font-semibold mt-6\">🚀 What I Do</h2>\n                    <ul className=\"list-disc list-inside mb-4\">\n                        <li>\n                            <strong>Frontend Development</strong> – Building\n                            dynamic, responsive UIs with{' '}\n                            <span className=\"text-blue-500\">\n                                React, Vue, TypeScript, and Tailwind CSS\n                            </span>\n                            .\n                        </li>\n                        <li>\n                            <strong>Backend Development</strong> – Developing\n                            APIs and microservices using{' '}\n                            <span className=\"text-blue-500\">\n                                Node.js, Express, and MySQL\n                            </span>\n                            .\n                        </li>\n                        <li>\n                            <strong>Security & Authentication</strong> –\n                            Implementing secure authentication with{' '}\n                            <span className=\"text-blue-500\">\n                                JWT, OAuth, RBAC\n                            </span>\n                            .\n                        </li>\n                        <li>\n                            <strong>Performance Optimization</strong> –\n                            Improving app speed with{' '}\n                            <span className=\"text-blue-500\">\n                                caching, indexing, and serverless architectures\n                            </span>\n                            .\n                        </li>\n                        <li>\n                            <strong>Automation & Testing</strong> – Writing\n                            tests using{' '}\n                            <span className=\"text-blue-500\">\n                                Cypress, Jest, and CI/CD pipelines\n                            </span>\n                            .\n                        </li>\n                        <li>\n                            <strong>Cloud & DevOps</strong> – Deploying\n                            applications on{' '}\n                            <span className=\"text-blue-500\">\n                                AWS, Google Cloud, and Firebase\n                            </span>\n                            .\n                        </li>\n                    </ul>\n\n                    <h2 className=\"text-xl font-semibold mt-6\">\n                        💻 Tech Stack\n                    </h2>\n                    <p className=\"mb-4\">\n                        <strong className=\"text-blue-500\">Frontend:</strong>{' '}\n                        React, Vue, TypeScript, Tailwind CSS, Vite <br />\n                        <strong className=\"text-blue-500\">Backend:</strong>{' '}\n                        Node.js, Express, MySQL, Firebase <br />\n                        <strong className=\"text-blue-500\">\n                            Cloud & DevOps:\n                        </strong>{' '}\n                        AWS, Google Cloud, GitHub Actions, CI/CD <br />\n                        <strong className=\"text-blue-500\">\n                            Testing & Automation:\n                        </strong>{' '}\n                        Cypress, Jest\n                    </p>\n\n                    <p className=\"mb-4\">\n                        I’m always exploring{' '}\n                        <strong className=\"text-blue-500\">\n                            new technologies, frameworks, and best practices\n                        </strong>{' '}\n                        to stay ahead in the ever-evolving tech world. When I’m\n                        not coding, you can find me\n                        <strong className=\"text-blue-500\">\n                            experimenting with new tech, reading dev blogs, or\n                            hiking in nature\n                        </strong>\n                        .\n                    </p>\n                </div>\n            </div>\n            <div className=\"flex flex-col gap-10 items-center my-10\">\n                <p className=\"text-5xl font-bold text-center\">\n                    Skills & Technologies\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-5 w-full justify-center\">\n                    {skills.map((skill) => (\n                        <div className=\"flex flex-col gap-5 app-container app-shadow text-xl h-52\">\n                            <div className=\"flex gap-2 items-center\">\n                                <div className=\"p-3 rounded-lg app-shadow\">\n                                    <SvgIcon\n                                        path={skill.icon}\n                                        className=\"w-8 h-8\"\n                                    />\n                                </div>\n                                <p className=\"text-xl font-bold\">\n                                    {skill.title}\n                                </p>\n                            </div>\n                            <div className=\"grid grid-cols-2 gap-3\">\n                                {skill.skills.map((_skill) => (\n                                    <p className=\"text-sm flex items-center gap-2\">\n                                        <span className=\"rounded-full bg-gray-400 p-1\"></span>\n                                        {_skill}\n                                    </p>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className=\"flex flex-col gap-10 items-center my-10\">\n                <p className=\"text-5xl font-bold text-center\">\n                    Featured Projects\n                </p>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-5 w-full\">\n                    {projects.length ? (\n                        projects.map((skill) => (\n                            <div className=\"flex flex-col gap-3 app-container app-shadow w-full text-xl\">\n                                <div className=\"flex gap-2 items-center\">\n                                    <div className=\"p-3 rounded-lg app-shadow\">\n                                        <SvgIcon\n                                            path={skill.icon}\n                                            className=\"w-8 h-8\"\n                                        />\n                                    </div>\n                                    <p className=\"text-xl font-bold\">\n                                        {skill.title}\n                                    </p>\n                                </div>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"text-3xl text-center sm:col-span-2 font-bold text-gray-400 my-10\">\n                            No Projects Available\n                        </p>\n                    )}\n                </div>\n            </div>\n            {/* <div className=\"flex flex-col gap-10 items-center my-10\">\n                <p className=\"text-5xl font-bold text-center\">Get In Touch</p>\n                <div className=\"app-container app-shadow w-full max-w-screen-lg\">\n                    <FormBuilder\n                        layoutClassName=\"grid grid-cols-1 sm:grid-cols-2 gap-5\"\n                        form={contactForm}\n                        call={call}\n                        formBottom={\n                            <div className=\"flex ml-auto sm:col-span-2\">\n                                <button\n                                    type=\"submit\"\n                                    className=\"app-button app-shadow flex items-center gap-2\"\n                                >\n                                    Send Message\n                                    <SvgIcon\n                                        path=\"/icons/svg/send.svg\"\n                                        className=\"w-5 h-5\"\n                                    />\n                                </button>\n                            </div>\n                        }\n                    />\n                </div>\n            </div> */}\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/privacyPolicy.tsx",
    "content": "export default () => {\n    return (\n        <div className=\"max-w-3xl mx-auto p-6 mt-10 w-full\">\n            <h1 className=\"text-3xl font-bold mb-4\">Privacy Policy</h1>\n            <p className=\"mb-4\">\n                Your privacy is important to us. This policy explains how we\n                handle your data.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">1. Data Collection</h2>\n            <p className=\"mb-4\">\n                We collect transaction details and user account information to\n                improve our services.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">2. Data Usage</h2>\n            <p className=\"mb-4\">\n                Your data is used solely for the purpose of expense tracking and\n                analytics within the app.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">3. Data Sharing</h2>\n            <p className=\"mb-4\">\n                We do not sell or share your personal data with third parties,\n                except as required by law.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">4. Security</h2>\n            <p className=\"mb-4\">\n                We implement security measures to protect your data, but we\n                cannot guarantee absolute security.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">5. Changes to Policy</h2>\n            <p className=\"mb-4\">\n                We may update this Privacy Policy. Continued use of the app\n                indicates acceptance of the new policy.\n            </p>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/settings.tsx",
    "content": "import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n//\nimport SvgIcon from 'src/app/components/svg';\nimport { UserInfo } from './components/userInfo';\nimport { ChangePassword } from './components/changePassword';\nimport { Setting } from './components/setting';\n\n//\nconst navigation = [\n    { label: 'Profile', key: 'profile_tab', icon: '/icons/svg/user.svg' },\n    {\n        label: 'Change password',\n        key: 'change_password_tab',\n        icon: '/icons/svg/lock.svg',\n    },\n    { label: 'Settings', key: 'setting_tab', icon: '/icons/svg/setting.svg' },\n];\n\nexport default () => {\n    const [tab, setTab] = useState('profile_tab');\n    const { state } = useLocation();\n\n    useEffect(() => {\n        if (state?.menu) setTab(state.menu);\n    }, [state?.menu]);\n\n    return (\n        <>\n            <div\n                className=\"max-w-screen-lg w-full self-center m-auto app-height\"\n                data-testid=\"PROFILE_PAGE\"\n            >\n                <p className=\"text-2xl font-bold\">Settings</p>\n                <p className=\"text-gray-500 my-2  mb-5\">\n                    Manage your account settings and preferences.\n                </p>\n                <div className=\"flex max-sm:flex-col gap-2 w-full mx-auto\">\n                    <div className=\"flex sm:flex-col gap-3 sticky top-24 w-fit max-sm:self-center sm:min-w-[270px] sm:h-[80dvh] overflow-hidden light:bg-white border app-container app-inner-shadow !p-0 sm:!pt-5\">\n                        {navigation.map((_tab) => (\n                            <div\n                                key={_tab.label}\n                                data-testid={_tab.key}\n                                className={`cursor-pointer text-lg capitalize max-sm:!p-3 max-sm:!px-6 flex items-center gap-2 app-button !justify-start !rounded-none !w-full`}\n                                onClick={() => {\n                                    setTab(_tab.key);\n                                }}\n                            >\n                                <SvgIcon path={_tab.icon} className=\"w-4 h-4\" />\n                                {_tab.key === tab && (\n                                    <span className=\"h-1 sm:w-1 max-sm:rounded-t-lg sm:rounded-r-lg bg-current w-6 sm:h-8 absolute max-sm:-mb-9 -ml-1 sm:-ml-4\"></span>\n                                )}\n                                <p className=\"max-sm:hidden text-[16px]\">\n                                    {_tab.label}\n                                </p>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"flex flex-col gap-4 px-2 py-8 sm:p-8 w-full light:bg-white rounded-lg border app-container app-shadow\">\n                        {\n                            {\n                                profile_tab: <UserInfo />,\n                                change_password_tab: <ChangePassword />,\n                                setting_tab: <Setting />,\n                            }[tab.toLowerCase()]\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/pages/termsAndCondition.tsx",
    "content": "export default () => {\n    return (\n        <div className=\"max-w-3xl mx-auto p-6 mt-10 w-full\">\n            <h1 className=\"text-3xl font-bold mb-4\">Terms & Conditions</h1>\n            <p className=\"mb-4\">\n                By using this application, you agree to the following terms.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">1. Usage Policy</h2>\n            <p className=\"mb-4\">\n                You must be at least 13 years old to use this app. Misuse of the\n                app is strictly prohibited.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">\n                2. User Responsibility\n            </h2>\n            <p className=\"mb-4\">\n                You are responsible for any activity conducted through your\n                account.\n            </p>\n\n            <h2 className=\"text-xl font-semibold mt-4\">3. Liability</h2>\n            <p className=\"mb-4\">\n                We are not liable for any loss of data or damages arising from\n                the use of this app.\n            </p>\n        </div>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/app/router.tsx",
    "content": "import { lazy, ReactNode, useContext } from 'react';\nimport { Navigate, useRoutes } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { UserContext } from 'src/providers/context';\nimport { CommonPage } from 'src/app/components/page';\nimport { Loading } from 'src/app/components/loading';\n\n//\nconst Private = ({\n    protect,\n    children,\n}: {\n    children: ReactNode;\n    protect?: boolean;\n}) => {\n    const user = useContext(UserContext);\n\n    if (user?.loading) return <Loading />;\n\n    if (\n        (Boolean(user?.signedIn) && protect) ||\n        (Boolean(!user?.signedIn) && !protect)\n    ) {\n        return <>{children}</>;\n    }\n\n    return <Navigate to={import.meta.env.BASE_URL} />;\n};\n\n//\nconst Layout = lazy(() => import('src/app/pages/layout'));\nconst MainPage = lazy(() => import('src/app/pages/main'));\nconst SignInPage = lazy(() => import('src/app/pages/authentication/signIn'));\nconst SignUpPage = lazy(() => import('src/app/pages/authentication/signUp'));\nconst ForgotPasswordPage = lazy(\n    () => import('src/app/pages/authentication/forgotPassword')\n);\nconst ResetPasswordPage = lazy(\n    () => import('src/app/pages/authentication/resetPassword')\n);\nconst VerificationPage = lazy(\n    () => import('src/app/pages/authentication/verification')\n);\nconst AppPage = lazy(() => import('src/app/pages/app'));\nconst SettingsPage = lazy(() => import('src/app/pages/settings'));\nconst PrivacyPolicy = lazy(() => import('src/app/pages/privacyPolicy'));\nconst TermsAndConditions = lazy(\n    () => import('src/app/pages/termsAndCondition')\n);\nconst Maintenance = lazy(() => import('src/app/components/maintenance'));\n\nconst Router = () =>\n    useRoutes([\n        {\n            path: routes.root,\n            element: <Layout />,\n            children: [\n                {\n                    path: routes.root,\n                    element: <MainPage />,\n                },\n                {\n                    path: routes.signIn,\n                    element: (\n                        <Private>\n                            <SignInPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.signUp,\n                    element: (\n                        <Private>\n                            <SignUpPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.forgotPassword,\n                    element: (\n                        <Private>\n                            <ForgotPasswordPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.resetPassword,\n                    element: (\n                        <Private>\n                            <ResetPasswordPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.verify,\n                    element: (\n                        <Private>\n                            <VerificationPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.app,\n                    element: <AppPage />,\n                },\n                {\n                    path: routes.settings,\n                    element: (\n                        <Private protect>\n                            <SettingsPage />\n                        </Private>\n                    ),\n                },\n                {\n                    path: routes.privacyPolicy,\n                    element: <PrivacyPolicy />,\n                },\n                {\n                    path: routes.termsAndConditions,\n                    element: <TermsAndConditions />,\n                },\n                {\n                    path: routes.maintenance,\n                    element: <Maintenance />,\n                },\n                {\n                    path: '*',\n                    element: <CommonPage content=\"404 Page Not Found\" />,\n                },\n            ],\n        },\n    ]);\n\nexport default Router;\n"
  },
  {
    "filePath": "packages/frontend-react/src/main.tsx",
    "content": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport 'src/app/assets/index.css';\nimport App from 'src/app/App';\n\n//\ncreateRoot(document.getElementById('root')!).render(\n    <StrictMode>\n        <App />\n    </StrictMode>\n);\n"
  },
  {
    "filePath": "packages/frontend-react/src/providers/context.tsx",
    "content": "import { createContext } from 'react';\n\n//\nexport const UserContext = createContext<\n    (ILargeRecord & { updateUser: () => void; loading: boolean }) | undefined\n>(undefined);\n"
  },
  {
    "filePath": "packages/frontend-react/src/providers/errorBoundary.tsx",
    "content": "import { ReactNode } from 'react';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\n\nexport const ErrorBoundaryProvider = (props: { children: ReactNode }) => (\n    <ErrorBoundary FallbackComponent={ErrorHandler} {...props} />\n);\n\nconst ErrorHandler = ({ error, resetErrorBoundary }: FallbackProps) => (\n    <div className=\"flex items-center justify-center h-screen app-width\">\n        <div className=\"flex flex-col items-center gap-3\">\n            <p className=\"text-2xl font-bold\">{error.name}</p>\n            <p className=\"text-lg\">{error.message}</p>\n            <button className=\"app-button\" onClick={resetErrorBoundary}>\n                Try again\n            </button>\n        </div>\n    </div>\n);\n"
  },
  {
    "filePath": "packages/frontend-react/src/providers/toast.tsx",
    "content": "import { ReactNode, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\n\n//\nimport Toast from 'src/app/components/toast';\n\n//\nexport const ToastProvider = ({ children }: { children: ReactNode }) => {\n    useEffect(() => {\n        window.showToast = showToast;\n    }, []);\n\n    return (\n        <div>\n            <div\n                id=\"handle-toast\"\n                className=\"fixed top-2 right-2 z-50 flex flex-col gap-2\"\n            />\n            {children}\n        </div>\n    );\n};\n\nexport const showToast = (props: IToast) => {\n    const handelClose = () =>\n        createRoot(document.getElementById('handle-toast')!).render(<></>);\n    createRoot(document.getElementById('handle-toast')!).render(\n        <Toast {...props} close={handelClose} />\n    );\n    setTimeout(() => {\n        handelClose();\n    }, 5000);\n};\n\nexport interface IToast {\n    message: string;\n    type: 'info' | 'error' | 'warning' | 'success';\n}\n"
  },
  {
    "filePath": "packages/frontend-react/src/providers/userContext.tsx",
    "content": "import { ReactNode, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n//\nimport { routes } from 'services/constants/routes';\nimport { getUserDetail } from 'services/repository/authentication';\nimport { UserContext } from './context';\n\n//\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n    const [loading, setLoading] = useState(true);\n    const [user, setUser] = useState<ILargeRecord | undefined>();\n    const [update, setUpdate] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        getUserDetail().then((data) => {\n            setUser({ ...data, signedIn: !!data.userId });\n            window.signedIn = !!data.userId;\n            setLoading(false);\n        });\n    }, [update]);\n\n    useEffect(() => {\n        window.logout = () => {\n            setUser({ signedIn: false });\n            window.signedIn = false;\n            navigate(routes.root);\n        };\n    }, []);\n\n    const updateUser = () => {\n        setUpdate((prev) => !prev);\n    };\n\n    return (\n        <UserContext.Provider value={{ ...user, loading, updateUser }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n"
  },
  {
    "filePath": "packages/frontend-react/src/sw.ts",
    "content": "const CACHE_NAME = `${import.meta.env.VITE_APP_NAME}`\n    .replaceAll(\"\\\\'\", '')\n    .replaceAll(' ', '_');\n\nself.addEventListener('install', (event) => {\n    console.info('Service Worker installing');\n    event.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (event) => {\n    console.info('Service Worker activating');\n    event.waitUntil(\n        caches.keys().then(function (cacheNames) {\n            return Promise.all(\n                cacheNames.map(function (cacheName) {\n                    if (cacheName !== CACHE_NAME) {\n                        return caches.delete(cacheName);\n                    }\n                })\n            );\n        })\n    );\n    event.waitUntil(self.clients.claim());\n});\n\nself.addEventListener('fetch', (event) => {\n    if (\n        // !event.request.url.match(new RegExp(import.meta.env.VITE_CDN_DOMAIN)) &&\n        event.request.url.match(/\\.(jpe?g|png|gif|webp|svg|otf|json|svg|mp4)$/i)\n    ) {\n        event.respondWith(handleOtherRequests(event.request));\n    } else {\n        return;\n    }\n});\n\nasync function handleOtherRequests(request: Request) {\n    const cache = await caches.open(CACHE_NAME);\n\n    const cachedResponse = await cache.match(request);\n    if (cachedResponse) {\n        if (import.meta.env.MODE !== 'production')\n            console.info('[CHECK]: Serving_From_Cache', request.url);\n        return cachedResponse;\n    }\n\n    if (import.meta.env.MODE !== 'production')\n        console.info('[CHECK]: Cache_Miss! Fetching_From_Network', request.url);\n    const networkResponse = await fetch(request);\n\n    if (networkResponse.status === 200)\n        cache.put(request, networkResponse.clone());\n\n    return networkResponse;\n}\n"
  },
  {
    "filePath": "packages/frontend-react/src/vite-env.d.ts",
    "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv extends Readonly<Record<string, string>> {\n    readonly VITE_APP_NAME: string;\n    readonly VITE_ENCRYPTION: string;\n    readonly VITE_SOCKET_ENCRYPTION: string;\n    readonly VITE_IP: string;\n    readonly VITE_API_PORT: string;\n    readonly VITE_SOCKET_PORT: string;\n    readonly VITE_CDN_DOMAIN: string;\n}\n\ninterface ImportMeta {\n    readonly env: ImportMetaEnv;\n}\n\n//\ndeclare module 'virtual:svg-icons';\n\ndeclare type ILargeRecord = any;\ndeclare type ITimer = any;\n\n//\ninterface Window {\n    skipWaiting: () => void;\n    clients: {\n        claim: () => void;\n        matchAll: (arg0: { type: string }) => Promise<any>;\n        openWindow: (arg0: string) => any;\n    };\n    encryptionKey: string;\n    signedIn: boolean;\n    logout: () => void;\n    showToast: (toast: {\n        type: 'info' | 'error' | 'warning' | 'success';\n        message: string;\n    }) => void;\n}\n\ninterface Event {\n    target: EventTarget;\n    waitUntil: (args: any) => void;\n    respondWith: (args: any) => void;\n    request: any;\n}\n"
  },
  {
    "filePath": "packages/services/constants/country-num-flag-code.ts",
    "content": "export const COUNTRY_FLAG_CODE = [\n    { name: 'Afghanistan', flag: '🇦🇫', code: 'AF', dialCode: '+93' },\n    { name: 'Åland Islands', flag: '🇦🇽', code: 'AX', dialCode: '+358' },\n    { name: 'Albania', flag: '🇦🇱', code: 'AL', dialCode: '+355' },\n    { name: 'Algeria', flag: '🇩🇿', code: 'DZ', dialCode: '+213' },\n    { name: 'American Samoa', flag: '🇦🇸', code: 'AS', dialCode: '+1684' },\n    { name: 'Andorra', flag: '🇦🇩', code: 'AD', dialCode: '+376' },\n    { name: 'Angola', flag: '🇦🇴', code: 'AO', dialCode: '+244' },\n    { name: 'Anguilla', flag: '🇦🇮', code: 'AI', dialCode: '+1264' },\n    { name: 'Antarctica', flag: '🇦🇶', code: 'AQ', dialCode: '+672' },\n    { name: 'Antigua and Barbuda', flag: '🇦🇬', code: 'AG', dialCode: '+1268' },\n    { name: 'Argentina', flag: '🇦🇷', code: 'AR', dialCode: '+54' },\n    { name: 'Armenia', flag: '🇦🇲', code: 'AM', dialCode: '+374' },\n    { name: 'Aruba', flag: '🇦🇼', code: 'AW', dialCode: '+297' },\n    { name: 'Australia', flag: '🇦🇺', code: 'AU', dialCode: '+61' },\n    { name: 'Austria', flag: '🇦🇹', code: 'AT', dialCode: '+43' },\n    { name: 'Azerbaijan', flag: '🇦🇿', code: 'AZ', dialCode: '+994' },\n    { name: 'Bahamas', flag: '🇧🇸', code: 'BS', dialCode: '+1242' },\n    { name: 'Bahrain', flag: '🇧🇭', code: 'BH', dialCode: '+973' },\n    { name: 'Bangladesh', flag: '🇧🇩', code: 'BD', dialCode: '+880' },\n    { name: 'Barbados', flag: '🇧🇧', code: 'BB', dialCode: '+1246' },\n    { name: 'Belarus', flag: '🇧🇾', code: 'BY', dialCode: '+375' },\n    { name: 'Belgium', flag: '🇧🇪', code: 'BE', dialCode: '+32' },\n    { name: 'Belize', flag: '🇧🇿', code: 'BZ', dialCode: '+501' },\n    { name: 'Benin', flag: '🇧🇯', code: 'BJ', dialCode: '+229' },\n    { name: 'Bermuda', flag: '🇧🇲', code: 'BM', dialCode: '+1441' },\n    { name: 'Bhutan', flag: '🇧🇹', code: 'BT', dialCode: '+975' },\n    {\n        name: 'Bolivia, Plurinational State of bolivia',\n        flag: '🇧🇴',\n        code: 'BO',\n        dialCode: '+591',\n    },\n    {\n        name: 'Bosnia and Herzegovina',\n        flag: '🇧🇦',\n        code: 'BA',\n        dialCode: '+387',\n    },\n    { name: 'Botswana', flag: '🇧🇼', code: 'BW', dialCode: '+267' },\n    { name: 'Bouvet Island', flag: '🇧🇻', code: 'BV', dialCode: '+47' },\n    { name: 'Brazil', flag: '🇧🇷', code: 'BR', dialCode: '+55' },\n    {\n        name: 'British Indian Ocean Territory',\n        flag: '🇮🇴',\n        code: 'IO',\n        dialCode: '+246',\n    },\n    { name: 'Brunei Darussalam', flag: '🇧🇳', code: 'BN', dialCode: '+673' },\n    { name: 'Bulgaria', flag: '🇧🇬', code: 'BG', dialCode: '+359' },\n    { name: 'Burkina Faso', flag: '🇧🇫', code: 'BF', dialCode: '+226' },\n    { name: 'Burundi', flag: '🇧🇮', code: 'BI', dialCode: '+257' },\n    { name: 'Cambodia', flag: '🇰🇭', code: 'KH', dialCode: '+855' },\n    { name: 'Cameroon', flag: '🇨🇲', code: 'CM', dialCode: '+237' },\n    { name: 'Canada', flag: '🇨🇦', code: 'CA', dialCode: '+1' },\n    { name: 'Cape Verde', flag: '🇨🇻', code: 'CV', dialCode: '+238' },\n    { name: 'Cayman Islands', flag: '🇰🇾', code: 'KY', dialCode: '+345' },\n    {\n        name: 'Central African Republic',\n        flag: '🇨🇫',\n        code: 'CF',\n        dialCode: '+236',\n    },\n    { name: 'Chad', flag: '🇹🇩', code: 'TD', dialCode: '+235' },\n    { name: 'Chile', flag: '🇨🇱', code: 'CL', dialCode: '+56' },\n    { name: 'China', flag: '🇨🇳', code: 'CN', dialCode: '+86' },\n    { name: 'Christmas Island', flag: '🇨🇽', code: 'CX', dialCode: '+61' },\n    {\n        name: 'Cocos (Keeling) Islands',\n        flag: '🇨🇨',\n        code: 'CC',\n        dialCode: '+61',\n    },\n    { name: 'Colombia', flag: '🇨🇴', code: 'CO', dialCode: '+57' },\n    { name: 'Comoros', flag: '🇰🇲', code: 'KM', dialCode: '+269' },\n    { name: 'Congo', flag: '🇨🇬', code: 'CG', dialCode: '+242' },\n    {\n        name: 'Congo, The Democratic Republic of the Congo',\n        flag: '🇨🇩',\n        code: 'CD',\n        dialCode: '+243',\n    },\n    { name: 'Cook Islands', flag: '🇨🇰', code: 'CK', dialCode: '+682' },\n    { name: 'Costa Rica', flag: '🇨🇷', code: 'CR', dialCode: '+506' },\n    { name: \"Cote d'Ivoire\", flag: '🇨🇮', code: 'CI', dialCode: '+225' },\n    { name: 'Croatia', flag: '🇭🇷', code: 'HR', dialCode: '+385' },\n    { name: 'Cuba', flag: '🇨🇺', code: 'CU', dialCode: '+53' },\n    { name: 'Cyprus', flag: '🇨🇾', code: 'CY', dialCode: '+357' },\n    { name: 'Czech Republic', flag: '🇨🇿', code: 'CZ', dialCode: '+420' },\n    { name: 'Denmark', flag: '🇩🇰', code: 'DK', dialCode: '+45' },\n    { name: 'Djibouti', flag: '🇩🇯', code: 'DJ', dialCode: '+253' },\n    { name: 'Dominica', flag: '🇩🇲', code: 'DM', dialCode: '+1767' },\n    { name: 'Dominican Republic', flag: '🇩🇴', code: 'DO', dialCode: '+1849' },\n    { name: 'Ecuador', flag: '🇪🇨', code: 'EC', dialCode: '+593' },\n    { name: 'Egypt', flag: '🇪🇬', code: 'EG', dialCode: '+20' },\n    { name: 'El Salvador', flag: '🇸🇻', code: 'SV', dialCode: '+503' },\n    { name: 'Equatorial Guinea', flag: '🇬🇶', code: 'GQ', dialCode: '+240' },\n    { name: 'Eritrea', flag: '🇪🇷', code: 'ER', dialCode: '+291' },\n    { name: 'Estonia', flag: '🇪🇪', code: 'EE', dialCode: '+372' },\n    { name: 'Ethiopia', flag: '🇪🇹', code: 'ET', dialCode: '+251' },\n    {\n        name: 'Falkland Islands (Malvinas)',\n        flag: '🇫🇰',\n        code: 'FK',\n        dialCode: '+500',\n    },\n    { name: 'Faroe Islands', flag: '🇫🇴', code: 'FO', dialCode: '+298' },\n    { name: 'Fiji', flag: '🇫🇯', code: 'FJ', dialCode: '+679' },\n    { name: 'Finland', flag: '🇫🇮', code: 'FI', dialCode: '+358' },\n    { name: 'France', flag: '🇫🇷', code: 'FR', dialCode: '+33' },\n    { name: 'French Guiana', flag: '🇬🇫', code: 'GF', dialCode: '+594' },\n    { name: 'French Polynesia', flag: '🇵🇫', code: 'PF', dialCode: '+689' },\n    {\n        name: 'French Southern Territories',\n        flag: '🇹🇫',\n        code: 'TF',\n        dialCode: '+262',\n    },\n    { name: 'Gabon', flag: '🇬🇦', code: 'GA', dialCode: '+241' },\n    { name: 'Gambia', flag: '🇬🇲', code: 'GM', dialCode: '+220' },\n    { name: 'Georgia', flag: '🇬🇪', code: 'GE', dialCode: '+995' },\n    { name: 'Germany', flag: '🇩🇪', code: 'DE', dialCode: '+49' },\n    { name: 'Ghana', flag: '🇬🇭', code: 'GH', dialCode: '+233' },\n    { name: 'Gibraltar', flag: '🇬🇮', code: 'GI', dialCode: '+350' },\n    { name: 'Greece', flag: '🇬🇷', code: 'GR', dialCode: '+30' },\n    { name: 'Greenland', flag: '🇬🇱', code: 'GL', dialCode: '+299' },\n    { name: 'Grenada', flag: '🇬🇩', code: 'GD', dialCode: '+1473' },\n    { name: 'Guadeloupe', flag: '🇬🇵', code: 'GP', dialCode: '+590' },\n    { name: 'Guam', flag: '🇬🇺', code: 'GU', dialCode: '+1671' },\n    { name: 'Guatemala', flag: '🇬🇹', code: 'GT', dialCode: '+502' },\n    { name: 'Guernsey', flag: '🇬🇬', code: 'GG', dialCode: '+44' },\n    { name: 'Guinea', flag: '🇬🇳', code: 'GN', dialCode: '+224' },\n    { name: 'Guinea-Bissau', flag: '🇬🇼', code: 'GW', dialCode: '+245' },\n    { name: 'Guyana', flag: '🇬🇾', code: 'GY', dialCode: '+592' },\n    { name: 'Haiti', flag: '🇭🇹', code: 'HT', dialCode: '+509' },\n    {\n        name: 'Heard Island and Mcdonald Islands',\n        flag: '🇭🇲',\n        code: 'HM',\n        dialCode: '+672',\n    },\n    {\n        name: 'Holy See (Vatican City State)',\n        flag: '🇻🇦',\n        code: 'VA',\n        dialCode: '+379',\n    },\n    { name: 'Honduras', flag: '🇭🇳', code: 'HN', dialCode: '+504' },\n    { name: 'Hong Kong', flag: '🇭🇰', code: 'HK', dialCode: '+852' },\n    { name: 'Hungary', flag: '🇭🇺', code: 'HU', dialCode: '+36' },\n    { name: 'Iceland', flag: '🇮🇸', code: 'IS', dialCode: '+354' },\n    { name: 'India', flag: '🇮🇳', code: 'IN', dialCode: '+91' },\n    { name: 'Indonesia', flag: '🇮🇩', code: 'ID', dialCode: '+62' },\n    {\n        name: 'Iran, Islamic Republic of Persian Gulf',\n        flag: '🇮🇷',\n        code: 'IR',\n        dialCode: '+98',\n    },\n    { name: 'Iraq', flag: '🇮🇶', code: 'IQ', dialCode: '+964' },\n    { name: 'Ireland', flag: '🇮🇪', code: 'IE', dialCode: '+353' },\n    { name: 'Isle of Man', flag: '🇮🇲', code: 'IM', dialCode: '+44' },\n    { name: 'Israel', flag: '🇮🇱', code: 'IL', dialCode: '+972' },\n    { name: 'Italy', flag: '🇮🇹', code: 'IT', dialCode: '+39' },\n    { name: 'Jamaica', flag: '🇯🇲', code: 'JM', dialCode: '+1876' },\n    { name: 'Japan', flag: '🇯🇵', code: 'JP', dialCode: '+81' },\n    { name: 'Jersey', flag: '🇯🇪', code: 'JE', dialCode: '+44' },\n    { name: 'Jordan', flag: '🇯🇴', code: 'JO', dialCode: '+962' },\n    { name: 'Kazakhstan', flag: '🇰🇿', code: 'KZ', dialCode: '+7' },\n    { name: 'Kenya', flag: '🇰🇪', code: 'KE', dialCode: '+254' },\n    { name: 'Kiribati', flag: '🇰🇮', code: 'KI', dialCode: '+686' },\n    {\n        name: \"Korea, Democratic People's Republic of Korea\",\n        flag: '🇰🇵',\n        code: 'KP',\n        dialCode: '+850',\n    },\n    {\n        name: 'Korea, Republic of South Korea',\n        flag: '🇰🇷',\n        code: 'KR',\n        dialCode: '+82',\n    },\n    { name: 'Kosovo', flag: '🇽🇰', code: 'XK', dialCode: '+383' },\n    { name: 'Kuwait', flag: '🇰🇼', code: 'KW', dialCode: '+965' },\n    { name: 'Kyrgyzstan', flag: '🇰🇬', code: 'KG', dialCode: '+996' },\n    { name: 'Laos', flag: '🇱🇦', code: 'LA', dialCode: '+856' },\n    { name: 'Latvia', flag: '🇱🇻', code: 'LV', dialCode: '+371' },\n    { name: 'Lebanon', flag: '🇱🇧', code: 'LB', dialCode: '+961' },\n    { name: 'Lesotho', flag: '🇱🇸', code: 'LS', dialCode: '+266' },\n    { name: 'Liberia', flag: '🇱🇷', code: 'LR', dialCode: '+231' },\n    {\n        name: 'Libyan Arab Jamahiriya',\n        flag: '🇱🇾',\n        code: 'LY',\n        dialCode: '+218',\n    },\n    { name: 'Liechtenstein', flag: '🇱🇮', code: 'LI', dialCode: '+423' },\n    { name: 'Lithuania', flag: '🇱🇹', code: 'LT', dialCode: '+370' },\n    { name: 'Luxembourg', flag: '🇱🇺', code: 'LU', dialCode: '+352' },\n    { name: 'Macao', flag: '🇲🇴', code: 'MO', dialCode: '+853' },\n    { name: 'Macedonia', flag: '🇲🇰', code: 'MK', dialCode: '+389' },\n    { name: 'Madagascar', flag: '🇲🇬', code: 'MG', dialCode: '+261' },\n    { name: 'Malawi', flag: '🇲🇼', code: 'MW', dialCode: '+265' },\n    { name: 'Malaysia', flag: '🇲🇾', code: 'MY', dialCode: '+60' },\n    { name: 'Maldives', flag: '🇲🇻', code: 'MV', dialCode: '+960' },\n    { name: 'Mali', flag: '🇲🇱', code: 'ML', dialCode: '+223' },\n    { name: 'Malta', flag: '🇲🇹', code: 'MT', dialCode: '+356' },\n    { name: 'Marshall Islands', flag: '🇲🇭', code: 'MH', dialCode: '+692' },\n    { name: 'Martinique', flag: '🇲🇶', code: 'MQ', dialCode: '+596' },\n    { name: 'Mauritania', flag: '🇲🇷', code: 'MR', dialCode: '+222' },\n    { name: 'Mauritius', flag: '🇲🇺', code: 'MU', dialCode: '+230' },\n    { name: 'Mayotte', flag: '🇾🇹', code: 'YT', dialCode: '+262' },\n    { name: 'Mexico', flag: '🇲🇽', code: 'MX', dialCode: '+52' },\n    {\n        name: 'Micronesia, Federated States of Micronesia',\n        flag: '🇫🇲',\n        code: 'FM',\n        dialCode: '+691',\n    },\n    { name: 'Moldova', flag: '🇲🇩', code: 'MD', dialCode: '+373' },\n    { name: 'Monaco', flag: '🇲🇨', code: 'MC', dialCode: '+377' },\n    { name: 'Mongolia', flag: '🇲🇳', code: 'MN', dialCode: '+976' },\n    { name: 'Montenegro', flag: '🇲🇪', code: 'ME', dialCode: '+382' },\n    { name: 'Montserrat', flag: '🇲🇸', code: 'MS', dialCode: '+1664' },\n    { name: 'Morocco', flag: '🇲🇦', code: 'MA', dialCode: '+212' },\n    { name: 'Mozambique', flag: '🇲🇿', code: 'MZ', dialCode: '+258' },\n    { name: 'Myanmar', flag: '🇲🇲', code: 'MM', dialCode: '+95' },\n    { name: 'Namibia', flag: '🇳🇦', code: 'NA', dialCode: '+264' },\n    { name: 'Nauru', flag: '🇳🇷', code: 'NR', dialCode: '+674' },\n    { name: 'Nepal', flag: '🇳🇵', code: 'NP', dialCode: '+977' },\n    { name: 'Netherlands', flag: '🇳🇱', code: 'NL', dialCode: '+31' },\n    { name: 'Netherlands Antilles', flag: '', code: 'AN', dialCode: '+599' },\n    { name: 'New Caledonia', flag: '🇳🇨', code: 'NC', dialCode: '+687' },\n    { name: 'New Zealand', flag: '🇳🇿', code: 'NZ', dialCode: '+64' },\n    { name: 'Nicaragua', flag: '🇳🇮', code: 'NI', dialCode: '+505' },\n    { name: 'Niger', flag: '🇳🇪', code: 'NE', dialCode: '+227' },\n    { name: 'Nigeria', flag: '🇳🇬', code: 'NG', dialCode: '+234' },\n    { name: 'Niue', flag: '🇳🇺', code: 'NU', dialCode: '+683' },\n    { name: 'Norfolk Island', flag: '🇳🇫', code: 'NF', dialCode: '+672' },\n    {\n        name: 'Northern Mariana Islands',\n        flag: '🇲🇵',\n        code: 'MP',\n        dialCode: '+1670',\n    },\n    { name: 'Norway', flag: '🇳🇴', code: 'NO', dialCode: '+47' },\n    { name: 'Oman', flag: '🇴🇲', code: 'OM', dialCode: '+968' },\n    { name: 'Pakistan', flag: '🇵🇰', code: 'PK', dialCode: '+92' },\n    { name: 'Palau', flag: '🇵🇼', code: 'PW', dialCode: '+680' },\n    {\n        name: 'Palestinian Territory, Occupied',\n        flag: '🇵🇸',\n        code: 'PS',\n        dialCode: '+970',\n    },\n    { name: 'Panama', flag: '🇵🇦', code: 'PA', dialCode: '+507' },\n    { name: 'Papua New Guinea', flag: '🇵🇬', code: 'PG', dialCode: '+675' },\n    { name: 'Paraguay', flag: '🇵🇾', code: 'PY', dialCode: '+595' },\n    { name: 'Peru', flag: '🇵🇪', code: 'PE', dialCode: '+51' },\n    { name: 'Philippines', flag: '🇵🇭', code: 'PH', dialCode: '+63' },\n    { name: 'Pitcairn', flag: '🇵🇳', code: 'PN', dialCode: '+64' },\n    { name: 'Poland', flag: '🇵🇱', code: 'PL', dialCode: '+48' },\n    { name: 'Portugal', flag: '🇵🇹', code: 'PT', dialCode: '+351' },\n    { name: 'Puerto Rico', flag: '🇵🇷', code: 'PR', dialCode: '+1939' },\n    { name: 'Qatar', flag: '🇶🇦', code: 'QA', dialCode: '+974' },\n    { name: 'Romania', flag: '🇷🇴', code: 'RO', dialCode: '+40' },\n    { name: 'Russia', flag: '🇷🇺', code: 'RU', dialCode: '+7' },\n    { name: 'Rwanda', flag: '🇷🇼', code: 'RW', dialCode: '+250' },\n    { name: 'Reunion', flag: '🇷🇪', code: 'RE', dialCode: '+262' },\n    { name: 'Saint Barthelemy', flag: '🇧🇱', code: 'BL', dialCode: '+590' },\n    {\n        name: 'Saint Helena, Ascension and Tristan Da Cunha',\n        flag: '🇸🇭',\n        code: 'SH',\n        dialCode: '+290',\n    },\n    {\n        name: 'Saint Kitts and Nevis',\n        flag: '🇰🇳',\n        code: 'KN',\n        dialCode: '+1869',\n    },\n    { name: 'Saint Lucia', flag: '🇱🇨', code: 'LC', dialCode: '+1758' },\n    { name: 'Saint Martin', flag: '🇲🇫', code: 'MF', dialCode: '+590' },\n    {\n        name: 'Saint Pierre and Miquelon',\n        flag: '🇵🇲',\n        code: 'PM',\n        dialCode: '+508',\n    },\n    {\n        name: 'Saint Vincent and the Grenadines',\n        flag: '🇻🇨',\n        code: 'VC',\n        dialCode: '+1784',\n    },\n    { name: 'Samoa', flag: '🇼🇸', code: 'WS', dialCode: '+685' },\n    { name: 'San Marino', flag: '🇸🇲', code: 'SM', dialCode: '+378' },\n    { name: 'Sao Tome and Principe', flag: '🇸🇹', code: 'ST', dialCode: '+239' },\n    { name: 'Saudi Arabia', flag: '🇸🇦', code: 'SA', dialCode: '+966' },\n    { name: 'Senegal', flag: '🇸🇳', code: 'SN', dialCode: '+221' },\n    { name: 'Serbia', flag: '🇷🇸', code: 'RS', dialCode: '+381' },\n    { name: 'Seychelles', flag: '🇸🇨', code: 'SC', dialCode: '+248' },\n    { name: 'Sierra Leone', flag: '🇸🇱', code: 'SL', dialCode: '+232' },\n    { name: 'Singapore', flag: '🇸🇬', code: 'SG', dialCode: '+65' },\n    { name: 'Slovakia', flag: '🇸🇰', code: 'SK', dialCode: '+421' },\n    { name: 'Slovenia', flag: '🇸🇮', code: 'SI', dialCode: '+386' },\n    { name: 'Solomon Islands', flag: '🇸🇧', code: 'SB', dialCode: '+677' },\n    { name: 'Somalia', flag: '🇸🇴', code: 'SO', dialCode: '+252' },\n    { name: 'South Africa', flag: '🇿🇦', code: 'ZA', dialCode: '+27' },\n    { name: 'South Sudan', flag: '🇸🇸', code: 'SS', dialCode: '+211' },\n    {\n        name: 'South Georgia and the South Sandwich Islands',\n        flag: '🇬🇸',\n        code: 'GS',\n        dialCode: '+500',\n    },\n    { name: 'Spain', flag: '🇪🇸', code: 'ES', dialCode: '+34' },\n    { name: 'Sri Lanka', flag: '🇱🇰', code: 'LK', dialCode: '+94' },\n    { name: 'Sudan', flag: '🇸🇩', code: 'SD', dialCode: '+249' },\n    { name: 'Suriname', flag: '🇸🇷', code: 'SR', dialCode: '+597' },\n    { name: 'Svalbard and Jan Mayen', flag: '🇸🇯', code: 'SJ', dialCode: '+47' },\n    { name: 'Swaziland', flag: '🇸🇿', code: 'SZ', dialCode: '+268' },\n    { name: 'Sweden', flag: '🇸🇪', code: 'SE', dialCode: '+46' },\n    { name: 'Switzerland', flag: '🇨🇭', code: 'CH', dialCode: '+41' },\n    { name: 'Syrian Arab Republic', flag: '🇸🇾', code: 'SY', dialCode: '+963' },\n    { name: 'Taiwan', flag: '🇹🇼', code: 'TW', dialCode: '+886' },\n    { name: 'Tajikistan', flag: '🇹🇯', code: 'TJ', dialCode: '+992' },\n    {\n        name: 'Tanzania, United Republic of Tanzania',\n        flag: '🇹🇿',\n        code: 'TZ',\n        dialCode: '+255',\n    },\n    { name: 'Thailand', flag: '🇹🇭', code: 'TH', dialCode: '+66' },\n    { name: 'Timor-Leste', flag: '🇹🇱', code: 'TL', dialCode: '+670' },\n    { name: 'Togo', flag: '🇹🇬', code: 'TG', dialCode: '+228' },\n    { name: 'Tokelau', flag: '🇹🇰', code: 'TK', dialCode: '+690' },\n    { name: 'Tonga', flag: '🇹🇴', code: 'TO', dialCode: '+676' },\n    { name: 'Trinidad and Tobago', flag: '🇹🇹', code: 'TT', dialCode: '+1868' },\n    { name: 'Tunisia', flag: '🇹🇳', code: 'TN', dialCode: '+216' },\n    { name: 'Turkey', flag: '🇹🇷', code: 'TR', dialCode: '+90' },\n    { name: 'Turkmenistan', flag: '🇹🇲', code: 'TM', dialCode: '+993' },\n    {\n        name: 'Turks and Caicos Islands',\n        flag: '🇹🇨',\n        code: 'TC',\n        dialCode: '+1649',\n    },\n    { name: 'Tuvalu', flag: '🇹🇻', code: 'TV', dialCode: '+688' },\n    { name: 'Uganda', flag: '🇺🇬', code: 'UG', dialCode: '+256' },\n    { name: 'Ukraine', flag: '🇺🇦', code: 'UA', dialCode: '+380' },\n    { name: 'United Arab Emirates', flag: '🇦🇪', code: 'AE', dialCode: '+971' },\n    { name: 'United Kingdom', flag: '🇬🇧', code: 'GB', dialCode: '+44' },\n    { name: 'United States', flag: '🇺🇸', code: 'US', dialCode: '+1' },\n    { name: 'Uruguay', flag: '🇺🇾', code: 'UY', dialCode: '+598' },\n    { name: 'Uzbekistan', flag: '🇺🇿', code: 'UZ', dialCode: '+998' },\n    { name: 'Vanuatu', flag: '🇻🇺', code: 'VU', dialCode: '+678' },\n    {\n        name: 'Venezuela, Bolivarian Republic of Venezuela',\n        flag: '🇻🇪',\n        code: 'VE',\n        dialCode: '+58',\n    },\n    { name: 'Vietnam', flag: '🇻🇳', code: 'VN', dialCode: '+84' },\n    {\n        name: 'Virgin Islands, British',\n        flag: '🇻🇬',\n        code: 'VG',\n        dialCode: '+1284',\n    },\n    { name: 'Virgin Islands, U.S.', flag: '🇻🇮', code: 'VI', dialCode: '+1340' },\n    { name: 'Wallis and Futuna', flag: '🇼🇫', code: 'WF', dialCode: '+681' },\n    { name: 'Yemen', flag: '🇾🇪', code: 'YE', dialCode: '+967' },\n    { name: 'Zambia', flag: '🇿🇲', code: 'ZM', dialCode: '+260' },\n    { name: 'Zimbabwe', flag: '🇿🇼', code: 'ZW', dialCode: '+263' },\n];\n"
  },
  {
    "filePath": "packages/services/constants/demo.ts",
    "content": "export const tableData = [\n    {\n        name: 'Alice Johnson',\n        email: 'alice@example.com',\n        role: 'Admin',\n        status: 'Active',\n    },\n    {\n        name: 'Bob Smith',\n        email: 'bob@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Charlie Brown',\n        email: 'charlie@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'David Williams',\n        email: 'david@example.com',\n        role: 'User',\n        status: 'Active',\n    },\n    {\n        name: 'Emma Davis',\n        email: 'emma@example.com',\n        role: 'Admin',\n        status: 'Inactive',\n    },\n    {\n        name: 'Frank Miller',\n        email: 'frank@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Grace Lee',\n        email: 'grace@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Henry Wilson',\n        email: 'henry@example.com',\n        role: 'Admin',\n        status: 'Active',\n    },\n    {\n        name: 'Isla Martinez',\n        email: 'isla@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Jack Taylor',\n        email: 'jack@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Kate Brown',\n        email: 'kate@example.com',\n        role: 'User',\n        status: 'Active',\n    },\n    {\n        name: 'Leo Thomas',\n        email: 'leo@example.com',\n        role: 'Admin',\n        status: 'Inactive',\n    },\n    {\n        name: 'Mia Scott',\n        email: 'mia@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Noah Allen',\n        email: 'noah@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Olivia Harris',\n        email: 'olivia@example.com',\n        role: 'Admin',\n        status: 'Active',\n    },\n    {\n        name: 'Paul Young',\n        email: 'paul@example.com',\n        role: 'User',\n        status: 'Inactive',\n    },\n    {\n        name: 'Quinn Adams',\n        email: 'quinn@example.com',\n        role: 'Moderator',\n        status: 'Active',\n    },\n    {\n        name: 'Rachel White',\n        email: 'rachel@example.com',\n        role: 'Admin',\n        status: 'Inactive',\n    },\n    {\n        name: 'Samuel King',\n        email: 'samuel@example.com',\n        role: 'User',\n        status: 'Active',\n    },\n    {\n        name: 'Tina Brooks',\n        email: 'tina@example.com',\n        role: 'Moderator',\n        status: 'Inactive',\n    },\n];\n"
  },
  {
    "filePath": "packages/services/constants/index.ts",
    "content": "export const baseURL = `${import.meta.env.VITE_ENCRYPTION}://${import.meta.env.VITE_IP}:${import.meta.env.VITE_API_PORT}`;\n\nexport const getTagValues = (v: string) => {\n    return [\n        ...new Set(\n            `${v || ''}`\n                .split(/( |;|,)/g)\n                .filter((t) => !!t.replaceAll(/(\\s|;|,)/g, '').trim())\n        ),\n    ];\n};\n"
  },
  {
    "filePath": "packages/services/constants/regex.ts",
    "content": "export const emailRegex = '^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$';\nexport const passwordRegex =\n    '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&#])[A-Za-z\\\\d@$!%*?&#]{8,}$';\nexport const fullNameRegex = '^(?=.{2,30}$)[a-zA-Z]+(?:[\\\\s-][a-zA-Z]+)*$';\nexport const phoneNumberRegex =\n    '^\\\\+?[1-9]\\\\d{0,2}[-.\\\\s]?\\\\(?\\\\d{1,4}\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}$';\nexport const phoneNumberRegexWithCountryCode =\n    '^\\\\+[1-9]\\\\d{0,2}[-.\\\\s]?\\\\(?\\\\d{1,4}\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}$';\n"
  },
  {
    "filePath": "packages/services/constants/routes.ts",
    "content": "const baseURL = import.meta.env.BASE_URL;\n\nexport const routes = {\n    root: baseURL,\n    signIn: `${baseURL}sign-in`,\n    signUp: `${baseURL}sign-up`,\n    forgotPassword: `${baseURL}forgot-password`,\n    resetPassword: `${baseURL}reset-password`,\n    verify: `${baseURL}verify`,\n    app: `${baseURL}app`,\n    settings: `${baseURL}settings`,\n    privacyPolicy: `${baseURL}privacy-policy`,\n    termsAndConditions: `${baseURL}terms-and-condition`,\n    maintenance: `${baseURL}maintenance`,\n    404: `${baseURL}404`,\n};\n\nexport const links = {\n    github: 'https://github.com/SivaPrakasam7',\n    linkedIn: 'https://linkedin.com/in/siva-prakasam',\n    mail: 'mailto:prakasams22@gmail.com',\n    contact: 'https://wa.me/+916382657699',\n};\n"
  },
  {
    "filePath": "packages/services/libraries/api.ts",
    "content": "import * as Axios from 'axios';\nimport { baseURL } from '../constants';\nimport { encrypt } from '../repository/utils';\n\nconst client = Axios.default.create({\n    baseURL,\n    withCredentials: true,\n});\n\nexport const updatePublicKey = async () => {\n    await Request({\n        method: 'get',\n        url: `v1/security/keyPair`,\n    }).then((data) => {\n        if (data.publicKey) {\n            localStorage.setItem('publicKey', data.publicKey);\n            localStorage.setItem('privateKey', data.privateKey);\n        }\n        return data;\n    });\n};\n\nexport const Request = async (\n    options: Axios.AxiosRequestConfig,\n    data?: object,\n    headers?: Axios.RawAxiosRequestHeaders\n): Promise<ILargeRecord & { error: boolean }> => {\n    let reTriggered = false;\n    const _call = async () => {\n        const encryptedData =\n            headers?.['Content-Type'] === 'multipart/form-data'\n                ? data\n                : await encrypt(data);\n\n        const response = await client({\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                ...headers,\n            },\n            data: encryptedData,\n        })\n            .then((res) => res.data)\n            .catch((e) => {\n                if (e.code === 'ERR_NETWORK') {\n                    return { error: true, message: 'No internet connection' };\n                }\n\n                if (e.response?.status === 429) {\n                    window.showToast({\n                        type: 'error',\n                        message: e.response?.data,\n                    });\n                    return { error: true, message: e.response?.data };\n                }\n\n                if (e.response?.data?.message === 'KEY_EXPIRED')\n                    return { error: true, message: e.response?.data?.message };\n\n                if (\n                    e.config?.baseURL == baseURL &&\n                    e.response?.status === 401 &&\n                    window.signedIn\n                ) {\n                    window.logout();\n                    return {\n                        error: true,\n                        message: 'Token expired please login',\n                    };\n                }\n\n                return {\n                    error: true,\n                    message: e.response?.data?.message || 'Not found',\n                    code: e.response?.status,\n                };\n            });\n\n        if (response.message === 'KEY_EXPIRED' && !reTriggered) {\n            reTriggered = true;\n            await updatePublicKey();\n            return await _call();\n        }\n\n        return response;\n    };\n\n    return await _call();\n};\n"
  },
  {
    "filePath": "packages/services/repository/authentication.ts",
    "content": "import { Request } from '../libraries/api';\n\n//\nexport const login = (payload: { email: string; password: string }) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/login`,\n        },\n        payload\n    ).then(async (res) => {\n        if (res.error) {\n            window.showToast({\n                type: 'error',\n                message: res.message,\n            });\n        }\n        return res;\n    });\n\nexport const register = (payload: {\n    name: string;\n    email: string;\n    password: string;\n}) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/create`,\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const requestResetPassword = (payload: { email: string }) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/request-reset-password`,\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const changePassword = (payload: { password: string }, token: string) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/change-password`,\n        },\n        payload,\n        {\n            Authorization: `Bearer ${token}`,\n        }\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const requestVerification = (payload: {\n    email?: string;\n    phoneNumber?: string;\n}) =>\n    Request(\n        {\n            method: 'post',\n            url: `v1/user/request-verification`,\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const verifyEmailAccount = (token: string) =>\n    Request(\n        { method: 'get', url: `v1/user/verify-email` },\n        {},\n        {\n            Authorization: `Bearer ${token}`,\n        }\n    );\n\nexport const getUserDetail = () =>\n    Request({ method: 'get', url: `v1/user/profile` }).then((res) =>\n        res.error ? res : res?.data?.user\n    );\n\nexport const updateUser = (payload: Record<string, string>) =>\n    Request(\n        {\n            method: 'put',\n            url: 'v1/user/update',\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const updatePassword = (payload: Record<string, string>) =>\n    Request(\n        {\n            method: 'put',\n            url: 'v1/user/update-password',\n        },\n        payload\n    ).then((res) => {\n        window.showToast({\n            type: res.error ? 'error' : 'success',\n            message: res.message,\n        });\n        return res;\n    });\n\nexport const logout = (all = false) =>\n    Request({ method: 'post', url: `v1/user/logout` }, { all }).then((res) => {\n        window.logout();\n        return res.error ? res : res?.data?.user;\n    });\n"
  },
  {
    "filePath": "packages/services/repository/utils.ts",
    "content": "export const encrypt = async (data: ILargeRecord) => {\n    const publicKeyBase64 = localStorage.getItem('publicKey');\n    if (publicKeyBase64) {\n        const binaryString = atob(publicKeyBase64);\n        const binaryData = Uint8Array.from(binaryString, (char) =>\n            char.charCodeAt(0)\n        );\n        const publicKey = await window.crypto.subtle.importKey(\n            'spki',\n            binaryData,\n            { name: 'RSA-OAEP', hash: 'SHA-256' },\n            false,\n            ['encrypt']\n        );\n\n        const symmetricKey = await window.crypto.subtle.generateKey(\n            { name: 'AES-GCM', length: 256 },\n            true,\n            ['encrypt', 'decrypt']\n        );\n\n        const symmetricKeyRaw = await window.crypto.subtle.exportKey(\n            'raw',\n            symmetricKey\n        );\n\n        const encryptedSymmetricKey = await window.crypto.subtle.encrypt(\n            { name: 'RSA-OAEP' },\n            publicKey,\n            symmetricKeyRaw\n        );\n\n        const encoder = new TextEncoder();\n        const encodedData = encoder.encode(JSON.stringify(data));\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const encryptedData = await window.crypto.subtle.encrypt(\n            { name: 'AES-GCM', iv },\n            symmetricKey,\n            encodedData\n        );\n\n        const encryptedSymmetricKeyBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedSymmetricKey))\n        );\n        const encryptedDataBase64 = btoa(\n            String.fromCharCode(...new Uint8Array(encryptedData))\n        );\n        const ivBase64 = btoa(String.fromCharCode(...iv));\n\n        return {\n            encryptedSymmetricKey: encryptedSymmetricKeyBase64,\n            encryptedData: encryptedDataBase64,\n            iv: ivBase64,\n        };\n    }\n    return data;\n};\n\nexport const calculateFileChecksum = (file: File) => {\n    const fileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        fileReader.onload = async (event) => {\n            try {\n                const fileArrayBuffer = event.target!.result as ArrayBuffer;\n\n                const hashBuffer = await crypto.subtle.digest(\n                    'SHA-256',\n                    fileArrayBuffer\n                );\n\n                const hashArray = Array.from(new Uint8Array(hashBuffer));\n                const hashHex = hashArray\n                    .map((byte) => byte.toString(16).padStart(2, '0'))\n                    .join('');\n\n                resolve(hashHex);\n            } catch (error) {\n                reject('Error calculating checksum: ' + error);\n            }\n        };\n\n        fileReader.readAsArrayBuffer(file);\n    });\n};\n\nexport const byteFormat = (bytes: number, decimals: number) => {\n    if (!+bytes) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n};\n\nexport const formatAcceptTypes = (accept: string): string => {\n    const mimeMap: { [key: string]: string } = {\n        'image/jpeg': 'JPEG',\n        'image/png': 'PNG',\n        'image/gif': 'GIF',\n        'application/pdf': 'PDF',\n    };\n    return accept\n        .split(',')\n        .map(\n            (mime) => mimeMap[mime] || mime.split('/')[1]?.toUpperCase() || mime\n        )\n        .join(', ');\n};\n\nexport const generateKey = () => {\n    return Math.random().toString(36).substring(2, 12);\n};\n"
  },
  {
    "filePath": "packages/services/type.d.ts",
    "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv extends Readonly<Record<string, string>> {\n    readonly VITE_APP_NAME: string;\n    readonly VITE_ENCRYPTION: string;\n    readonly VITE_SOCKET_ENCRYPTION: string;\n    readonly VITE_IP: string;\n    readonly VITE_API_PORT: string;\n    readonly VITE_SOCKET_PORT: string;\n    readonly VITE_CDN_DOMAIN: string;\n}\n\ninterface ImportMeta {\n    readonly env: ImportMetaEnv;\n}\n\ndeclare type ILargeRecord = any;\n\ninterface Window {\n    skipWaiting: () => void;\n    clients: {\n        claim: () => void;\n        matchAll: (arg0: { type: string }) => Promise<any>;\n        openWindow: (arg0: string) => any;\n    };\n    encryptionKey: string;\n    signedIn: boolean;\n    logout: () => void;\n    showToast: (toast: {\n        type: 'info' | 'error' | 'warning' | 'success';\n        message: string;\n    }) => void;\n}\n\ninterface Event {\n    waitUntil: (args: any) => void;\n    respondWith: (args: any) => void;\n    request: any;\n}\n"
  }
]