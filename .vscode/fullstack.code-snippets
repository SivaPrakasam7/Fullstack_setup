{
    "InitRouter": {
        "scope": "typescript",
        "prefix": "initRouter",
        "body": [
            "import express from 'express';",
            "",
            "//",
            "import { validator } from '../../src/handler/validator';",
            "",
            "//",
            "const router = express.Router();",
            "",
            "export default router;",
        ],
    },
    "ImportController": {
        "scope": "typescript",
        "prefix": "importController",
        "body": [
            "import type { IError, IMiddleWare } from '../../src/handler/middleware';",
            "",
            "//",
            "import messages from '../utils/messages';",
            "",
            "//",
        ],
    },
    "ImportService": {
        "scope": "typescript",
        "prefix": "importService",
        "body": [
            "import { IService } from '../../src/handler/middleware';",
            "import { createError } from '../../src/handler/error';",
            "",
            "//",
            "import messages from '../utils/messages';",
            "",
            "//",
        ],
    },
    "ImportRepo": {
        "scope": "typescript",
        "prefix": "importRepo",
        "body": [
            "import { executeQuery } from '../../src/handler/db.ts';",
            "",
            "//",
        ],
    },
    "Controller": {
        "scope": "typescript",
        "prefix": "controller",
        "body": [
            "export const ${1:function}Controller: IMiddleWare = async (",
            "    req,",
            "    res,",
            "    next",
            ") => {",
            "    try {",
            "        const data = req.body;",
            "        const result = await ${2:function}Service(data);",
            "",
            "        res.status(200).json({",
            "            message: messages.responses.success,",
            "            data: result,",
            "        });",
            "    } catch (e) {",
            "        next(e as IError);",
            "    }",
            "};",
        ],
    },
    "Service": {
        "scope": "typescript",
        "prefix": "service",
        "body": [
            "export const ${1:function}Service: IService<string> = async (data) => {",
            "    const result = await ${2:function}Repo(data);",
            "",
            "    if (!result) throw createError(400, messages.responses.${3:message});",
            "",
            "    return messages.responses.${4:message};",
            "};",
        ],
    },
    "Repo": {
        "scope": "typescript",
        "prefix": "repo",
        "body": [
            "export const ${1:function}Repo = async ({${2:id}}) => {",
            "    const query = `${3:query}`;",
            "",
            "    const queryResponse = await executeQuery(query, [${2:id}]);",
            "",
            "    return queryResponse;",
            "};",
        ],
    },
    "Validation": {
        "scope": "typescript",
        "prefix": "yupvalid",
        "body": [
            "export const ${1:name}Validation = yup.object().shape({",
            "    ${2:keyName}: yup.string().required('${3:Keyname} is required'),",
            "});",
        ],
    },
    "APICall": {
        "scope": "typescript",
        "prefix": "apiCall",
        "body": [
            "export const ${1:name} = (payload: ILargeRecord) =>",
            "    Request(",
            "        {",
            "            method: '${2:method}',",
            "            url: `${3:url}`,",
            "        },",
            "        payload",
            "    ).then(async (res) => {",
            "        window.showToast({",
            "            type: re.error ? 'error' : 'success',",
            "            message: res.message,",
            "        });",
            "        return res;",
            "    });",
        ],
    },
}
